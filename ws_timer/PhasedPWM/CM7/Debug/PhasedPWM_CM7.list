
PhasedPWM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800824c  0800824c  0000924c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008284  08008284  0000a0d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008284  08008284  00009284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800828c  0800828c  0000a0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800828c  0800828c  0000928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008290  08008290  00009290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08008294  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080082a4  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08008304  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000076c  240000d0  08008364  0000a0d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400083c  08008364  0000a83c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d5bd  00000000  00000000  0000a0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f9f  00000000  00000000  000276bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f0  00000000  00000000  0002a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000112b  00000000  00000000  0002bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b9f8  00000000  00000000  0002cd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bd10  00000000  00000000  00068773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018be37  00000000  00000000  00084483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002102ba  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f54  00000000  00000000  00210300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  00216254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008234 	.word	0x08008234

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08008234 	.word	0x08008234

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b31      	ldr	r3, [pc, #196]	@ (80007c8 <main+0xd4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fbcd 	bl	8000ebc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 feed 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f857 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <main+0xd4>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a25      	ldr	r2, [pc, #148]	@ (80007c8 <main+0xd4>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <main+0xd4>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 fe77 	bl	800243c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 fe8d 	bl	8002470 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <main+0xd4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 fb9f 	bl	8000ebc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fb29 	bl	8000dd4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000782:	f000 f8a7 	bl	80008d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000786:	f000 faa7 	bl	8000cd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078a:	f000 faf1 	bl	8000d70 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800078e:	f000 f8ed 	bl	800096c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000792:	f000 f995 	bl	8000ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000796:	f000 fa25 	bl	8000be4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800079a:	2100      	movs	r1, #0
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <main+0xd8>)
 800079e:	f005 f845 	bl	800582c <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 80007a2:	2104      	movs	r1, #4
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <main+0xd8>)
 80007a6:	f004 fedb 	bl	8005560 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007aa:	2100      	movs	r1, #0
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <main+0xdc>)
 80007ae:	f005 f83d 	bl	800582c <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 80007b2:	2104      	movs	r1, #4
 80007b4:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <main+0xdc>)
 80007b6:	f004 fed3 	bl	8005560 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ba:	2100      	movs	r1, #0
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <main+0xe0>)
 80007be:	f005 f835 	bl	800582c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	bf00      	nop
 80007c4:	e7fd      	b.n	80007c2 <main+0xce>
 80007c6:	bf00      	nop
 80007c8:	58024400 	.word	0x58024400
 80007cc:	240001d4 	.word	0x240001d4
 80007d0:	24000220 	.word	0x24000220
 80007d4:	2400026c 	.word	0x2400026c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	@ 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e2:	224c      	movs	r2, #76	@ 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 fcf7 	bl	80081da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 fcf1 	bl	80081da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f001 ff7d 	bl	80026f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <SystemClock_Config+0xf4>)
 8000804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000806:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <SystemClock_Config+0xf4>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800080e:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <SystemClock_Config+0xf4>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <SystemClock_Config+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000820:	4a2b      	ldr	r2, [pc, #172]	@ (80008d0 <SystemClock_Config+0xf8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <SystemClock_Config+0xf8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <SystemClock_Config+0xf8>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800085a:	2312      	movs	r3, #18
 800085c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086a:	230c      	movs	r3, #12
 800086c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800086e:	2302      	movs	r3, #2
 8000870:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000872:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000876:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f001 ffa5 	bl	80027cc <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000888:	f000 fb18 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	233f      	movs	r3, #63	@ 0x3f
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089c:	2340      	movs	r3, #64	@ 0x40
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a0:	2340      	movs	r3, #64	@ 0x40
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fbe4 	bl	8003080 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008be:	f000 fafd 	bl	8000ebc <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	@ 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_ETH_Init+0x80>)
 80008da:	4a1f      	ldr	r2, [pc, #124]	@ (8000958 <MX_ETH_Init+0x84>)
 80008dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_ETH_Init+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_ETH_Init+0x88>)
 80008e6:	2280      	movs	r2, #128	@ 0x80
 80008e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_ETH_Init+0x88>)
 80008ec:	22e1      	movs	r2, #225	@ 0xe1
 80008ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_ETH_Init+0x88>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_ETH_Init+0x88>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_ETH_Init+0x80>)
 8000904:	4a15      	ldr	r2, [pc, #84]	@ (800095c <MX_ETH_Init+0x88>)
 8000906:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_ETH_Init+0x80>)
 800090a:	2201      	movs	r2, #1
 800090c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_ETH_Init+0x80>)
 8000910:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_ETH_Init+0x8c>)
 8000912:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_ETH_Init+0x80>)
 8000916:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <MX_ETH_Init+0x90>)
 8000918:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_ETH_Init+0x80>)
 800091c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000920:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_ETH_Init+0x80>)
 8000924:	f000 ffa6 	bl	8001874 <HAL_ETH_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 fac5 	bl	8000ebc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000932:	2238      	movs	r2, #56	@ 0x38
 8000934:	2100      	movs	r1, #0
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <MX_ETH_Init+0x94>)
 8000938:	f007 fc4f 	bl	80081da <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_ETH_Init+0x94>)
 800093e:	2221      	movs	r2, #33	@ 0x21
 8000940:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_ETH_Init+0x94>)
 8000944:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000948:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_ETH_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000124 	.word	0x24000124
 8000958:	40028000 	.word	0x40028000
 800095c:	24000830 	.word	0x24000830
 8000960:	24000070 	.word	0x24000070
 8000964:	24000010 	.word	0x24000010
 8000968:	240000ec 	.word	0x240000ec

0800096c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	@ 0x58
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	222c      	movs	r2, #44	@ 0x2c
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f007 fc1e 	bl	80081da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099e:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009a0:	4a46      	ldr	r2, [pc, #280]	@ (8000abc <MX_TIM1_Init+0x150>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a4:	4b44      	ldr	r3, [pc, #272]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b43      	ldr	r3, [pc, #268]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80009b0:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ca:	483b      	ldr	r0, [pc, #236]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009cc:	f004 fed6 	bl	800577c <HAL_TIM_PWM_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 fa71 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009da:	4837      	ldr	r0, [pc, #220]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009dc:	f004 fd5f 	bl	800549e <HAL_TIM_OC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80009e6:	f000 fa69 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80009ea:	2350      	movs	r3, #80	@ 0x50
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009fa:	4619      	mov	r1, r3
 80009fc:	482e      	ldr	r0, [pc, #184]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 80009fe:	f005 fefd 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000a08:	f000 fa58 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2360      	movs	r3, #96	@ 0x60
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 2500;
 8000a10:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4619      	mov	r1, r3
 8000a32:	4821      	ldr	r0, [pc, #132]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 8000a34:	f005 f882 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a3e:	f000 fa3d 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000a42:	2310      	movs	r3, #16
 8000a44:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3333;
 8000a46:	f640 5305 	movw	r3, #3333	@ 0xd05
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a50:	2204      	movs	r2, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 8000a56:	f004 fff7 	bl	8005a48 <HAL_TIM_OC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a60:	f000 fa2c 	bl	8000ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 8000a9a:	f005 ff3d 	bl	8006918 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000aa4:	f000 fa0a 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM1_Init+0x14c>)
 8000aaa:	f000 fb4f 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3758      	adds	r7, #88	@ 0x58
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	240001d4 	.word	0x240001d4
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	@ 0x40
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af4:	4b3a      	ldr	r3, [pc, #232]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000afc:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b08:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b0a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b32      	ldr	r3, [pc, #200]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1c:	4830      	ldr	r0, [pc, #192]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b1e:	f004 fc67 	bl	80053f0 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000b28:	f000 f9c8 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2c:	482c      	ldr	r0, [pc, #176]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b2e:	f004 fe25 	bl	800577c <HAL_TIM_PWM_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f9c0 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000b3c:	4828      	ldr	r0, [pc, #160]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b3e:	f004 fcae 	bl	800549e <HAL_TIM_OC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f9b8 	bl	8000ebc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4821      	ldr	r0, [pc, #132]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b5c:	f005 f902 	bl	8005d64 <HAL_TIM_SlaveConfigSynchro>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000b66:	f000 f9a9 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000b6a:	2350      	movs	r3, #80	@ 0x50
 8000b6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4619      	mov	r1, r3
 8000b78:	4819      	ldr	r0, [pc, #100]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000b7a:	f005 fe3f 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000b84:	f000 f99a 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	@ 0x60
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 8000b8c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000ba2:	f004 ffcb 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000bac:	f000 f986 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3333;
 8000bb4:	f640 5305 	movw	r3, #3333	@ 0xd05
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000bc2:	f004 ff41 	bl	8005a48 <HAL_TIM_OC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000bcc:	f000 f976 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_TIM2_Init+0x120>)
 8000bd2:	f000 fabb 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3740      	adds	r7, #64	@ 0x40
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000220 	.word	0x24000220

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	@ 0x40
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000cd4 <MX_TIM3_Init+0xf0>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c2c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c3e:	4824      	ldr	r0, [pc, #144]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c40:	f004 fbd6 	bl	80053f0 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 f937 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c4e:	4820      	ldr	r0, [pc, #128]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c50:	f004 fd94 	bl	800577c <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c5a:	f000 f92f 	bl	8000ebc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000c62:	2310      	movs	r3, #16
 8000c64:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c6e:	f005 f879 	bl	8005d64 <HAL_TIM_SlaveConfigSynchro>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000c78:	f000 f920 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000c8c:	f005 fdb6 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000c96:	f000 f911 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9a:	2360      	movs	r3, #96	@ 0x60
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 8000c9e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000ca2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000cb4:	f004 ff42 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000cbe:	f000 f8fd 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc2:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <MX_TIM3_Init+0xec>)
 8000cc4:	f000 fa42 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000cc8:	bf00      	nop
 8000cca:	3740      	adds	r7, #64	@ 0x40
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2400026c 	.word	0x2400026c
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <MX_USART3_UART_Init+0x94>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d22:	f005 fe77 	bl	8006a14 <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f000 f8c6 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d34:	f006 fe7f 	bl	8007a36 <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f000 f8bd 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d46:	f006 feb4 	bl	8007ab2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d50:	f000 f8b4 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d56:	f006 fe35 	bl	80079c4 <HAL_UARTEx_DisableFifoMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f000 f8ac 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240002b8 	.word	0x240002b8
 8000d6c:	40004800 	.word	0x40004800

08000d70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d76:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d7c:	2209      	movs	r2, #9
 8000d7e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db8:	f001 fb6e 	bl	8002498 <HAL_PCD_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dc2:	f000 f87b 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2400034c 	.word	0x2400034c
 8000dd0:	40080000 	.word	0x40080000

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b37      	ldr	r3, [pc, #220]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a35      	ldr	r2, [pc, #212]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b33      	ldr	r3, [pc, #204]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df8:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e08:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a08      	ldr	r2, [pc, #32]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_GPIO_Init+0xe4>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eac:	bf00      	nop
 8000eae:	3724      	adds	r7, #36	@ 0x24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	58024400 	.word	0x58024400

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed4:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_MspInit+0x30>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_MspInit+0x30>)
 8000ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	58024400 	.word	0x58024400

08000efc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	@ 0x38
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a59      	ldr	r2, [pc, #356]	@ (8001080 <HAL_ETH_MspInit+0x184>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	f040 80ab 	bne.w	8001076 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f20:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f26:	4a57      	ldr	r2, [pc, #348]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f30:	4b54      	ldr	r3, [pc, #336]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f3a:	623b      	str	r3, [r7, #32]
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f3e:	4b51      	ldr	r3, [pc, #324]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f44:	4a4f      	ldr	r2, [pc, #316]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f5c:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f62:	4a48      	ldr	r2, [pc, #288]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f6c:	4b45      	ldr	r3, [pc, #276]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a40      	ldr	r2, [pc, #256]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b3a      	ldr	r3, [pc, #232]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	4a39      	ldr	r2, [pc, #228]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa8:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	4a31      	ldr	r2, [pc, #196]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	4a2a      	ldr	r2, [pc, #168]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ff2:	2332      	movs	r3, #50	@ 0x32
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001002:	230b      	movs	r3, #11
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	481e      	ldr	r0, [pc, #120]	@ (8001088 <HAL_ETH_MspInit+0x18c>)
 800100e:	f001 f865 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001012:	2386      	movs	r3, #134	@ 0x86
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001022:	230b      	movs	r3, #11
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_ETH_MspInit+0x190>)
 800102e:	f001 f855 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001032:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001044:	230b      	movs	r3, #11
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4810      	ldr	r0, [pc, #64]	@ (8001090 <HAL_ETH_MspInit+0x194>)
 8001050:	f001 f844 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001054:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <HAL_ETH_MspInit+0x198>)
 8001072:	f001 f833 	bl	80020dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3738      	adds	r7, #56	@ 0x38
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40028000 	.word	0x40028000
 8001084:	58024400 	.word	0x58024400
 8001088:	58020800 	.word	0x58020800
 800108c:	58020000 	.word	0x58020000
 8001090:	58020400 	.word	0x58020400
 8001094:	58021800 	.word	0x58021800

08001098 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10e      	bne.n	80010c8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_TIM_PWM_MspInit+0x40>)
 80010ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b0:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <HAL_TIM_PWM_MspInit+0x40>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <HAL_TIM_PWM_MspInit+0x40>)
 80010bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40010000 	.word	0x40010000
 80010d8:	58024400 	.word	0x58024400

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ec:	d10f      	bne.n	800110e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_TIM_Base_MspInit+0x68>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010f4:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <HAL_TIM_Base_MspInit+0x68>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_TIM_Base_MspInit+0x68>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800110c:	e013      	b.n	8001136 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <HAL_TIM_Base_MspInit+0x6c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d10e      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_TIM_Base_MspInit+0x68>)
 800111a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <HAL_TIM_Base_MspInit+0x68>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_TIM_Base_MspInit+0x68>)
 800112a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	58024400 	.word	0x58024400
 8001148:	40000400 	.word	0x40000400

0800114c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a38      	ldr	r2, [pc, #224]	@ (800124c <HAL_TIM_MspPostInit+0x100>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d120      	bne.n	80011b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	4b38      	ldr	r3, [pc, #224]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a36      	ldr	r2, [pc, #216]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800119e:	2301      	movs	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	482a      	ldr	r0, [pc, #168]	@ (8001254 <HAL_TIM_MspPostInit+0x108>)
 80011aa:	f000 ff97 	bl	80020dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011ae:	e048      	b.n	8001242 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b8:	d11f      	bne.n	80011fa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011e8:	2301      	movs	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4819      	ldr	r0, [pc, #100]	@ (8001258 <HAL_TIM_MspPostInit+0x10c>)
 80011f4:	f000 ff72 	bl	80020dc <HAL_GPIO_Init>
}
 80011f8:	e023      	b.n	8001242 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a17      	ldr	r2, [pc, #92]	@ (800125c <HAL_TIM_MspPostInit+0x110>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d11e      	bne.n	8001242 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_TIM_MspPostInit+0x104>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001222:	2340      	movs	r3, #64	@ 0x40
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4806      	ldr	r0, [pc, #24]	@ (8001258 <HAL_TIM_MspPostInit+0x10c>)
 800123e:	f000 ff4d 	bl	80020dc <HAL_GPIO_Init>
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000
 8001250:	58024400 	.word	0x58024400
 8001254:	58021000 	.word	0x58021000
 8001258:	58020000 	.word	0x58020000
 800125c:	40000400 	.word	0x40000400

08001260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ba      	sub	sp, #232	@ 0xe8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	22c0      	movs	r2, #192	@ 0xc0
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f006 ffaa 	bl	80081da <memset>
  if(huart->Instance==USART3)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a27      	ldr	r2, [pc, #156]	@ (8001328 <HAL_UART_MspInit+0xc8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d146      	bne.n	800131e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001290:	f04f 0202 	mov.w	r2, #2
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fa76 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012b2:	f7ff fe03 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <HAL_UART_MspInit+0xcc>)
 80012b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_UART_MspInit+0xcc>)
 80012be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_UART_MspInit+0xcc>)
 80012c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_UART_MspInit+0xcc>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a14      	ldr	r2, [pc, #80]	@ (800132c <HAL_UART_MspInit+0xcc>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_UART_MspInit+0xcc>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800130c:	2307      	movs	r3, #7
 800130e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <HAL_UART_MspInit+0xd0>)
 800131a:	f000 fedf 	bl	80020dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37e8      	adds	r7, #232	@ 0xe8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004800 	.word	0x40004800
 800132c:	58024400 	.word	0x58024400
 8001330:	58020c00 	.word	0x58020c00

08001334 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ba      	sub	sp, #232	@ 0xe8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	22c0      	movs	r2, #192	@ 0xc0
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f006 ff40 	bl	80081da <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a38      	ldr	r2, [pc, #224]	@ (8001440 <HAL_PCD_MspInit+0x10c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d169      	bne.n	8001438 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001364:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001374:	2312      	movs	r3, #18
 8001376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800137c:	2303      	movs	r3, #3
 800137e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001384:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001388:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800138a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800138e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001390:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4618      	mov	r0, r3
 800139e:	f002 f9fb 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80013a8:	f7ff fd88 	bl	8000ebc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013ac:	f001 f9fe 	bl	80027ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_PCD_MspInit+0x110>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <HAL_PCD_MspInit+0x110>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <HAL_PCD_MspInit+0x110>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013ce:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013e8:	230a      	movs	r3, #10
 80013ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4814      	ldr	r0, [pc, #80]	@ (8001448 <HAL_PCD_MspInit+0x114>)
 80013f6:	f000 fe71 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	@ (8001448 <HAL_PCD_MspInit+0x114>)
 8001416:	f000 fe61 	bl	80020dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_PCD_MspInit+0x110>)
 800141c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001420:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <HAL_PCD_MspInit+0x110>)
 8001422:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001426:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_PCD_MspInit+0x110>)
 800142c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	37e8      	adds	r7, #232	@ 0xe8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40080000 	.word	0x40080000
 8001444:	58024400 	.word	0x58024400
 8001448:	58020000 	.word	0x58020000

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <NMI_Handler+0x4>

08001454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <MemManage_Handler+0x4>

08001464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <UsageFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 f89f 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b0:	f7ff f88a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	@ (80014ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	@ (80014f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f006 fe87 	bl	80081ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7ff f909 	bl	80006f4 <main>
  bx  lr
 80014e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014ec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014f0:	08008294 	.word	0x08008294
  ldr r2, =_sbss
 80014f4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80014f8:	2400083c 	.word	0x2400083c

080014fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC3_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f982 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800150c:	f001 ff6e 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_Init+0x68>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	4913      	ldr	r1, [pc, #76]	@ (800156c <HAL_Init+0x6c>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <HAL_Init+0x68>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_Init+0x6c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_Init+0x70>)
 8001542:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_Init+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f814 	bl	8001578 <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e002      	b.n	8001560 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800155a:	f7ff fcb5 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024400 	.word	0x58024400
 800156c:	0800824c 	.word	0x0800824c
 8001570:	24000004 	.word	0x24000004
 8001574:	24000000 	.word	0x24000000

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_InitTick+0x60>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e021      	b.n	80015d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <HAL_InitTick+0x64>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_InitTick+0x60>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f959 	bl	800185a <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f931 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_InitTick+0x68>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2400000c 	.word	0x2400000c
 80015dc:	24000000 	.word	0x24000000
 80015e0:	24000008 	.word	0x24000008

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2400000c 	.word	0x2400000c
 8001608:	24000838 	.word	0x24000838

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	24000838 	.word	0x24000838

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff ffee 	bl	800160c <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffde 	bl	800160c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2400000c 	.word	0x2400000c

0800166c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_GetREVID+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0c1b      	lsrs	r3, r3, #16
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	5c001000 	.word	0x5c001000

08001684 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001694:	4904      	ldr	r1, [pc, #16]	@ (80016a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	58000400 	.word	0x58000400

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	05fa0000 	.word	0x05fa0000

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	@ (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	@ (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	@ 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff47 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff5e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffb2 	bl	80017cc <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0e3      	b.n	8001a4e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2223      	movs	r2, #35	@ 0x23
 8001894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fb2f 	bl	8000efc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <HAL_ETH_Init+0x1e4>)
 80018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001a58 <HAL_ETH_Init+0x1e4>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_ETH_Init+0x1e4>)
 80018b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7a1b      	ldrb	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d103      	bne.n	80018cc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fedd 	bl	8001684 <HAL_SYSCFG_ETHInterfaceSelect>
 80018ca:	e003      	b.n	80018d4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018cc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80018d0:	f7ff fed8 	bl	8001684 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80018d4:	4b61      	ldr	r3, [pc, #388]	@ (8001a5c <HAL_ETH_Init+0x1e8>)
 80018d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f0:	f7ff fe8c 	bl	800160c <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018f6:	e011      	b.n	800191c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018f8:	f7ff fe88 	bl	800160c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001906:	d909      	bls.n	800191c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2204      	movs	r2, #4
 800190c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	22e0      	movs	r2, #224	@ 0xe0
 8001914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e098      	b.n	8001a4e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1e4      	bne.n	80018f8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f89e 	bl	8001a70 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001934:	f001 fed4 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8001938:	4603      	mov	r3, r0
 800193a:	4a49      	ldr	r2, [pc, #292]	@ (8001a60 <HAL_ETH_Init+0x1ec>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0c9a      	lsrs	r2, r3, #18
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3a01      	subs	r2, #1
 8001948:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa81 	bl	8001e54 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800195e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800196a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800196e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	22e0      	movs	r2, #224	@ 0xe0
 800198a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e05d      	b.n	8001a4e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_ETH_Init+0x1f0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6952      	ldr	r2, [r2, #20]
 80019a6:	0051      	lsls	r1, r2, #1
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019b2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fae9 	bl	8001f8e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fb2f 	bl	8002020 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	3305      	adds	r3, #5
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021a      	lsls	r2, r3, #8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3303      	adds	r3, #3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	061a      	lsls	r2, r3, #24
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3302      	adds	r3, #2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a0e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a10:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_ETH_Init+0x1f4>)
 8001a22:	430b      	orrs	r3, r1
 8001a24:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_ETH_Init+0x1f8>)
 8001a36:	430b      	orrs	r3, r1
 8001a38:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2210      	movs	r2, #16
 8001a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58000400 	.word	0x58000400
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	ffff8001 	.word	0xffff8001
 8001a68:	0c020060 	.word	0x0c020060
 8001a6c:	0c20c000 	.word	0x0c20c000

08001a70 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a8a:	f001 fe29 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8001a8e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d804      	bhi.n	8001aa2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e022      	b.n	8001ae8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d204      	bcs.n	8001ab4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e019      	b.n	8001ae8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d915      	bls.n	8001ae8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d804      	bhi.n	8001ace <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e00c      	b.n	8001ae8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d804      	bhi.n	8001ae0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e003      	b.n	8001ae8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	02160ebf 	.word	0x02160ebf
 8001b00:	03938700 	.word	0x03938700
 8001b04:	05f5e0ff 	.word	0x05f5e0ff
 8001b08:	08f0d17f 	.word	0x08f0d17f
 8001b0c:	0ee6b27f 	.word	0x0ee6b27f

08001b10 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001b22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001b2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	7b1b      	ldrb	r3, [r3, #12]
 8001b30:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	7b5b      	ldrb	r3, [r3, #13]
 8001b38:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	7b9b      	ldrb	r3, [r3, #14]
 8001b40:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	7bdb      	ldrb	r3, [r3, #15]
 8001b48:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b4a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	7c12      	ldrb	r2, [r2, #16]
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d102      	bne.n	8001b5a <ETH_SetMACConfig+0x4a>
 8001b54:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b58:	e000      	b.n	8001b5c <ETH_SetMACConfig+0x4c>
 8001b5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b5c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	7c52      	ldrb	r2, [r2, #17]
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d102      	bne.n	8001b6c <ETH_SetMACConfig+0x5c>
 8001b66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b6a:	e000      	b.n	8001b6e <ETH_SetMACConfig+0x5e>
 8001b6c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	7c9b      	ldrb	r3, [r3, #18]
 8001b74:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b76:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b7c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	7f1b      	ldrb	r3, [r3, #28]
 8001b88:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7f5b      	ldrb	r3, [r3, #29]
 8001b90:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	7f92      	ldrb	r2, [r2, #30]
 8001b98:	2a00      	cmp	r2, #0
 8001b9a:	d102      	bne.n	8001ba2 <ETH_SetMACConfig+0x92>
 8001b9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ba0:	e000      	b.n	8001ba4 <ETH_SetMACConfig+0x94>
 8001ba2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ba4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	7fdb      	ldrb	r3, [r3, #31]
 8001baa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d102      	bne.n	8001bbe <ETH_SetMACConfig+0xae>
 8001bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bbc:	e000      	b.n	8001bc0 <ETH_SetMACConfig+0xb0>
 8001bbe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001bc0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001bd0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b56      	ldr	r3, [pc, #344]	@ (8001d3c <ETH_SetMACConfig+0x22c>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	68f9      	ldr	r1, [r7, #12]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bfa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bfc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c04:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001c0e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d102      	bne.n	8001c22 <ETH_SetMACConfig+0x112>
 8001c1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c20:	e000      	b.n	8001c24 <ETH_SetMACConfig+0x114>
 8001c22:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c24:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4b42      	ldr	r3, [pc, #264]	@ (8001d40 <ETH_SetMACConfig+0x230>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c48:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <ETH_SetMACConfig+0x234>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c6c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d101      	bne.n	8001c82 <ETH_SetMACConfig+0x172>
 8001c7e:	2280      	movs	r2, #128	@ 0x80
 8001c80:	e000      	b.n	8001c84 <ETH_SetMACConfig+0x174>
 8001c82:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c84:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c96:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001cac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001cb4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	f023 0103 	bic.w	r1, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001cda:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d101      	bne.n	8001cfe <ETH_SetMACConfig+0x1ee>
 8001cfa:	2240      	movs	r2, #64	@ 0x40
 8001cfc:	e000      	b.n	8001d00 <ETH_SetMACConfig+0x1f0>
 8001cfe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001d08:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001d12:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001d20:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	00048083 	.word	0x00048083
 8001d40:	c0f88000 	.word	0xc0f88000
 8001d44:	fffffef0 	.word	0xfffffef0

08001d48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <ETH_SetDMAConfig+0xf8>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	6811      	ldr	r1, [r2, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d6e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d7a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
 8001d80:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <ETH_SetDMAConfig+0xfc>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001da0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7b5b      	ldrb	r3, [r3, #13]
 8001da6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001dbc:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <ETH_SetDMAConfig+0x100>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dcc:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7d1b      	ldrb	r3, [r3, #20]
 8001dd8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dda:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	7f5b      	ldrb	r3, [r3, #29]
 8001de0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <ETH_SetDMAConfig+0x104>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e02:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	7f1b      	ldrb	r3, [r3, #28]
 8001e0a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <ETH_SetDMAConfig+0x108>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e30:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	ffff87fd 	.word	0xffff87fd
 8001e44:	ffff2ffe 	.word	0xffff2ffe
 8001e48:	fffec000 	.word	0xfffec000
 8001e4c:	ffc0efef 	.word	0xffc0efef
 8001e50:	7fc0ffff 	.word	0x7fc0ffff

08001e54 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0a4      	sub	sp, #144	@ 0x90
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e62:	2300      	movs	r3, #0
 8001e64:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e94:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001eac:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001eb0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001eec:	2320      	movs	r3, #32
 8001eee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001efe:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f08:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fde6 	bl	8001b10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f5e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f74:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fee1 	bl	8001d48 <ETH_SetDMAConfig>
}
 8001f86:	bf00      	nop
 8001f88:	3790      	adds	r7, #144	@ 0x90
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e01d      	b.n	8001fd8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68d9      	ldr	r1, [r3, #12]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	3206      	adds	r2, #6
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d9de      	bls.n	8001f9c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fec:	461a      	mov	r2, r3
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002000:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002010:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e023      	b.n	8002076 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	3212      	adds	r2, #18
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d9d8      	bls.n	800202e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a2:	461a      	mov	r2, r3
 80020a4:	2303      	movs	r3, #3
 80020a6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ca:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ea:	4b89      	ldr	r3, [pc, #548]	@ (8002310 <HAL_GPIO_Init+0x234>)
 80020ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ee:	e194      	b.n	800241a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8186 	beq.w	8002414 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d005      	beq.n	8002120 <HAL_GPIO_Init+0x44>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d130      	bne.n	8002182 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002156:	2201      	movs	r2, #1
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 0201 	and.w	r2, r3, #1
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d017      	beq.n	80021be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d123      	bne.n	8002212 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0203 	and.w	r2, r3, #3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80e0 	beq.w	8002414 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002254:	4b2f      	ldr	r3, [pc, #188]	@ (8002314 <HAL_GPIO_Init+0x238>)
 8002256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800225a:	4a2e      	ldr	r2, [pc, #184]	@ (8002314 <HAL_GPIO_Init+0x238>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <HAL_GPIO_Init+0x238>)
 8002266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <HAL_GPIO_Init+0x23c>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a20      	ldr	r2, [pc, #128]	@ (800231c <HAL_GPIO_Init+0x240>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d052      	beq.n	8002344 <HAL_GPIO_Init+0x268>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_GPIO_Init+0x244>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_GPIO_Init+0x22e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <HAL_GPIO_Init+0x248>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x22a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_GPIO_Init+0x24c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x226>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1c      	ldr	r2, [pc, #112]	@ (800232c <HAL_GPIO_Init+0x250>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x222>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002330 <HAL_GPIO_Init+0x254>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x21e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002334 <HAL_GPIO_Init+0x258>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x21a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_GPIO_Init+0x25c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x216>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a18      	ldr	r2, [pc, #96]	@ (800233c <HAL_GPIO_Init+0x260>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x212>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <HAL_GPIO_Init+0x264>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x20e>
 80022e6:	2309      	movs	r3, #9
 80022e8:	e02d      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 80022ea:	230a      	movs	r3, #10
 80022ec:	e02b      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 80022ee:	2308      	movs	r3, #8
 80022f0:	e029      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e027      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e025      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e023      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 80022fe:	2304      	movs	r3, #4
 8002300:	e021      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 8002302:	2303      	movs	r3, #3
 8002304:	e01f      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 8002306:	2302      	movs	r3, #2
 8002308:	e01d      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 800230a:	2301      	movs	r3, #1
 800230c:	e01b      	b.n	8002346 <HAL_GPIO_Init+0x26a>
 800230e:	bf00      	nop
 8002310:	58000080 	.word	0x58000080
 8002314:	58024400 	.word	0x58024400
 8002318:	58000400 	.word	0x58000400
 800231c:	58020000 	.word	0x58020000
 8002320:	58020400 	.word	0x58020400
 8002324:	58020800 	.word	0x58020800
 8002328:	58020c00 	.word	0x58020c00
 800232c:	58021000 	.word	0x58021000
 8002330:	58021400 	.word	0x58021400
 8002334:	58021800 	.word	0x58021800
 8002338:	58021c00 	.word	0x58021c00
 800233c:	58022000 	.word	0x58022000
 8002340:	58022400 	.word	0x58022400
 8002344:	2300      	movs	r3, #0
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002356:	4938      	ldr	r1, [pc, #224]	@ (8002438 <HAL_GPIO_Init+0x35c>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800238a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	f47f ae63 	bne.w	80020f0 <HAL_GPIO_Init+0x14>
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3724      	adds	r7, #36	@ 0x24
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	58000400 	.word	0x58000400

0800243c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002444:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_HSEM_FastTake+0x2c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3320      	adds	r3, #32
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <HAL_HSEM_FastTake+0x30>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	58026400 	.word	0x58026400
 800246c:	80000300 	.word	0x80000300

08002470 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800247a:	4906      	ldr	r1, [pc, #24]	@ (8002494 <HAL_HSEM_Release+0x24>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	58026400 	.word	0x58026400

08002498 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af02      	add	r7, sp, #8
 800249e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0fe      	b.n	80026a8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe ff38 	bl	8001334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 fbed 	bl	8007cb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7c1a      	ldrb	r2, [r3, #16]
 80024de:	f88d 2000 	strb.w	r2, [sp]
 80024e2:	3304      	adds	r3, #4
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	f005 fb71 	bl	8007bcc <USB_CoreInit>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d5      	b.n	80026a8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f005 fbe5 	bl	8007cd2 <USB_SetCurrentMode>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0c6      	b.n	80026a8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e04a      	b.n	80025b6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3315      	adds	r3, #21
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3314      	adds	r3, #20
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	b298      	uxth	r0, r3
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	332e      	adds	r3, #46	@ 0x2e
 800255c:	4602      	mov	r2, r0
 800255e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3318      	adds	r3, #24
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	331c      	adds	r3, #28
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3320      	adds	r3, #32
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3324      	adds	r3, #36	@ 0x24
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3af      	bcc.n	8002520 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e044      	b.n	8002650 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3301      	adds	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	791b      	ldrb	r3, [r3, #4]
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3b5      	bcc.n	80025c6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7c1a      	ldrb	r2, [r3, #16]
 8002662:	f88d 2000 	strb.w	r2, [sp]
 8002666:	3304      	adds	r3, #4
 8002668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266a:	f005 fb7f 	bl	8007d6c <USB_DevInit>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e013      	b.n	80026a8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7b1b      	ldrb	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f80a 	bl	80026b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 fd3a 	bl	800811a <USB_DevDisconnect>

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	10000003 	.word	0x10000003

080026f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002700:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	2b06      	cmp	r3, #6
 800270a:	d00a      	beq.n	8002722 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800270c:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e040      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e03e      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800272a:	491f      	ldr	r1, [pc, #124]	@ (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4313      	orrs	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002732:	f7fe ff6b 	bl	800160c <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002738:	e009      	b.n	800274e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800273a:	f7fe ff67 	bl	800160c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002748:	d901      	bls.n	800274e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e028      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275a:	d1ee      	bne.n	800273a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b1e      	cmp	r3, #30
 8002760:	d008      	beq.n	8002774 <HAL_PWREx_ConfigSupply+0x7c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b2e      	cmp	r3, #46	@ 0x2e
 8002766:	d005      	beq.n	8002774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b1d      	cmp	r3, #29
 800276c:	d002      	beq.n	8002774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b2d      	cmp	r3, #45	@ 0x2d
 8002772:	d114      	bne.n	800279e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002774:	f7fe ff4a 	bl	800160c <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800277a:	e009      	b.n	8002790 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800277c:	f7fe ff46 	bl	800160c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800278a:	d901      	bls.n	8002790 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279c:	d1ee      	bne.n	800277c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	58024800 	.word	0x58024800

080027ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	58024800 	.word	0x58024800

080027cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	@ 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f000 bc48 	b.w	8003070 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8088 	beq.w	80028fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ee:	4b99      	ldr	r3, [pc, #612]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f8:	4b96      	ldr	r3, [pc, #600]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	2b10      	cmp	r3, #16
 8002802:	d007      	beq.n	8002814 <HAL_RCC_OscConfig+0x48>
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002806:	2b18      	cmp	r3, #24
 8002808:	d111      	bne.n	800282e <HAL_RCC_OscConfig+0x62>
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	4b8f      	ldr	r3, [pc, #572]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d06d      	beq.n	80028fc <HAL_RCC_OscConfig+0x130>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d169      	bne.n	80028fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f000 bc21 	b.w	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x7a>
 8002838:	4b86      	ldr	r3, [pc, #536]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a85      	ldr	r2, [pc, #532]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e02e      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x9c>
 800284e:	4b81      	ldr	r3, [pc, #516]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a80      	ldr	r2, [pc, #512]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xc0>
 8002872:	4b78      	ldr	r3, [pc, #480]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a77      	ldr	r2, [pc, #476]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b75      	ldr	r3, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a74      	ldr	r2, [pc, #464]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 800288c:	4b71      	ldr	r3, [pc, #452]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a70      	ldr	r2, [pc, #448]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6e      	ldr	r3, [pc, #440]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6d      	ldr	r2, [pc, #436]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe feae 	bl	800160c <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe feaa 	bl	800160c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e3d4      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c6:	4b63      	ldr	r3, [pc, #396]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe8>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fe9a 	bl	800160c <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fe96 	bl	800160c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e3c0      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ee:	4b59      	ldr	r3, [pc, #356]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x110>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80ca 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290c:	4b51      	ldr	r3, [pc, #324]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002914:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002916:	4b4f      	ldr	r3, [pc, #316]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_RCC_OscConfig+0x166>
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b18      	cmp	r3, #24
 8002926:	d156      	bne.n	80029d6 <HAL_RCC_OscConfig+0x20a>
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d151      	bne.n	80029d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002932:	4b48      	ldr	r3, [pc, #288]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x17e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e392      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800294a:	4b42      	ldr	r3, [pc, #264]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0219 	bic.w	r2, r3, #25
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	493f      	ldr	r1, [pc, #252]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fe56 	bl	800160c <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fe52 	bl	800160c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e37c      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002976:	4b37      	ldr	r3, [pc, #220]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	f7fe fe73 	bl	800166c <HAL_GetREVID>
 8002986:	4603      	mov	r3, r0
 8002988:	f241 0203 	movw	r2, #4099	@ 0x1003
 800298c:	4293      	cmp	r3, r2
 800298e:	d817      	bhi.n	80029c0 <HAL_RCC_OscConfig+0x1f4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d108      	bne.n	80029aa <HAL_RCC_OscConfig+0x1de>
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a8:	e07a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	031b      	lsls	r3, r3, #12
 80029b8:	4926      	ldr	r1, [pc, #152]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029be:	e06f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b24      	ldr	r3, [pc, #144]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	4921      	ldr	r1, [pc, #132]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d4:	e064      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d047      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029de:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0219 	bic.w	r2, r3, #25
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	491a      	ldr	r1, [pc, #104]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fe0c 	bl	800160c <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fe fe08 	bl	800160c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e332      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a0a:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	f7fe fe29 	bl	800166c <HAL_GetREVID>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d819      	bhi.n	8002a58 <HAL_RCC_OscConfig+0x28c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b40      	cmp	r3, #64	@ 0x40
 8002a2a:	d108      	bne.n	8002a3e <HAL_RCC_OscConfig+0x272>
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a34:	4a07      	ldr	r2, [pc, #28]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3a:	6053      	str	r3, [r2, #4]
 8002a3c:	e030      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
 8002a3e:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	031b      	lsls	r3, r3, #12
 8002a4c:	4901      	ldr	r1, [pc, #4]	@ (8002a54 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e025      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
 8002a54:	58024400 	.word	0x58024400
 8002a58:	4b9a      	ldr	r3, [pc, #616]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	4997      	ldr	r1, [pc, #604]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	e018      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b95      	ldr	r3, [pc, #596]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a94      	ldr	r2, [pc, #592]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fdc7 	bl	800160c <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe fdc3 	bl	800160c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e2ed      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a94:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a9 	beq.w	8002c00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b85      	ldr	r3, [pc, #532]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ab6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ab8:	4b82      	ldr	r3, [pc, #520]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d007      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x308>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b18      	cmp	r3, #24
 8002ac8:	d13a      	bne.n	8002b40 <HAL_RCC_OscConfig+0x374>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d135      	bne.n	8002b40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_OscConfig+0x320>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b80      	cmp	r3, #128	@ 0x80
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e2c1      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aec:	f7fe fdbe 	bl	800166c <HAL_GetREVID>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d817      	bhi.n	8002b2a <HAL_RCC_OscConfig+0x35e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d108      	bne.n	8002b14 <HAL_RCC_OscConfig+0x348>
 8002b02:	4b70      	ldr	r3, [pc, #448]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b12:	e075      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b14:	4b6b      	ldr	r3, [pc, #428]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	069b      	lsls	r3, r3, #26
 8002b22:	4968      	ldr	r1, [pc, #416]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b28:	e06a      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b2a:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	4962      	ldr	r1, [pc, #392]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b3e:	e05f      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d042      	beq.n	8002bce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b48:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fd5a 	bl	800160c <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fd56 	bl	800160c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e280      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6e:	4b55      	ldr	r3, [pc, #340]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7a:	f7fe fd77 	bl	800166c <HAL_GetREVID>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d817      	bhi.n	8002bb8 <HAL_RCC_OscConfig+0x3ec>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d108      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3d6>
 8002b90:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b98:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b9e:	6053      	str	r3, [r2, #4]
 8002ba0:	e02e      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
 8002ba2:	4b48      	ldr	r3, [pc, #288]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	4944      	ldr	r1, [pc, #272]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	e023      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
 8002bb8:	4b42      	ldr	r3, [pc, #264]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	493f      	ldr	r1, [pc, #252]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
 8002bcc:	e018      	b.n	8002c00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bce:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fd17 	bl	800160c <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002be2:	f7fe fd13 	bl	800160c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e23d      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bf4:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d036      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d019      	beq.n	8002c48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c18:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fcf4 	bl	800160c <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fcf0 	bl	800160c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e21a      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3a:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x45c>
 8002c46:	e018      	b.n	8002c7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fcda 	bl	800160c <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fcd6 	bl	800160c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e200      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d039      	beq.n	8002cfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fcb7 	bl	800160c <HAL_GetTick>
 8002c9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca2:	f7fe fcb3 	bl	800160c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1dd      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cb4:	4b03      	ldr	r3, [pc, #12]	@ (8002cc4 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4d6>
 8002cc0:	e01b      	b.n	8002cfa <HAL_RCC_OscConfig+0x52e>
 8002cc2:	bf00      	nop
 8002cc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cc8:	4b9b      	ldr	r3, [pc, #620]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a9a      	ldr	r2, [pc, #616]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fc9a 	bl	800160c <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cdc:	f7fe fc96 	bl	800160c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1c0      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cee:	4b92      	ldr	r3, [pc, #584]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8081 	beq.w	8002e0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d08:	4b8c      	ldr	r3, [pc, #560]	@ (8002f3c <HAL_RCC_OscConfig+0x770>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a8b      	ldr	r2, [pc, #556]	@ (8002f3c <HAL_RCC_OscConfig+0x770>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fc7a 	bl	800160c <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fe fc76 	bl	800160c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	@ 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1a0      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2e:	4b83      	ldr	r3, [pc, #524]	@ (8002f3c <HAL_RCC_OscConfig+0x770>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x584>
 8002d42:	4b7d      	ldr	r3, [pc, #500]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a7c      	ldr	r2, [pc, #496]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	e02d      	b.n	8002dac <HAL_RCC_OscConfig+0x5e0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5a6>
 8002d58:	4b77      	ldr	r3, [pc, #476]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	4a76      	ldr	r2, [pc, #472]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d64:	4b74      	ldr	r3, [pc, #464]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d68:	4a73      	ldr	r2, [pc, #460]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	f023 0304 	bic.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d70:	e01c      	b.n	8002dac <HAL_RCC_OscConfig+0x5e0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c8>
 8002d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d86:	4b6c      	ldr	r3, [pc, #432]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	4a6b      	ldr	r2, [pc, #428]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0x5e0>
 8002d94:	4b68      	ldr	r3, [pc, #416]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d98:	4a67      	ldr	r2, [pc, #412]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da0:	4b65      	ldr	r3, [pc, #404]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a64      	ldr	r2, [pc, #400]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	f023 0304 	bic.w	r3, r3, #4
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe fc2a 	bl	800160c <HAL_GetTick>
 8002db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fc26 	bl	800160c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e14e      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd2:	4b59      	ldr	r3, [pc, #356]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ee      	beq.n	8002dbc <HAL_RCC_OscConfig+0x5f0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fc14 	bl	800160c <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe fc10 	bl	800160c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e138      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ee      	bne.n	8002de8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 812d 	beq.w	800306e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e14:	4b48      	ldr	r3, [pc, #288]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1c:	2b18      	cmp	r3, #24
 8002e1e:	f000 80bd 	beq.w	8002f9c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	f040 809e 	bne.w	8002f68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b42      	ldr	r3, [pc, #264]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fbe8 	bl	800160c <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fbe4 	bl	800160c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e10e      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	4b39      	ldr	r3, [pc, #228]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5e:	4b36      	ldr	r3, [pc, #216]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e62:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCC_OscConfig+0x774>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4931      	ldr	r1, [pc, #196]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e86:	3b01      	subs	r3, #1
 8002e88:	025b      	lsls	r3, r3, #9
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e92:	3b01      	subs	r3, #1
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	061b      	lsls	r3, r3, #24
 8002ea4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ea8:	4923      	ldr	r1, [pc, #140]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ebe:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <HAL_RCC_OscConfig+0x778>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ec6:	00d2      	lsls	r2, r2, #3
 8002ec8:	491b      	ldr	r1, [pc, #108]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	f023 020c 	bic.w	r2, r3, #12
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	4917      	ldr	r1, [pc, #92]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	f023 0202 	bic.w	r2, r3, #2
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	4912      	ldr	r1, [pc, #72]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	4a10      	ldr	r2, [pc, #64]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002efe:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	4a0d      	ldr	r2, [pc, #52]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <HAL_RCC_OscConfig+0x76c>)
 8002f28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fb6d 	bl	800160c <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f34:	e011      	b.n	8002f5a <HAL_RCC_OscConfig+0x78e>
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58024800 	.word	0x58024800
 8002f40:	fffffc0c 	.word	0xfffffc0c
 8002f44:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fb60 	bl	800160c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e08a      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x77c>
 8002f66:	e082      	b.n	800306e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a42      	ldr	r2, [pc, #264]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fb4a 	bl	800160c <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fb46 	bl	800160c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e070      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x7b0>
 8002f9a:	e068      	b.n	800306e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f9c:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fa2:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d031      	beq.n	8003014 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d12a      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d122      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	0a5b      	lsrs	r3, r3, #9
 8002fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d111      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d108      	bne.n	8003014 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0e1b      	lsrs	r3, r3, #24
 8003006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02b      	b.n	8003070 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003018:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003022:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d01f      	beq.n	800306e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800303a:	f7fe fae7 	bl	800160c <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003040:	bf00      	nop
 8003042:	f7fe fae3 	bl	800160c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	4293      	cmp	r3, r2
 800304c:	d0f9      	beq.n	8003042 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_RCC_OscConfig+0x8b0>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800305a:	00d2      	lsls	r2, r2, #3
 800305c:	4906      	ldr	r1, [pc, #24]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 800305e:	4313      	orrs	r3, r2
 8003060:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <HAL_RCC_OscConfig+0x8ac>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3730      	adds	r7, #48	@ 0x30
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	58024400 	.word	0x58024400
 800307c:	ffff0007 	.word	0xffff0007

08003080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e19c      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b8a      	ldr	r3, [pc, #552]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b87      	ldr	r3, [pc, #540]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4985      	ldr	r1, [pc, #532]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b83      	ldr	r3, [pc, #524]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e184      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b7b      	ldr	r3, [pc, #492]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030dc:	429a      	cmp	r2, r3
 80030de:	d908      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e0:	4b78      	ldr	r3, [pc, #480]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	4975      	ldr	r1, [pc, #468]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	4b70      	ldr	r3, [pc, #448]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800310a:	429a      	cmp	r2, r3
 800310c:	d908      	bls.n	8003120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800310e:	4b6d      	ldr	r3, [pc, #436]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	496a      	ldr	r1, [pc, #424]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	4b64      	ldr	r3, [pc, #400]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800313c:	4b61      	ldr	r3, [pc, #388]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	495e      	ldr	r1, [pc, #376]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003166:	429a      	cmp	r2, r3
 8003168:	d908      	bls.n	800317c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800316a:	4b56      	ldr	r3, [pc, #344]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4953      	ldr	r1, [pc, #332]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b4d      	ldr	r3, [pc, #308]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f023 020f 	bic.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4947      	ldr	r1, [pc, #284]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d055      	beq.n	8003262 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031b6:	4b43      	ldr	r3, [pc, #268]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4940      	ldr	r1, [pc, #256]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d0:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0f6      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e8:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0ea      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003200:	4b30      	ldr	r3, [pc, #192]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0de      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003210:	4b2c      	ldr	r3, [pc, #176]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0d6      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003220:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4925      	ldr	r1, [pc, #148]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800322e:	4313      	orrs	r3, r2
 8003230:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003232:	f7fe f9eb 	bl	800160c <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003238:	e00a      	b.n	8003250 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fe f9e7 	bl	800160c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0be      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003250:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	429a      	cmp	r2, r3
 8003260:	d1eb      	bne.n	800323a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	429a      	cmp	r2, r3
 800327c:	d208      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327e:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	490e      	ldr	r1, [pc, #56]	@ (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800328c:	4313      	orrs	r3, r2
 800328e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d214      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	4906      	ldr	r1, [pc, #24]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e086      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
 80032c0:	52002000 	.word	0x52002000
 80032c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	4b3f      	ldr	r3, [pc, #252]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032e4:	4b3c      	ldr	r3, [pc, #240]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	4939      	ldr	r1, [pc, #228]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b34      	ldr	r3, [pc, #208]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800330e:	429a      	cmp	r2, r3
 8003310:	d208      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003312:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	492e      	ldr	r1, [pc, #184]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003320:	4313      	orrs	r3, r2
 8003322:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800333c:	429a      	cmp	r2, r3
 800333e:	d208      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003340:	4b25      	ldr	r3, [pc, #148]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4922      	ldr	r1, [pc, #136]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 800334e:	4313      	orrs	r3, r2
 8003350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800336a:	429a      	cmp	r2, r3
 800336c:	d208      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4917      	ldr	r1, [pc, #92]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 800337c:	4313      	orrs	r3, r2
 800337e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003380:	f000 f834 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b14      	ldr	r3, [pc, #80]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4912      	ldr	r1, [pc, #72]	@ (80033dc <HAL_RCC_ClockConfig+0x35c>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800339e:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <HAL_RCC_ClockConfig+0x35c>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <HAL_RCC_ClockConfig+0x360>)
 80033b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b8:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <HAL_RCC_ClockConfig+0x364>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033be:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x368>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe f8d8 	bl	8001578 <HAL_InitTick>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
 80033dc:	0800824c 	.word	0x0800824c
 80033e0:	24000004 	.word	0x24000004
 80033e4:	24000000 	.word	0x24000000
 80033e8:	24000008 	.word	0x24000008

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	@ 0x24
 80033f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f2:	4bb3      	ldr	r3, [pc, #716]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	f200 8155 	bhi.w	80036aa <HAL_RCC_GetSysClockFreq+0x2be>
 8003400:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800346d 	.word	0x0800346d
 800340c:	080036ab 	.word	0x080036ab
 8003410:	080036ab 	.word	0x080036ab
 8003414:	080036ab 	.word	0x080036ab
 8003418:	080036ab 	.word	0x080036ab
 800341c:	080036ab 	.word	0x080036ab
 8003420:	080036ab 	.word	0x080036ab
 8003424:	080036ab 	.word	0x080036ab
 8003428:	08003493 	.word	0x08003493
 800342c:	080036ab 	.word	0x080036ab
 8003430:	080036ab 	.word	0x080036ab
 8003434:	080036ab 	.word	0x080036ab
 8003438:	080036ab 	.word	0x080036ab
 800343c:	080036ab 	.word	0x080036ab
 8003440:	080036ab 	.word	0x080036ab
 8003444:	080036ab 	.word	0x080036ab
 8003448:	08003499 	.word	0x08003499
 800344c:	080036ab 	.word	0x080036ab
 8003450:	080036ab 	.word	0x080036ab
 8003454:	080036ab 	.word	0x080036ab
 8003458:	080036ab 	.word	0x080036ab
 800345c:	080036ab 	.word	0x080036ab
 8003460:	080036ab 	.word	0x080036ab
 8003464:	080036ab 	.word	0x080036ab
 8003468:	0800349f 	.word	0x0800349f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800346c:	4b94      	ldr	r3, [pc, #592]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003478:	4b91      	ldr	r3, [pc, #580]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	4a90      	ldr	r2, [pc, #576]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800348a:	e111      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800348c:	4b8d      	ldr	r3, [pc, #564]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800348e:	61bb      	str	r3, [r7, #24]
      break;
 8003490:	e10e      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003492:	4b8d      	ldr	r3, [pc, #564]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
      break;
 8003496:	e10b      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003498:	4b8c      	ldr	r3, [pc, #560]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800349a:	61bb      	str	r3, [r7, #24]
      break;
 800349c:	e108      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034a8:	4b85      	ldr	r3, [pc, #532]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034b4:	4b82      	ldr	r3, [pc, #520]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034be:	4b80      	ldr	r3, [pc, #512]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c2:	08db      	lsrs	r3, r3, #3
 80034c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80e1 	beq.w	80036a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f000 8083 	beq.w	80035f0 <HAL_RCC_GetSysClockFreq+0x204>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f200 80a1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x248>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x114>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d056      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80034fe:	e099      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003500:	4b6f      	ldr	r3, [pc, #444]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800350c:	4b6c      	ldr	r3, [pc, #432]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	4a6b      	ldr	r2, [pc, #428]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003536:	4b62      	ldr	r3, [pc, #392]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	ed97 6a02 	vldr	s12, [r7, #8]
 800354a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003562:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003566:	e087      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b51      	ldr	r3, [pc, #324]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a02 	vldr	s12, [r7, #8]
 800358e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035aa:	e065      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b40      	ldr	r3, [pc, #256]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ee:	e043      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b2f      	ldr	r3, [pc, #188]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003632:	e021      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003676:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	0a5b      	lsrs	r3, r3, #9
 800367e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003682:	3301      	adds	r3, #1
 8003684:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003690:	edd7 6a07 	vldr	s13, [r7, #28]
 8003694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369c:	ee17 3a90 	vmov	r3, s15
 80036a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
      break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036aa:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036ac:	61bb      	str	r3, [r7, #24]
      break;
 80036ae:	bf00      	nop
  }

  return sysclockfreq;
 80036b0:	69bb      	ldr	r3, [r7, #24]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	@ 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	58024400 	.word	0x58024400
 80036c4:	03d09000 	.word	0x03d09000
 80036c8:	003d0900 	.word	0x003d0900
 80036cc:	007a1200 	.word	0x007a1200
 80036d0:	46000000 	.word	0x46000000
 80036d4:	4c742400 	.word	0x4c742400
 80036d8:	4a742400 	.word	0x4a742400
 80036dc:	4af42400 	.word	0x4af42400

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036e6:	f7ff fe81 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b10      	ldr	r3, [pc, #64]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490f      	ldr	r1, [pc, #60]	@ (8003734 <HAL_RCC_GetHCLKFreq+0x54>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003704:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x50>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <HAL_RCC_GetHCLKFreq+0x54>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	4a07      	ldr	r2, [pc, #28]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x58>)
 800371c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800371e:	4a07      	ldr	r2, [pc, #28]	@ (800373c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58024400 	.word	0x58024400
 8003734:	0800824c 	.word	0x0800824c
 8003738:	24000004 	.word	0x24000004
 800373c:	24000000 	.word	0x24000000

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003744:	f7ff ffcc 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4904      	ldr	r1, [pc, #16]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58024400 	.word	0x58024400
 8003768:	0800824c 	.word	0x0800824c

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003770:	f7ff ffb6 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024400 	.word	0x58024400
 8003794:	0800824c 	.word	0x0800824c

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b0ca      	sub	sp, #296	@ 0x128
 800379e:	af00      	add	r7, sp, #0
 80037a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037bc:	2500      	movs	r5, #0
 80037be:	ea54 0305 	orrs.w	r3, r4, r5
 80037c2:	d049      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d4:	d828      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037da:	d01a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e0:	d822      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ea:	d007      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ec:	e01c      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ee:	4bb8      	ldr	r3, [pc, #736]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	4ab7      	ldr	r2, [pc, #732]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037fa:	e01a      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	3308      	adds	r3, #8
 8003802:	2102      	movs	r1, #2
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fc8f 	bl	8005128 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003810:	e00f      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	3328      	adds	r3, #40	@ 0x28
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fd36 	bl	800528c <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003826:	e004      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800383a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003848:	4aa1      	ldr	r2, [pc, #644]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6513      	str	r3, [r2, #80]	@ 0x50
 800384e:	e003      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003864:	f04f 0900 	mov.w	r9, #0
 8003868:	ea58 0309 	orrs.w	r3, r8, r9
 800386c:	d047      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	2b04      	cmp	r3, #4
 8003876:	d82a      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003878:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003895 	.word	0x08003895
 8003884:	080038a3 	.word	0x080038a3
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038d7 	.word	0x080038d7
 8003890:	080038d7 	.word	0x080038d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4b8e      	ldr	r3, [pc, #568]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	4a8d      	ldr	r2, [pc, #564]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e01a      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	3308      	adds	r3, #8
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fc3c 	bl	8005128 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038b6:	e00f      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	3328      	adds	r3, #40	@ 0x28
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fce3 	bl	800528c <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038cc:	e004      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e4:	f023 0107 	bic.w	r1, r3, #7
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	4a78      	ldr	r2, [pc, #480]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800390a:	f04f 0b00 	mov.w	fp, #0
 800390e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003912:	d04c      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391e:	d030      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003924:	d829      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003926:	2bc0      	cmp	r3, #192	@ 0xc0
 8003928:	d02d      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800392a:	2bc0      	cmp	r3, #192	@ 0xc0
 800392c:	d825      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d018      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003932:	2b80      	cmp	r3, #128	@ 0x80
 8003934:	d821      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d007      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800393e:	e01c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b63      	ldr	r3, [pc, #396]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4a62      	ldr	r2, [pc, #392]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800394c:	e01c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	3308      	adds	r3, #8
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fbe6 	bl	8005128 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003962:	e011      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	3328      	adds	r3, #40	@ 0x28
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fc8d 	bl	800528c <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003990:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d053      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039da:	d035      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039e0:	d82e      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039e6:	d031      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039ec:	d828      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f2:	d01a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f8:	d822      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a02:	d007      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a04:	e01c      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a06:	4b32      	ldr	r3, [pc, #200]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	4a31      	ldr	r2, [pc, #196]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a12:	e01c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fb83 	bl	8005128 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a28:	e011      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	3328      	adds	r3, #40	@ 0x28
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fc2a 	bl	800528c <RCCEx_PLL3_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a3e:	e006      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a46:	e002      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d056      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aa2:	d038      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aa8:	d831      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aaa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003aae:	d034      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ab0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ab4:	d82b      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ab6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aba:	d01d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003abc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac0:	d825      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003acc:	e01f      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4ba2      	ldr	r3, [pc, #648]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	4aa1      	ldr	r2, [pc, #644]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fb1c 	bl	8005128 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003af6:	e011      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	3328      	adds	r3, #40	@ 0x28
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 fbc3 	bl	800528c <RCCEx_PLL3_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b24:	4b8e      	ldr	r3, [pc, #568]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b34:	4a8a      	ldr	r2, [pc, #552]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d03a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	2b30      	cmp	r3, #48	@ 0x30
 8003b6c:	d01f      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b6e:	2b30      	cmp	r3, #48	@ 0x30
 8003b70:	d819      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d00c      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d815      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d019      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d111      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b82:	4b77      	ldr	r3, [pc, #476]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b86:	4a76      	ldr	r2, [pc, #472]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b8e:	e011      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	3308      	adds	r3, #8
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fac5 	bl	8005128 <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bac:	e002      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bbc:	4b68      	ldr	r3, [pc, #416]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	4a65      	ldr	r2, [pc, #404]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd0:	e003      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003be6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d051      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c04:	d035      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0a:	d82e      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c10:	d031      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c16:	d828      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1c:	d01a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c22:	d822      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2c:	d007      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c2e:	e01c      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	4b4b      	ldr	r3, [pc, #300]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	4a4a      	ldr	r2, [pc, #296]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	3308      	adds	r3, #8
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fa6e 	bl	8005128 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c52:	e011      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	3328      	adds	r3, #40	@ 0x28
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fb15 	bl	800528c <RCCEx_PLL3_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c68:	e006      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c80:	4b37      	ldr	r3, [pc, #220]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8e:	4a34      	ldr	r2, [pc, #208]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c94:	e003      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d056      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cc8:	d033      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cce:	d82c      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cd4:	d02f      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cda:	d826      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce0:	d02b      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ce2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce6:	d820      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cec:	d012      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf2:	d81a      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d022      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfc:	d115      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3308      	adds	r3, #8
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fa0e 	bl	8005128 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d12:	e015      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d18:	3328      	adds	r3, #40	@ 0x28
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fab5 	bl	800528c <RCCEx_PLL3_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d28:	e00a      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d56:	4a02      	ldr	r2, [pc, #8]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d055      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d98:	d033      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d9e:	d82c      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d02f      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003daa:	d826      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003db0:	d02b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003db2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003db6:	d820      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dbc:	d012      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc2:	d81a      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d022      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 f9a6 	bl	8005128 <RCCEx_PLL2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003de2:	e015      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	3328      	adds	r3, #40	@ 0x28
 8003dea:	2101      	movs	r1, #1
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fa4d 	bl	800528c <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003df8:	e00a      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e02:	bf00      	nop
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e18:	4ba3      	ldr	r3, [pc, #652]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e28:	4a9f      	ldr	r2, [pc, #636]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d037      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e62:	d00e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e68:	d816      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e72:	d111      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4b8c      	ldr	r3, [pc, #560]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	4a8b      	ldr	r2, [pc, #556]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e80:	e00f      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	3308      	adds	r3, #8
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 f94c 	bl	8005128 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	4a7b      	ldr	r2, [pc, #492]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ede:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	d039      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d81c      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f35 	.word	0x08003f35
 8003efc:	08003f09 	.word	0x08003f09
 8003f00:	08003f17 	.word	0x08003f17
 8003f04:	08003f35 	.word	0x08003f35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4b67      	ldr	r3, [pc, #412]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	4a66      	ldr	r2, [pc, #408]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f14:	e00f      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f902 	bl	8005128 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	f023 0103 	bic.w	r1, r3, #3
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4c:	4a56      	ldr	r2, [pc, #344]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f000 809f 	beq.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a4a      	ldr	r2, [pc, #296]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd fb3f 	bl	800160c <HAL_GetTick>
 8003f8e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f92:	e00b      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fd fb3a 	bl	800160c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	@ 0x64
 8003fa2:	d903      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003faa:	e005      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fac:	4b3f      	ldr	r3, [pc, #252]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ed      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d179      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fc0:	4b39      	ldr	r3, [pc, #228]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fcc:	4053      	eors	r3, r2
 8003fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd6:	4b34      	ldr	r3, [pc, #208]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	4a30      	ldr	r2, [pc, #192]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fee:	4b2e      	ldr	r3, [pc, #184]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004000:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800400a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800400e:	d118      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd fafc 	bl	800160c <HAL_GetTick>
 8004014:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004018:	e00d      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fd faf7 	bl	800160c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004024:	1ad2      	subs	r2, r2, r3
 8004026:	f241 3388 	movw	r3, #5000	@ 0x1388
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004034:	e005      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004036:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0eb      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d129      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800405a:	d10e      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800405c:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800406c:	091a      	lsrs	r2, r3, #4
 800406e:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004070:	4013      	ands	r3, r2
 8004072:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6113      	str	r3, [r2, #16]
 8004078:	e005      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800407a:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4a0a      	ldr	r2, [pc, #40]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004080:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004084:	6113      	str	r3, [r2, #16]
 8004086:	4b08      	ldr	r3, [pc, #32]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004088:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004096:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
 800409c:	e00e      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040a6:	e009      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040a8:	58024400 	.word	0x58024400
 80040ac:	58024800 	.word	0x58024800
 80040b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 0301 	and.w	r3, r2, #1
 80040c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	f000 8089 	beq.w	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e4:	2b28      	cmp	r3, #40	@ 0x28
 80040e6:	d86b      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040e8:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	080041c9 	.word	0x080041c9
 80040f4:	080041c1 	.word	0x080041c1
 80040f8:	080041c1 	.word	0x080041c1
 80040fc:	080041c1 	.word	0x080041c1
 8004100:	080041c1 	.word	0x080041c1
 8004104:	080041c1 	.word	0x080041c1
 8004108:	080041c1 	.word	0x080041c1
 800410c:	080041c1 	.word	0x080041c1
 8004110:	08004195 	.word	0x08004195
 8004114:	080041c1 	.word	0x080041c1
 8004118:	080041c1 	.word	0x080041c1
 800411c:	080041c1 	.word	0x080041c1
 8004120:	080041c1 	.word	0x080041c1
 8004124:	080041c1 	.word	0x080041c1
 8004128:	080041c1 	.word	0x080041c1
 800412c:	080041c1 	.word	0x080041c1
 8004130:	080041ab 	.word	0x080041ab
 8004134:	080041c1 	.word	0x080041c1
 8004138:	080041c1 	.word	0x080041c1
 800413c:	080041c1 	.word	0x080041c1
 8004140:	080041c1 	.word	0x080041c1
 8004144:	080041c1 	.word	0x080041c1
 8004148:	080041c1 	.word	0x080041c1
 800414c:	080041c1 	.word	0x080041c1
 8004150:	080041c9 	.word	0x080041c9
 8004154:	080041c1 	.word	0x080041c1
 8004158:	080041c1 	.word	0x080041c1
 800415c:	080041c1 	.word	0x080041c1
 8004160:	080041c1 	.word	0x080041c1
 8004164:	080041c1 	.word	0x080041c1
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041c1 	.word	0x080041c1
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041c1 	.word	0x080041c1
 8004178:	080041c1 	.word	0x080041c1
 800417c:	080041c1 	.word	0x080041c1
 8004180:	080041c1 	.word	0x080041c1
 8004184:	080041c1 	.word	0x080041c1
 8004188:	080041c1 	.word	0x080041c1
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041c9 	.word	0x080041c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	3308      	adds	r3, #8
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f000 ffc3 	bl	8005128 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041a8:	e00f      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	3328      	adds	r3, #40	@ 0x28
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f86a 	bl	800528c <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041d2:	4bbf      	ldr	r3, [pc, #764]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041e0:	4abb      	ldr	r2, [pc, #748]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 0302 	and.w	r3, r2, #2
 80041fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004206:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800420a:	460b      	mov	r3, r1
 800420c:	4313      	orrs	r3, r2
 800420e:	d041      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004214:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004216:	2b05      	cmp	r3, #5
 8004218:	d824      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800421a:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	0800426d 	.word	0x0800426d
 8004224:	08004239 	.word	0x08004239
 8004228:	0800424f 	.word	0x0800424f
 800422c:	0800426d 	.word	0x0800426d
 8004230:	0800426d 	.word	0x0800426d
 8004234:	0800426d 	.word	0x0800426d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	3308      	adds	r3, #8
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 ff71 	bl	8005128 <RCCEx_PLL2_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800424c:	e00f      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	3328      	adds	r3, #40	@ 0x28
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f818 	bl	800528c <RCCEx_PLL3_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004262:	e004      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800426a:	e000      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800426c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004276:	4b96      	ldr	r3, [pc, #600]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427a:	f023 0107 	bic.w	r1, r3, #7
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004284:	4a92      	ldr	r2, [pc, #584]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004286:	430b      	orrs	r3, r1
 8004288:	6553      	str	r3, [r2, #84]	@ 0x54
 800428a:	e003      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f002 0304 	and.w	r3, r2, #4
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d044      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d825      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	08004315 	.word	0x08004315
 80042cc:	080042e1 	.word	0x080042e1
 80042d0:	080042f7 	.word	0x080042f7
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004315 	.word	0x08004315
 80042dc:	08004315 	.word	0x08004315
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	3308      	adds	r3, #8
 80042e6:	2101      	movs	r1, #1
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 ff1d 	bl	8005128 <RCCEx_PLL2_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042f4:	e00f      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	3328      	adds	r3, #40	@ 0x28
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 ffc4 	bl	800528c <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800431e:	4b6c      	ldr	r3, [pc, #432]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	f023 0107 	bic.w	r1, r3, #7
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432e:	4a68      	ldr	r2, [pc, #416]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6593      	str	r3, [r2, #88]	@ 0x58
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0320 	and.w	r3, r2, #32
 800434a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d055      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800436a:	d033      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800436c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004370:	d82c      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437c:	d826      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800437e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004382:	d02b      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004384:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004388:	d820      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800438a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004394:	d81a      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d022      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800439a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800439e:	d115      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	3308      	adds	r3, #8
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 febd 	bl	8005128 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043b4:	e015      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	3328      	adds	r3, #40	@ 0x28
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 ff64 	bl	800528c <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043ca:	e00a      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d2:	e006      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d4:	bf00      	nop
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ea:	4b39      	ldr	r3, [pc, #228]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fa:	4a35      	ldr	r2, [pc, #212]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004420:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d058      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004432:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004436:	d033      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004438:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800443c:	d82c      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004442:	d02f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004448:	d826      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800444a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800444e:	d02b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004450:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004454:	d820      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445a:	d012      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004460:	d81a      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d022      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446a:	d115      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	3308      	adds	r3, #8
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fe57 	bl	8005128 <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004480:	e015      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	3328      	adds	r3, #40	@ 0x28
 8004488:	2102      	movs	r1, #2
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fefe 	bl	800528c <RCCEx_PLL3_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004496:	e00a      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449e:	e006      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a0:	bf00      	nop
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a4:	bf00      	nop
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10e      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044c6:	4a02      	ldr	r2, [pc, #8]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d055      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004504:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004508:	d033      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800450a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800450e:	d82c      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004514:	d02f      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451a:	d826      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800451c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004520:	d02b      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004522:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004526:	d820      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800452c:	d012      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800452e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004532:	d81a      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d022      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800453c:	d115      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	3308      	adds	r3, #8
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fdee 	bl	8005128 <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004552:	e015      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	3328      	adds	r3, #40	@ 0x28
 800455a:	2102      	movs	r1, #2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fe95 	bl	800528c <RCCEx_PLL3_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004570:	e006      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004572:	bf00      	nop
 8004574:	e004      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004588:	4ba1      	ldr	r3, [pc, #644]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004598:	4a9d      	ldr	r2, [pc, #628]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459a:	430b      	orrs	r3, r1
 800459c:	6593      	str	r3, [r2, #88]	@ 0x58
 800459e:	e003      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f002 0308 	and.w	r3, r2, #8
 80045b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d01e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fe54 	bl	800528c <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045f0:	4b87      	ldr	r3, [pc, #540]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004600:	4a83      	ldr	r2, [pc, #524]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004602:	430b      	orrs	r3, r1
 8004604:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f002 0310 	and.w	r3, r2, #16
 8004612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800461c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d01e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004632:	d10c      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	3328      	adds	r3, #40	@ 0x28
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fe25 	bl	800528c <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464e:	4b70      	ldr	r3, [pc, #448]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800465e:	4a6c      	ldr	r2, [pc, #432]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800467a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d03e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800468c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004690:	d022      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004696:	d81b      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a0:	d00b      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046a2:	e015      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	3308      	adds	r3, #8
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fd3b 	bl	8005128 <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046b8:	e00f      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	3328      	adds	r3, #40	@ 0x28
 80046c0:	2102      	movs	r1, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fde2 	bl	800528c <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046f2:	4a47      	ldr	r2, [pc, #284]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800470e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004710:	2300      	movs	r3, #0
 8004712:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004714:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d03b      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800472a:	d01f      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800472c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004730:	d818      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004736:	d003      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800473c:	d007      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004740:	4b33      	ldr	r3, [pc, #204]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	4a32      	ldr	r2, [pc, #200]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800474c:	e00f      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	3328      	adds	r3, #40	@ 0x28
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fd98 	bl	800528c <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004762:	e004      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800476a:	e000      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800476c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004776:	4b26      	ldr	r3, [pc, #152]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6553      	str	r3, [r2, #84]	@ 0x54
 800478c:	e003      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047a4:	2300      	movs	r3, #0
 80047a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80047a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d034      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c0:	d007      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047d0:	e00e      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	3308      	adds	r3, #8
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fca4 	bl	8005128 <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047f8:	4b05      	ldr	r3, [pc, #20]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004806:	4a02      	ldr	r2, [pc, #8]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004808:	430b      	orrs	r3, r1
 800480a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800480c:	e006      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800480e:	bf00      	nop
 8004810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482a:	2300      	movs	r3, #0
 800482c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800482e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004832:	460b      	mov	r3, r1
 8004834:	4313      	orrs	r3, r2
 8004836:	d00c      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	3328      	adds	r3, #40	@ 0x28
 800483e:	2102      	movs	r1, #2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fd23 	bl	800528c <RCCEx_PLL3_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800485e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004860:	2300      	movs	r3, #0
 8004862:	667b      	str	r3, [r7, #100]	@ 0x64
 8004864:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d038      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800487a:	d018      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800487c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004880:	d811      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004886:	d014      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488c:	d80b      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004896:	d106      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4bc3      	ldr	r3, [pc, #780]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	4ac2      	ldr	r2, [pc, #776]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048a4:	e008      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ac:	e004      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c0:	4bb9      	ldr	r3, [pc, #740]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d0:	4ab5      	ldr	r2, [pc, #724]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ee:	2300      	movs	r3, #0
 80048f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048fc:	4baa      	ldr	r3, [pc, #680]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004900:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490a:	4aa7      	ldr	r2, [pc, #668]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490c:	430b      	orrs	r3, r1
 800490e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800491c:	653b      	str	r3, [r7, #80]	@ 0x50
 800491e:	2300      	movs	r3, #0
 8004920:	657b      	str	r3, [r7, #84]	@ 0x54
 8004922:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800492c:	4b9e      	ldr	r3, [pc, #632]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004938:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800493c:	4a9a      	ldr	r2, [pc, #616]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004950:	2300      	movs	r3, #0
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004954:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800495e:	4b92      	ldr	r3, [pc, #584]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004962:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800496c:	4a8e      	ldr	r2, [pc, #568]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496e:	430b      	orrs	r3, r1
 8004970:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800497e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	@ 0x44
 8004984:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800498e:	4b86      	ldr	r3, [pc, #536]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4a85      	ldr	r2, [pc, #532]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004994:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004998:	6113      	str	r3, [r2, #16]
 800499a:	4b83      	ldr	r3, [pc, #524]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499c:	6919      	ldr	r1, [r3, #16]
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049a6:	4a80      	ldr	r2, [pc, #512]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ba:	2300      	movs	r3, #0
 80049bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049c8:	4b77      	ldr	r3, [pc, #476]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	4a74      	ldr	r2, [pc, #464]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f8:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a08:	4a67      	ldr	r2, [pc, #412]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	2100      	movs	r1, #0
 8004a18:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d011      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	3308      	adds	r3, #8
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb78 	bl	8005128 <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	2100      	movs	r1, #0
 8004a58:	6239      	str	r1, [r7, #32]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d011      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	3308      	adds	r3, #8
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb58 	bl	8005128 <RCCEx_PLL2_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	2100      	movs	r1, #0
 8004a98:	61b9      	str	r1, [r7, #24]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	d011      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aae:	3308      	adds	r3, #8
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fb38 	bl	8005128 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	6139      	str	r1, [r7, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	d011      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aee:	3328      	adds	r3, #40	@ 0x28
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fbca 	bl	800528c <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	2100      	movs	r1, #0
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d011      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2e:	3328      	adds	r3, #40	@ 0x28
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fbaa 	bl	800528c <RCCEx_PLL3_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	2100      	movs	r1, #0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d011      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	3328      	adds	r3, #40	@ 0x28
 8004b70:	2102      	movs	r1, #2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb8a 	bl	800528c <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b8e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba8:	58024400 	.word	0x58024400

08004bac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bb0:	f7fe fd96 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	0800824c 	.word	0x0800824c

08004bd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	@ 0x24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bea:	4b9f      	ldr	r3, [pc, #636]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	0b1b      	lsrs	r3, r3, #12
 8004bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bf4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c02:	4b99      	ldr	r3, [pc, #612]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8111 	beq.w	8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f000 8083 	beq.w	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f200 80a1 	bhi.w	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d056      	beq.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c42:	e099      	b.n	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c44:	4b88      	ldr	r3, [pc, #544]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c50:	4b85      	ldr	r3, [pc, #532]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	4a84      	ldr	r2, [pc, #528]	@ (8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004caa:	e087      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cee:	e065      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b59      	ldr	r3, [pc, #356]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d32:	e043      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b48      	ldr	r3, [pc, #288]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d76:	e021      	b.n	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b37      	ldr	r3, [pc, #220]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	0a5b      	lsrs	r3, r3, #9
 8004dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 2a90 	vmov	r2, s15
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dea:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e10:	ee17 2a90 	vmov	r2, s15
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e18:	4b13      	ldr	r3, [pc, #76]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3e:	ee17 2a90 	vmov	r2, s15
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e46:	e008      	b.n	8004e5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	609a      	str	r2, [r3, #8]
}
 8004e5a:	bf00      	nop
 8004e5c:	3724      	adds	r7, #36	@ 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	03d09000 	.word	0x03d09000
 8004e70:	46000000 	.word	0x46000000
 8004e74:	4c742400 	.word	0x4c742400
 8004e78:	4a742400 	.word	0x4a742400
 8004e7c:	4af42400 	.word	0x4af42400

08004e80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	@ 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e88:	4ba1      	ldr	r3, [pc, #644]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e92:	4b9f      	ldr	r3, [pc, #636]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	0d1b      	lsrs	r3, r3, #20
 8004e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eaa:	4b99      	ldr	r3, [pc, #612]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	08db      	lsrs	r3, r3, #3
 8004eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8111 	beq.w	80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	f000 8083 	beq.w	8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f200 80a1 	bhi.w	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d056      	beq.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004eea:	e099      	b.n	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eec:	4b88      	ldr	r3, [pc, #544]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02d      	beq.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef8:	4b85      	ldr	r3, [pc, #532]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	08db      	lsrs	r3, r3, #3
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	4a84      	ldr	r2, [pc, #528]	@ (8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b7b      	ldr	r3, [pc, #492]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f52:	e087      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800511c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b6a      	ldr	r3, [pc, #424]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f96:	e065      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b59      	ldr	r3, [pc, #356]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fda:	e043      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501e:	e021      	b.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b37      	ldr	r3, [pc, #220]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005062:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005064:	4b2a      	ldr	r3, [pc, #168]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	0a5b      	lsrs	r3, r3, #9
 800506a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005092:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b8:	ee17 2a90 	vmov	r2, s15
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050c0:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	0e1b      	lsrs	r3, r3, #24
 80050c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050da:	edd7 6a07 	vldr	s13, [r7, #28]
 80050de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e6:	ee17 2a90 	vmov	r2, s15
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050ee:	e008      	b.n	8005102 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
}
 8005102:	bf00      	nop
 8005104:	3724      	adds	r7, #36	@ 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	03d09000 	.word	0x03d09000
 8005118:	46000000 	.word	0x46000000
 800511c:	4c742400 	.word	0x4c742400
 8005120:	4a742400 	.word	0x4a742400
 8005124:	4af42400 	.word	0x4af42400

08005128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005136:	4b53      	ldr	r3, [pc, #332]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d101      	bne.n	8005146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e099      	b.n	800527a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005146:	4b4f      	ldr	r3, [pc, #316]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4e      	ldr	r2, [pc, #312]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800514c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005152:	f7fc fa5b 	bl	800160c <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005158:	e008      	b.n	800516c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800515a:	f7fc fa57 	bl	800160c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e086      	b.n	800527a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800516c:	4b45      	ldr	r3, [pc, #276]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005178:	4b42      	ldr	r3, [pc, #264]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	493f      	ldr	r1, [pc, #252]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	628b      	str	r3, [r1, #40]	@ 0x28
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	3b01      	subs	r3, #1
 8005192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	3b01      	subs	r3, #1
 800519c:	025b      	lsls	r3, r3, #9
 800519e:	b29b      	uxth	r3, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051bc:	4931      	ldr	r1, [pc, #196]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051c2:	4b30      	ldr	r3, [pc, #192]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	492d      	ldr	r1, [pc, #180]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	f023 0220 	bic.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	4928      	ldr	r1, [pc, #160]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051e6:	4b27      	ldr	r3, [pc, #156]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a26      	ldr	r2, [pc, #152]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f023 0310 	bic.w	r3, r3, #16
 80051f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051f2:	4b24      	ldr	r3, [pc, #144]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051f6:	4b24      	ldr	r3, [pc, #144]	@ (8005288 <RCCEx_PLL2_Config+0x160>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	69d2      	ldr	r2, [r2, #28]
 80051fe:	00d2      	lsls	r2, r2, #3
 8005200:	4920      	ldr	r1, [pc, #128]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005206:	4b1f      	ldr	r3, [pc, #124]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	4a1e      	ldr	r2, [pc, #120]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f043 0310 	orr.w	r3, r3, #16
 8005210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005218:	4b1a      	ldr	r3, [pc, #104]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800521e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005224:	e00f      	b.n	8005246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d106      	bne.n	800523a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800522c:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	4a14      	ldr	r2, [pc, #80]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005238:	e005      	b.n	8005246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800523a:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	4a11      	ldr	r2, [pc, #68]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005246:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0e      	ldr	r2, [pc, #56]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800524c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005252:	f7fc f9db 	bl	800160c <HAL_GetTick>
 8005256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005258:	e008      	b.n	800526c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800525a:	f7fc f9d7 	bl	800160c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800526c:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <RCCEx_PLL2_Config+0x15c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
 8005288:	ffff0007 	.word	0xffff0007

0800528c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800529a:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d101      	bne.n	80052aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e099      	b.n	80053de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052aa:	4b4f      	ldr	r3, [pc, #316]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4e      	ldr	r2, [pc, #312]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b6:	f7fc f9a9 	bl	800160c <HAL_GetTick>
 80052ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052be:	f7fc f9a5 	bl	800160c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e086      	b.n	80053de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d0:	4b45      	ldr	r3, [pc, #276]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052dc:	4b42      	ldr	r3, [pc, #264]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	051b      	lsls	r3, r3, #20
 80052ea:	493f      	ldr	r1, [pc, #252]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	3b01      	subs	r3, #1
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	b29b      	uxth	r3, r3
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	3b01      	subs	r3, #1
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	3b01      	subs	r3, #1
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005320:	4931      	ldr	r1, [pc, #196]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005326:	4b30      	ldr	r3, [pc, #192]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	492d      	ldr	r1, [pc, #180]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005338:	4b2b      	ldr	r3, [pc, #172]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	4928      	ldr	r1, [pc, #160]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800534a:	4b27      	ldr	r3, [pc, #156]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	4a26      	ldr	r2, [pc, #152]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005356:	4b24      	ldr	r3, [pc, #144]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800535a:	4b24      	ldr	r3, [pc, #144]	@ (80053ec <RCCEx_PLL3_Config+0x160>)
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	69d2      	ldr	r2, [r2, #28]
 8005362:	00d2      	lsls	r2, r2, #3
 8005364:	4920      	ldr	r1, [pc, #128]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800536a:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	4a1e      	ldr	r2, [pc, #120]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800537c:	4b1a      	ldr	r3, [pc, #104]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005382:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005388:	e00f      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005390:	4b15      	ldr	r3, [pc, #84]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	4a14      	ldr	r2, [pc, #80]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005396:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800539a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800539c:	e005      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4a11      	ldr	r2, [pc, #68]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053aa:	4b0f      	ldr	r3, [pc, #60]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0e      	ldr	r2, [pc, #56]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fc f929 	bl	800160c <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053bc:	e008      	b.n	80053d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053be:	f7fc f925 	bl	800160c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
 80053ec:	ffff0007 	.word	0xffff0007

080053f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e049      	b.n	8005496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb fe60 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 fcda 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e049      	b.n	8005544 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f841 	bl	800554c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f000 fc83 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <HAL_TIM_OC_Start+0x24>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e03c      	b.n	80055fe <HAL_TIM_OC_Start+0x9e>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d109      	bne.n	800559e <HAL_TIM_OC_Start+0x3e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	e02f      	b.n	80055fe <HAL_TIM_OC_Start+0x9e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d109      	bne.n	80055b8 <HAL_TIM_OC_Start+0x58>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e022      	b.n	80055fe <HAL_TIM_OC_Start+0x9e>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d109      	bne.n	80055d2 <HAL_TIM_OC_Start+0x72>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	e015      	b.n	80055fe <HAL_TIM_OC_Start+0x9e>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d109      	bne.n	80055ec <HAL_TIM_OC_Start+0x8c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e008      	b.n	80055fe <HAL_TIM_OC_Start+0x9e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0a1      	b.n	800574a <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <HAL_TIM_OC_Start+0xb6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005614:	e023      	b.n	800565e <HAL_TIM_OC_Start+0xfe>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d104      	bne.n	8005626 <HAL_TIM_OC_Start+0xc6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005624:	e01b      	b.n	800565e <HAL_TIM_OC_Start+0xfe>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d104      	bne.n	8005636 <HAL_TIM_OC_Start+0xd6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005634:	e013      	b.n	800565e <HAL_TIM_OC_Start+0xfe>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d104      	bne.n	8005646 <HAL_TIM_OC_Start+0xe6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005644:	e00b      	b.n	800565e <HAL_TIM_OC_Start+0xfe>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b10      	cmp	r3, #16
 800564a:	d104      	bne.n	8005656 <HAL_TIM_OC_Start+0xf6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005654:	e003      	b.n	800565e <HAL_TIM_OC_Start+0xfe>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2201      	movs	r2, #1
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f8a3 	bl	80067b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a38      	ldr	r2, [pc, #224]	@ (8005754 <HAL_TIM_OC_Start+0x1f4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_TIM_OC_Start+0x13e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a37      	ldr	r2, [pc, #220]	@ (8005758 <HAL_TIM_OC_Start+0x1f8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00e      	beq.n	800569e <HAL_TIM_OC_Start+0x13e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a35      	ldr	r2, [pc, #212]	@ (800575c <HAL_TIM_OC_Start+0x1fc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d009      	beq.n	800569e <HAL_TIM_OC_Start+0x13e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a34      	ldr	r2, [pc, #208]	@ (8005760 <HAL_TIM_OC_Start+0x200>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIM_OC_Start+0x13e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a32      	ldr	r2, [pc, #200]	@ (8005764 <HAL_TIM_OC_Start+0x204>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_OC_Start+0x142>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_TIM_OC_Start+0x144>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a25      	ldr	r2, [pc, #148]	@ (8005754 <HAL_TIM_OC_Start+0x1f4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a25      	ldr	r2, [pc, #148]	@ (8005768 <HAL_TIM_OC_Start+0x208>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a24      	ldr	r2, [pc, #144]	@ (800576c <HAL_TIM_OC_Start+0x20c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a22      	ldr	r2, [pc, #136]	@ (8005770 <HAL_TIM_OC_Start+0x210>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005758 <HAL_TIM_OC_Start+0x1f8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <HAL_TIM_OC_Start+0x214>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_OC_Start+0x1a8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a16      	ldr	r2, [pc, #88]	@ (800575c <HAL_TIM_OC_Start+0x1fc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d115      	bne.n	8005734 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <HAL_TIM_OC_Start+0x218>)
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d015      	beq.n	8005746 <HAL_TIM_OC_Start+0x1e6>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d011      	beq.n	8005746 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	e008      	b.n	8005746 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e000      	b.n	8005748 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40001800 	.word	0x40001800
 8005778:	00010007 	.word	0x00010007

0800577c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e049      	b.n	8005822 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fc78 	bl	8001098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f000 fb14 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_TIM_PWM_Start+0x24>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	bf14      	ite	ne
 8005848:	2301      	movne	r3, #1
 800584a:	2300      	moveq	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	e03c      	b.n	80058ca <HAL_TIM_PWM_Start+0x9e>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b04      	cmp	r3, #4
 8005854:	d109      	bne.n	800586a <HAL_TIM_PWM_Start+0x3e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e02f      	b.n	80058ca <HAL_TIM_PWM_Start+0x9e>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d109      	bne.n	8005884 <HAL_TIM_PWM_Start+0x58>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e022      	b.n	80058ca <HAL_TIM_PWM_Start+0x9e>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d109      	bne.n	800589e <HAL_TIM_PWM_Start+0x72>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e015      	b.n	80058ca <HAL_TIM_PWM_Start+0x9e>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d109      	bne.n	80058b8 <HAL_TIM_PWM_Start+0x8c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e008      	b.n	80058ca <HAL_TIM_PWM_Start+0x9e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0a1      	b.n	8005a16 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_PWM_Start+0xb6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058e0:	e023      	b.n	800592a <HAL_TIM_PWM_Start+0xfe>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_PWM_Start+0xc6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058f0:	e01b      	b.n	800592a <HAL_TIM_PWM_Start+0xfe>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Start+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005900:	e013      	b.n	800592a <HAL_TIM_PWM_Start+0xfe>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start+0xe6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005910:	e00b      	b.n	800592a <HAL_TIM_PWM_Start+0xfe>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b10      	cmp	r3, #16
 8005916:	d104      	bne.n	8005922 <HAL_TIM_PWM_Start+0xf6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005920:	e003      	b.n	800592a <HAL_TIM_PWM_Start+0xfe>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 ff3d 	bl	80067b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a38      	ldr	r2, [pc, #224]	@ (8005a20 <HAL_TIM_PWM_Start+0x1f4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_TIM_PWM_Start+0x13e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a37      	ldr	r2, [pc, #220]	@ (8005a24 <HAL_TIM_PWM_Start+0x1f8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIM_PWM_Start+0x13e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a35      	ldr	r2, [pc, #212]	@ (8005a28 <HAL_TIM_PWM_Start+0x1fc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIM_PWM_Start+0x13e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a34      	ldr	r2, [pc, #208]	@ (8005a2c <HAL_TIM_PWM_Start+0x200>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIM_PWM_Start+0x13e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a32      	ldr	r2, [pc, #200]	@ (8005a30 <HAL_TIM_PWM_Start+0x204>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_TIM_PWM_Start+0x142>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <HAL_TIM_PWM_Start+0x144>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a25      	ldr	r2, [pc, #148]	@ (8005a20 <HAL_TIM_PWM_Start+0x1f4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d022      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005996:	d01d      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a25      	ldr	r2, [pc, #148]	@ (8005a34 <HAL_TIM_PWM_Start+0x208>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d018      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a24      	ldr	r2, [pc, #144]	@ (8005a38 <HAL_TIM_PWM_Start+0x20c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d013      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <HAL_TIM_PWM_Start+0x210>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00e      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_TIM_PWM_Start+0x1f8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d009      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <HAL_TIM_PWM_Start+0x214>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x1a8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a16      	ldr	r2, [pc, #88]	@ (8005a28 <HAL_TIM_PWM_Start+0x1fc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d115      	bne.n	8005a00 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	4b1a      	ldr	r3, [pc, #104]	@ (8005a44 <HAL_TIM_PWM_Start+0x218>)
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d015      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x1e6>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ec:	d011      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	e008      	b.n	8005a12 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e000      	b.n	8005a14 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40001800 	.word	0x40001800
 8005a44:	00010007 	.word	0x00010007

08005a48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e066      	b.n	8005b34 <HAL_TIM_OC_ConfigChannel+0xec>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b14      	cmp	r3, #20
 8005a72:	d857      	bhi.n	8005b24 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005a74:	a201      	add	r2, pc, #4	@ (adr r2, 8005a7c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005b25 	.word	0x08005b25
 8005a84:	08005b25 	.word	0x08005b25
 8005a88:	08005b25 	.word	0x08005b25
 8005a8c:	08005adf 	.word	0x08005adf
 8005a90:	08005b25 	.word	0x08005b25
 8005a94:	08005b25 	.word	0x08005b25
 8005a98:	08005b25 	.word	0x08005b25
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005b25 	.word	0x08005b25
 8005aa4:	08005b25 	.word	0x08005b25
 8005aa8:	08005b25 	.word	0x08005b25
 8005aac:	08005afb 	.word	0x08005afb
 8005ab0:	08005b25 	.word	0x08005b25
 8005ab4:	08005b25 	.word	0x08005b25
 8005ab8:	08005b25 	.word	0x08005b25
 8005abc:	08005b09 	.word	0x08005b09
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005b25 	.word	0x08005b25
 8005ac8:	08005b25 	.word	0x08005b25
 8005acc:	08005b17 	.word	0x08005b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fa2c 	bl	8005f34 <TIM_OC1_SetConfig>
      break;
 8005adc:	e025      	b.n	8005b2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fab5 	bl	8006054 <TIM_OC2_SetConfig>
      break;
 8005aea:	e01e      	b.n	8005b2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb38 	bl	8006168 <TIM_OC3_SetConfig>
      break;
 8005af8:	e017      	b.n	8005b2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fbb9 	bl	8006278 <TIM_OC4_SetConfig>
      break;
 8005b06:	e010      	b.n	8005b2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fc1c 	bl	800634c <TIM_OC5_SetConfig>
      break;
 8005b14:	e009      	b.n	8005b2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fc79 	bl	8006414 <TIM_OC6_SetConfig>
      break;
 8005b22:	e002      	b.n	8005b2a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
      break;
 8005b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0ff      	b.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b14      	cmp	r3, #20
 8005b66:	f200 80f0 	bhi.w	8005d4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005d4b 	.word	0x08005d4b
 8005b78:	08005d4b 	.word	0x08005d4b
 8005b7c:	08005d4b 	.word	0x08005d4b
 8005b80:	08005c05 	.word	0x08005c05
 8005b84:	08005d4b 	.word	0x08005d4b
 8005b88:	08005d4b 	.word	0x08005d4b
 8005b8c:	08005d4b 	.word	0x08005d4b
 8005b90:	08005c47 	.word	0x08005c47
 8005b94:	08005d4b 	.word	0x08005d4b
 8005b98:	08005d4b 	.word	0x08005d4b
 8005b9c:	08005d4b 	.word	0x08005d4b
 8005ba0:	08005c87 	.word	0x08005c87
 8005ba4:	08005d4b 	.word	0x08005d4b
 8005ba8:	08005d4b 	.word	0x08005d4b
 8005bac:	08005d4b 	.word	0x08005d4b
 8005bb0:	08005cc9 	.word	0x08005cc9
 8005bb4:	08005d4b 	.word	0x08005d4b
 8005bb8:	08005d4b 	.word	0x08005d4b
 8005bbc:	08005d4b 	.word	0x08005d4b
 8005bc0:	08005d09 	.word	0x08005d09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f9b2 	bl	8005f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0208 	orr.w	r2, r2, #8
 8005bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0204 	bic.w	r2, r2, #4
 8005bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6999      	ldr	r1, [r3, #24]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	619a      	str	r2, [r3, #24]
      break;
 8005c02:	e0a5      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fa22 	bl	8006054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6999      	ldr	r1, [r3, #24]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	021a      	lsls	r2, r3, #8
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	619a      	str	r2, [r3, #24]
      break;
 8005c44:	e084      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fa8b 	bl	8006168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0208 	orr.w	r2, r2, #8
 8005c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0204 	bic.w	r2, r2, #4
 8005c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69d9      	ldr	r1, [r3, #28]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	61da      	str	r2, [r3, #28]
      break;
 8005c84:	e064      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 faf3 	bl	8006278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69d9      	ldr	r1, [r3, #28]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	021a      	lsls	r2, r3, #8
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	61da      	str	r2, [r3, #28]
      break;
 8005cc6:	e043      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fb3c 	bl	800634c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0208 	orr.w	r2, r2, #8
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0204 	bic.w	r2, r2, #4
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d06:	e023      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fb80 	bl	8006414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d48:	e002      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop

08005d64 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e031      	b.n	8005de0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fba6 	bl	80064e0 <TIM_SlaveTimer_SetConfig>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e018      	b.n	8005de0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dbc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dcc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a46      	ldr	r2, [pc, #280]	@ (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a43      	ldr	r2, [pc, #268]	@ (8005f18 <TIM_Base_SetConfig+0x130>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a42      	ldr	r2, [pc, #264]	@ (8005f1c <TIM_Base_SetConfig+0x134>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a41      	ldr	r2, [pc, #260]	@ (8005f20 <TIM_Base_SetConfig+0x138>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a40      	ldr	r2, [pc, #256]	@ (8005f24 <TIM_Base_SetConfig+0x13c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a35      	ldr	r2, [pc, #212]	@ (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01f      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e48:	d01b      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a32      	ldr	r2, [pc, #200]	@ (8005f18 <TIM_Base_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d017      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a31      	ldr	r2, [pc, #196]	@ (8005f1c <TIM_Base_SetConfig+0x134>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a30      	ldr	r2, [pc, #192]	@ (8005f20 <TIM_Base_SetConfig+0x138>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00f      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2f      	ldr	r2, [pc, #188]	@ (8005f24 <TIM_Base_SetConfig+0x13c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f28 <TIM_Base_SetConfig+0x140>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2d      	ldr	r2, [pc, #180]	@ (8005f2c <TIM_Base_SetConfig+0x144>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_Base_SetConfig+0x9a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f30 <TIM_Base_SetConfig+0x148>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d108      	bne.n	8005e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	@ (8005f24 <TIM_Base_SetConfig+0x13c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <TIM_Base_SetConfig+0x140>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	@ (8005f2c <TIM_Base_SetConfig+0x144>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <TIM_Base_SetConfig+0x148>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d103      	bne.n	8005ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d105      	bne.n	8005f06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]
  }
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f023 0201 	bic.w	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4b37      	ldr	r3, [pc, #220]	@ (800603c <TIM_OC1_SetConfig+0x108>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f023 0302 	bic.w	r3, r3, #2
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <TIM_OC1_SetConfig+0x10c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_OC1_SetConfig+0x7c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	@ (8006044 <TIM_OC1_SetConfig+0x110>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_OC1_SetConfig+0x7c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8006048 <TIM_OC1_SetConfig+0x114>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_OC1_SetConfig+0x7c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800604c <TIM_OC1_SetConfig+0x118>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC1_SetConfig+0x7c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a29      	ldr	r2, [pc, #164]	@ (8006050 <TIM_OC1_SetConfig+0x11c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0308 	bic.w	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <TIM_OC1_SetConfig+0x10c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_OC1_SetConfig+0xbe>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <TIM_OC1_SetConfig+0x110>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_OC1_SetConfig+0xbe>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <TIM_OC1_SetConfig+0x114>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_OC1_SetConfig+0xbe>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <TIM_OC1_SetConfig+0x118>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC1_SetConfig+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <TIM_OC1_SetConfig+0x11c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d111      	bne.n	8006016 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	fffeff8f 	.word	0xfffeff8f
 8006040:	40010000 	.word	0x40010000
 8006044:	40010400 	.word	0x40010400
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800

08006054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f023 0210 	bic.w	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4b34      	ldr	r3, [pc, #208]	@ (8006150 <TIM_OC2_SetConfig+0xfc>)
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a29      	ldr	r2, [pc, #164]	@ (8006154 <TIM_OC2_SetConfig+0x100>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC2_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a28      	ldr	r2, [pc, #160]	@ (8006158 <TIM_OC2_SetConfig+0x104>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d10d      	bne.n	80060d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a1e      	ldr	r2, [pc, #120]	@ (8006154 <TIM_OC2_SetConfig+0x100>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00f      	beq.n	8006100 <TIM_OC2_SetConfig+0xac>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006158 <TIM_OC2_SetConfig+0x104>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_OC2_SetConfig+0xac>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	@ (800615c <TIM_OC2_SetConfig+0x108>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_OC2_SetConfig+0xac>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <TIM_OC2_SetConfig+0x10c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC2_SetConfig+0xac>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006164 <TIM_OC2_SetConfig+0x110>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d113      	bne.n	8006128 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	feff8fff 	.word	0xfeff8fff
 8006154:	40010000 	.word	0x40010000
 8006158:	40010400 	.word	0x40010400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4b33      	ldr	r3, [pc, #204]	@ (8006260 <TIM_OC3_SetConfig+0xf8>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a28      	ldr	r2, [pc, #160]	@ (8006264 <TIM_OC3_SetConfig+0xfc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC3_SetConfig+0x66>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a27      	ldr	r2, [pc, #156]	@ (8006268 <TIM_OC3_SetConfig+0x100>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d10d      	bne.n	80061ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <TIM_OC3_SetConfig+0xfc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00f      	beq.n	8006212 <TIM_OC3_SetConfig+0xaa>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006268 <TIM_OC3_SetConfig+0x100>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00b      	beq.n	8006212 <TIM_OC3_SetConfig+0xaa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1b      	ldr	r2, [pc, #108]	@ (800626c <TIM_OC3_SetConfig+0x104>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d007      	beq.n	8006212 <TIM_OC3_SetConfig+0xaa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1a      	ldr	r2, [pc, #104]	@ (8006270 <TIM_OC3_SetConfig+0x108>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d003      	beq.n	8006212 <TIM_OC3_SetConfig+0xaa>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a19      	ldr	r2, [pc, #100]	@ (8006274 <TIM_OC3_SetConfig+0x10c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d113      	bne.n	800623a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	fffeff8f 	.word	0xfffeff8f
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800

08006278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <TIM_OC4_SetConfig+0xbc>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a19      	ldr	r2, [pc, #100]	@ (8006338 <TIM_OC4_SetConfig+0xc0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_OC4_SetConfig+0x80>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <TIM_OC4_SetConfig+0xc4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC4_SetConfig+0x80>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a17      	ldr	r2, [pc, #92]	@ (8006340 <TIM_OC4_SetConfig+0xc8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC4_SetConfig+0x80>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a16      	ldr	r2, [pc, #88]	@ (8006344 <TIM_OC4_SetConfig+0xcc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC4_SetConfig+0x80>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a15      	ldr	r2, [pc, #84]	@ (8006348 <TIM_OC4_SetConfig+0xd0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d109      	bne.n	800630c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	feff8fff 	.word	0xfeff8fff
 8006338:	40010000 	.word	0x40010000
 800633c:	40010400 	.word	0x40010400
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800

0800634c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4b21      	ldr	r3, [pc, #132]	@ (80063fc <TIM_OC5_SetConfig+0xb0>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800638c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a18      	ldr	r2, [pc, #96]	@ (8006400 <TIM_OC5_SetConfig+0xb4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <TIM_OC5_SetConfig+0x76>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a17      	ldr	r2, [pc, #92]	@ (8006404 <TIM_OC5_SetConfig+0xb8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00b      	beq.n	80063c2 <TIM_OC5_SetConfig+0x76>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a16      	ldr	r2, [pc, #88]	@ (8006408 <TIM_OC5_SetConfig+0xbc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d007      	beq.n	80063c2 <TIM_OC5_SetConfig+0x76>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a15      	ldr	r2, [pc, #84]	@ (800640c <TIM_OC5_SetConfig+0xc0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC5_SetConfig+0x76>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a14      	ldr	r2, [pc, #80]	@ (8006410 <TIM_OC5_SetConfig+0xc4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d109      	bne.n	80063d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	fffeff8f 	.word	0xfffeff8f
 8006400:	40010000 	.word	0x40010000
 8006404:	40010400 	.word	0x40010400
 8006408:	40014000 	.word	0x40014000
 800640c:	40014400 	.word	0x40014400
 8006410:	40014800 	.word	0x40014800

08006414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4b22      	ldr	r3, [pc, #136]	@ (80064c8 <TIM_OC6_SetConfig+0xb4>)
 8006440:	4013      	ands	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	051b      	lsls	r3, r3, #20
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a19      	ldr	r2, [pc, #100]	@ (80064cc <TIM_OC6_SetConfig+0xb8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00f      	beq.n	800648c <TIM_OC6_SetConfig+0x78>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <TIM_OC6_SetConfig+0xbc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_OC6_SetConfig+0x78>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a17      	ldr	r2, [pc, #92]	@ (80064d4 <TIM_OC6_SetConfig+0xc0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_OC6_SetConfig+0x78>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a16      	ldr	r2, [pc, #88]	@ (80064d8 <TIM_OC6_SetConfig+0xc4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC6_SetConfig+0x78>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a15      	ldr	r2, [pc, #84]	@ (80064dc <TIM_OC6_SetConfig+0xc8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d109      	bne.n	80064a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006492:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	029b      	lsls	r3, r3, #10
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	feff8fff 	.word	0xfeff8fff
 80064cc:	40010000 	.word	0x40010000
 80064d0:	40010400 	.word	0x40010400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800

080064e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4b65      	ldr	r3, [pc, #404]	@ (8006690 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4b62      	ldr	r3, [pc, #392]	@ (8006694 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800650c:	4013      	ands	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4a5c      	ldr	r2, [pc, #368]	@ (8006698 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	f000 80ab 	beq.w	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800652e:	4a5a      	ldr	r2, [pc, #360]	@ (8006698 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	f200 80a4 	bhi.w	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800653a:	f000 80a3 	beq.w	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800653e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006542:	f200 809c 	bhi.w	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006546:	4a55      	ldr	r2, [pc, #340]	@ (800669c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	f000 809b 	beq.w	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800654e:	4a53      	ldr	r2, [pc, #332]	@ (800669c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	f200 8094 	bhi.w	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006556:	4a52      	ldr	r2, [pc, #328]	@ (80066a0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	f000 8093 	beq.w	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800655e:	4a50      	ldr	r2, [pc, #320]	@ (80066a0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	f200 808c 	bhi.w	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006566:	4a4f      	ldr	r2, [pc, #316]	@ (80066a4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	f000 808b 	beq.w	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800656e:	4a4d      	ldr	r2, [pc, #308]	@ (80066a4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	f200 8084 	bhi.w	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006576:	4a4c      	ldr	r2, [pc, #304]	@ (80066a8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	f000 8083 	beq.w	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800657e:	4a4a      	ldr	r2, [pc, #296]	@ (80066a8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d87c      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006584:	4a49      	ldr	r2, [pc, #292]	@ (80066ac <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d07c      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 800658a:	4a48      	ldr	r2, [pc, #288]	@ (80066ac <TIM_SlaveTimer_SetConfig+0x1cc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d876      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 8006590:	4a47      	ldr	r2, [pc, #284]	@ (80066b0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d076      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006596:	4a46      	ldr	r2, [pc, #280]	@ (80066b0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d870      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 800659c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065a0:	d070      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 80065a2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065a6:	d86a      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ac:	d06a      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065b2:	d864      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065b4:	2b70      	cmp	r3, #112	@ 0x70
 80065b6:	d01a      	beq.n	80065ee <TIM_SlaveTimer_SetConfig+0x10e>
 80065b8:	2b70      	cmp	r3, #112	@ 0x70
 80065ba:	d860      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065bc:	2b60      	cmp	r3, #96	@ 0x60
 80065be:	d054      	beq.n	800666a <TIM_SlaveTimer_SetConfig+0x18a>
 80065c0:	2b60      	cmp	r3, #96	@ 0x60
 80065c2:	d85c      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065c4:	2b50      	cmp	r3, #80	@ 0x50
 80065c6:	d046      	beq.n	8006656 <TIM_SlaveTimer_SetConfig+0x176>
 80065c8:	2b50      	cmp	r3, #80	@ 0x50
 80065ca:	d858      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065cc:	2b40      	cmp	r3, #64	@ 0x40
 80065ce:	d019      	beq.n	8006604 <TIM_SlaveTimer_SetConfig+0x124>
 80065d0:	2b40      	cmp	r3, #64	@ 0x40
 80065d2:	d854      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065d4:	2b30      	cmp	r3, #48	@ 0x30
 80065d6:	d055      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 80065d8:	2b30      	cmp	r3, #48	@ 0x30
 80065da:	d850      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d051      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d84c      	bhi.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d04d      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d04b      	beq.n	8006684 <TIM_SlaveTimer_SetConfig+0x1a4>
 80065ec:	e047      	b.n	800667e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80065fe:	f000 f8b8 	bl	8006772 <TIM_ETR_SetConfig>
      break;
 8006602:	e040      	b.n	8006686 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b05      	cmp	r3, #5
 800660a:	d101      	bne.n	8006610 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e03b      	b.n	8006688 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006636:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4313      	orrs	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	621a      	str	r2, [r3, #32]
      break;
 8006654:	e017      	b.n	8006686 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006662:	461a      	mov	r2, r3
 8006664:	f000 f826 	bl	80066b4 <TIM_TI1_ConfigInputStage>
      break;
 8006668:	e00d      	b.n	8006686 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006676:	461a      	mov	r2, r3
 8006678:	f000 f84b 	bl	8006712 <TIM_TI2_ConfigInputStage>
      break;
 800667c:	e003      	b.n	8006686 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	75fb      	strb	r3, [r7, #23]
      break;
 8006682:	e000      	b.n	8006686 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8006684:	bf00      	nop
  }

  return status;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	ffcfff8f 	.word	0xffcfff8f
 8006694:	fffefff8 	.word	0xfffefff8
 8006698:	00200010 	.word	0x00200010
 800669c:	00100070 	.word	0x00100070
 80066a0:	00100060 	.word	0x00100060
 80066a4:	00100050 	.word	0x00100050
 80066a8:	00100040 	.word	0x00100040
 80066ac:	00100030 	.word	0x00100030
 80066b0:	00100020 	.word	0x00100020

080066b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 030a 	bic.w	r3, r3, #10
 80066f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f023 0210 	bic.w	r2, r3, #16
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800673c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800674e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800678c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	021a      	lsls	r2, r3, #8
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	431a      	orrs	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4313      	orrs	r3, r2
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	609a      	str	r2, [r3, #8]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2201      	movs	r2, #1
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	401a      	ands	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006810:	2302      	movs	r3, #2
 8006812:	e06d      	b.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a30      	ldr	r2, [pc, #192]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2f      	ldr	r2, [pc, #188]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d108      	bne.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800684e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006860:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a20      	ldr	r2, [pc, #128]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d022      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006886:	d01d      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1d      	ldr	r2, [pc, #116]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1c      	ldr	r2, [pc, #112]	@ (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1a      	ldr	r2, [pc, #104]	@ (800690c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a16      	ldr	r2, [pc, #88]	@ (8006910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a15      	ldr	r2, [pc, #84]	@ (8006914 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10c      	bne.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40010000 	.word	0x40010000
 8006900:	40010400 	.word	0x40010400
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40001800 	.word	0x40001800
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006930:	2302      	movs	r3, #2
 8006932:	e065      	b.n	8006a00 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	041b      	lsls	r3, r3, #16
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a14      	ldr	r2, [pc, #80]	@ (8006a10 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d115      	bne.n	80069ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	051b      	lsls	r3, r3, #20
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e042      	b.n	8006aac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fa fc11 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2224      	movs	r2, #36	@ 0x24
 8006a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fd90 	bl	8007584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f825 	bl	8006ab4 <UART_SetConfig>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e01b      	b.n	8006aac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fe0f 	bl	80076c8 <UART_CheckIdleState>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab8:	b092      	sub	sp, #72	@ 0x48
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	431a      	orrs	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	4bbe      	ldr	r3, [pc, #760]	@ (8006ddc <UART_SetConfig+0x328>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4ab3      	ldr	r2, [pc, #716]	@ (8006de0 <UART_SetConfig+0x32c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	4baf      	ldr	r3, [pc, #700]	@ (8006de4 <UART_SetConfig+0x330>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	f023 010f 	bic.w	r1, r3, #15
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4aa6      	ldr	r2, [pc, #664]	@ (8006de8 <UART_SetConfig+0x334>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d177      	bne.n	8006c44 <UART_SetConfig+0x190>
 8006b54:	4ba5      	ldr	r3, [pc, #660]	@ (8006dec <UART_SetConfig+0x338>)
 8006b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b5c:	2b28      	cmp	r3, #40	@ 0x28
 8006b5e:	d86d      	bhi.n	8006c3c <UART_SetConfig+0x188>
 8006b60:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <UART_SetConfig+0xb4>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006c0d 	.word	0x08006c0d
 8006b6c:	08006c3d 	.word	0x08006c3d
 8006b70:	08006c3d 	.word	0x08006c3d
 8006b74:	08006c3d 	.word	0x08006c3d
 8006b78:	08006c3d 	.word	0x08006c3d
 8006b7c:	08006c3d 	.word	0x08006c3d
 8006b80:	08006c3d 	.word	0x08006c3d
 8006b84:	08006c3d 	.word	0x08006c3d
 8006b88:	08006c15 	.word	0x08006c15
 8006b8c:	08006c3d 	.word	0x08006c3d
 8006b90:	08006c3d 	.word	0x08006c3d
 8006b94:	08006c3d 	.word	0x08006c3d
 8006b98:	08006c3d 	.word	0x08006c3d
 8006b9c:	08006c3d 	.word	0x08006c3d
 8006ba0:	08006c3d 	.word	0x08006c3d
 8006ba4:	08006c3d 	.word	0x08006c3d
 8006ba8:	08006c1d 	.word	0x08006c1d
 8006bac:	08006c3d 	.word	0x08006c3d
 8006bb0:	08006c3d 	.word	0x08006c3d
 8006bb4:	08006c3d 	.word	0x08006c3d
 8006bb8:	08006c3d 	.word	0x08006c3d
 8006bbc:	08006c3d 	.word	0x08006c3d
 8006bc0:	08006c3d 	.word	0x08006c3d
 8006bc4:	08006c3d 	.word	0x08006c3d
 8006bc8:	08006c25 	.word	0x08006c25
 8006bcc:	08006c3d 	.word	0x08006c3d
 8006bd0:	08006c3d 	.word	0x08006c3d
 8006bd4:	08006c3d 	.word	0x08006c3d
 8006bd8:	08006c3d 	.word	0x08006c3d
 8006bdc:	08006c3d 	.word	0x08006c3d
 8006be0:	08006c3d 	.word	0x08006c3d
 8006be4:	08006c3d 	.word	0x08006c3d
 8006be8:	08006c2d 	.word	0x08006c2d
 8006bec:	08006c3d 	.word	0x08006c3d
 8006bf0:	08006c3d 	.word	0x08006c3d
 8006bf4:	08006c3d 	.word	0x08006c3d
 8006bf8:	08006c3d 	.word	0x08006c3d
 8006bfc:	08006c3d 	.word	0x08006c3d
 8006c00:	08006c3d 	.word	0x08006c3d
 8006c04:	08006c3d 	.word	0x08006c3d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e222      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e21e      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e21a      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	e216      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c32:	e212      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c34:	2340      	movs	r3, #64	@ 0x40
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3a:	e20e      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c3c:	2380      	movs	r3, #128	@ 0x80
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c42:	e20a      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a69      	ldr	r2, [pc, #420]	@ (8006df0 <UART_SetConfig+0x33c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d130      	bne.n	8006cb0 <UART_SetConfig+0x1fc>
 8006c4e:	4b67      	ldr	r3, [pc, #412]	@ (8006dec <UART_SetConfig+0x338>)
 8006c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	d826      	bhi.n	8006ca8 <UART_SetConfig+0x1f4>
 8006c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <UART_SetConfig+0x1ac>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c79 	.word	0x08006c79
 8006c64:	08006c81 	.word	0x08006c81
 8006c68:	08006c89 	.word	0x08006c89
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006c99 	.word	0x08006c99
 8006c74:	08006ca1 	.word	0x08006ca1
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e1ec      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e1e8      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e1e4      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e1e0      	b.n	800705a <UART_SetConfig+0x5a6>
 8006c98:	2320      	movs	r3, #32
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e1dc      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ca0:	2340      	movs	r3, #64	@ 0x40
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e1d8      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ca8:	2380      	movs	r3, #128	@ 0x80
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e1d4      	b.n	800705a <UART_SetConfig+0x5a6>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8006df4 <UART_SetConfig+0x340>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d130      	bne.n	8006d1c <UART_SetConfig+0x268>
 8006cba:	4b4c      	ldr	r3, [pc, #304]	@ (8006dec <UART_SetConfig+0x338>)
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d826      	bhi.n	8006d14 <UART_SetConfig+0x260>
 8006cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <UART_SetConfig+0x218>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006ce5 	.word	0x08006ce5
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d05 	.word	0x08006d05
 8006ce0:	08006d0d 	.word	0x08006d0d
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cea:	e1b6      	b.n	800705a <UART_SetConfig+0x5a6>
 8006cec:	2304      	movs	r3, #4
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e1b2      	b.n	800705a <UART_SetConfig+0x5a6>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e1ae      	b.n	800705a <UART_SetConfig+0x5a6>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d02:	e1aa      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d04:	2320      	movs	r3, #32
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0a:	e1a6      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d0c:	2340      	movs	r3, #64	@ 0x40
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d12:	e1a2      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1a:	e19e      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a35      	ldr	r2, [pc, #212]	@ (8006df8 <UART_SetConfig+0x344>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d130      	bne.n	8006d88 <UART_SetConfig+0x2d4>
 8006d26:	4b31      	ldr	r3, [pc, #196]	@ (8006dec <UART_SetConfig+0x338>)
 8006d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d826      	bhi.n	8006d80 <UART_SetConfig+0x2cc>
 8006d32:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <UART_SetConfig+0x284>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d56:	e180      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5e:	e17c      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d66:	e178      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6e:	e174      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d70:	2320      	movs	r3, #32
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d76:	e170      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d78:	2340      	movs	r3, #64	@ 0x40
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7e:	e16c      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d80:	2380      	movs	r3, #128	@ 0x80
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d86:	e168      	b.n	800705a <UART_SetConfig+0x5a6>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dfc <UART_SetConfig+0x348>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d142      	bne.n	8006e18 <UART_SetConfig+0x364>
 8006d92:	4b16      	ldr	r3, [pc, #88]	@ (8006dec <UART_SetConfig+0x338>)
 8006d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d838      	bhi.n	8006e10 <UART_SetConfig+0x35c>
 8006d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0x2f0>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006dc5 	.word	0x08006dc5
 8006dac:	08006dcd 	.word	0x08006dcd
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006e01 	.word	0x08006e01
 8006db8:	08006e09 	.word	0x08006e09
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc2:	e14a      	b.n	800705a <UART_SetConfig+0x5a6>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dca:	e146      	b.n	800705a <UART_SetConfig+0x5a6>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd2:	e142      	b.n	800705a <UART_SetConfig+0x5a6>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dda:	e13e      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ddc:	cfff69f3 	.word	0xcfff69f3
 8006de0:	58000c00 	.word	0x58000c00
 8006de4:	11fff4ff 	.word	0x11fff4ff
 8006de8:	40011000 	.word	0x40011000
 8006dec:	58024400 	.word	0x58024400
 8006df0:	40004400 	.word	0x40004400
 8006df4:	40004800 	.word	0x40004800
 8006df8:	40004c00 	.word	0x40004c00
 8006dfc:	40005000 	.word	0x40005000
 8006e00:	2320      	movs	r3, #32
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e128      	b.n	800705a <UART_SetConfig+0x5a6>
 8006e08:	2340      	movs	r3, #64	@ 0x40
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e124      	b.n	800705a <UART_SetConfig+0x5a6>
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e120      	b.n	800705a <UART_SetConfig+0x5a6>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4acb      	ldr	r2, [pc, #812]	@ (800714c <UART_SetConfig+0x698>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d176      	bne.n	8006f10 <UART_SetConfig+0x45c>
 8006e22:	4bcb      	ldr	r3, [pc, #812]	@ (8007150 <UART_SetConfig+0x69c>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e2a:	2b28      	cmp	r3, #40	@ 0x28
 8006e2c:	d86c      	bhi.n	8006f08 <UART_SetConfig+0x454>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x380>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006ed9 	.word	0x08006ed9
 8006e38:	08006f09 	.word	0x08006f09
 8006e3c:	08006f09 	.word	0x08006f09
 8006e40:	08006f09 	.word	0x08006f09
 8006e44:	08006f09 	.word	0x08006f09
 8006e48:	08006f09 	.word	0x08006f09
 8006e4c:	08006f09 	.word	0x08006f09
 8006e50:	08006f09 	.word	0x08006f09
 8006e54:	08006ee1 	.word	0x08006ee1
 8006e58:	08006f09 	.word	0x08006f09
 8006e5c:	08006f09 	.word	0x08006f09
 8006e60:	08006f09 	.word	0x08006f09
 8006e64:	08006f09 	.word	0x08006f09
 8006e68:	08006f09 	.word	0x08006f09
 8006e6c:	08006f09 	.word	0x08006f09
 8006e70:	08006f09 	.word	0x08006f09
 8006e74:	08006ee9 	.word	0x08006ee9
 8006e78:	08006f09 	.word	0x08006f09
 8006e7c:	08006f09 	.word	0x08006f09
 8006e80:	08006f09 	.word	0x08006f09
 8006e84:	08006f09 	.word	0x08006f09
 8006e88:	08006f09 	.word	0x08006f09
 8006e8c:	08006f09 	.word	0x08006f09
 8006e90:	08006f09 	.word	0x08006f09
 8006e94:	08006ef1 	.word	0x08006ef1
 8006e98:	08006f09 	.word	0x08006f09
 8006e9c:	08006f09 	.word	0x08006f09
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006f09 	.word	0x08006f09
 8006ea8:	08006f09 	.word	0x08006f09
 8006eac:	08006f09 	.word	0x08006f09
 8006eb0:	08006f09 	.word	0x08006f09
 8006eb4:	08006ef9 	.word	0x08006ef9
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	08006f09 	.word	0x08006f09
 8006ec0:	08006f09 	.word	0x08006f09
 8006ec4:	08006f09 	.word	0x08006f09
 8006ec8:	08006f09 	.word	0x08006f09
 8006ecc:	08006f09 	.word	0x08006f09
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006f01 	.word	0x08006f01
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e0bc      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e0b8      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e0b4      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef6:	e0b0      	b.n	800705a <UART_SetConfig+0x5a6>
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efe:	e0ac      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f00:	2340      	movs	r3, #64	@ 0x40
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f06:	e0a8      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f08:	2380      	movs	r3, #128	@ 0x80
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e0a4      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a8f      	ldr	r2, [pc, #572]	@ (8007154 <UART_SetConfig+0x6a0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d130      	bne.n	8006f7c <UART_SetConfig+0x4c8>
 8006f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8007150 <UART_SetConfig+0x69c>)
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d826      	bhi.n	8006f74 <UART_SetConfig+0x4c0>
 8006f26:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <UART_SetConfig+0x478>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f45 	.word	0x08006f45
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	08006f55 	.word	0x08006f55
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f65 	.word	0x08006f65
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e086      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e082      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e07e      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f62:	e07a      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f64:	2320      	movs	r3, #32
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6a:	e076      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f6c:	2340      	movs	r3, #64	@ 0x40
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e072      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f74:	2380      	movs	r3, #128	@ 0x80
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e06e      	b.n	800705a <UART_SetConfig+0x5a6>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a75      	ldr	r2, [pc, #468]	@ (8007158 <UART_SetConfig+0x6a4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d130      	bne.n	8006fe8 <UART_SetConfig+0x534>
 8006f86:	4b72      	ldr	r3, [pc, #456]	@ (8007150 <UART_SetConfig+0x69c>)
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d826      	bhi.n	8006fe0 <UART_SetConfig+0x52c>
 8006f92:	a201      	add	r2, pc, #4	@ (adr r2, 8006f98 <UART_SetConfig+0x4e4>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fb1 	.word	0x08006fb1
 8006f9c:	08006fb9 	.word	0x08006fb9
 8006fa0:	08006fc1 	.word	0x08006fc1
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb6:	e050      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e04c      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e048      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e044      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd6:	e040      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fd8:	2340      	movs	r3, #64	@ 0x40
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fde:	e03c      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe6:	e038      	b.n	800705a <UART_SetConfig+0x5a6>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a5b      	ldr	r2, [pc, #364]	@ (800715c <UART_SetConfig+0x6a8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d130      	bne.n	8007054 <UART_SetConfig+0x5a0>
 8006ff2:	4b57      	ldr	r3, [pc, #348]	@ (8007150 <UART_SetConfig+0x69c>)
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d826      	bhi.n	800704c <UART_SetConfig+0x598>
 8006ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <UART_SetConfig+0x550>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	0800701d 	.word	0x0800701d
 8007008:	08007025 	.word	0x08007025
 800700c:	0800702d 	.word	0x0800702d
 8007010:	08007035 	.word	0x08007035
 8007014:	0800703d 	.word	0x0800703d
 8007018:	08007045 	.word	0x08007045
 800701c:	2302      	movs	r3, #2
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007022:	e01a      	b.n	800705a <UART_SetConfig+0x5a6>
 8007024:	2304      	movs	r3, #4
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e016      	b.n	800705a <UART_SetConfig+0x5a6>
 800702c:	2308      	movs	r3, #8
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e012      	b.n	800705a <UART_SetConfig+0x5a6>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703a:	e00e      	b.n	800705a <UART_SetConfig+0x5a6>
 800703c:	2320      	movs	r3, #32
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007042:	e00a      	b.n	800705a <UART_SetConfig+0x5a6>
 8007044:	2340      	movs	r3, #64	@ 0x40
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704a:	e006      	b.n	800705a <UART_SetConfig+0x5a6>
 800704c:	2380      	movs	r3, #128	@ 0x80
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007052:	e002      	b.n	800705a <UART_SetConfig+0x5a6>
 8007054:	2380      	movs	r3, #128	@ 0x80
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a3f      	ldr	r2, [pc, #252]	@ (800715c <UART_SetConfig+0x6a8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	f040 80f8 	bne.w	8007256 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007066:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800706a:	2b20      	cmp	r3, #32
 800706c:	dc46      	bgt.n	80070fc <UART_SetConfig+0x648>
 800706e:	2b02      	cmp	r3, #2
 8007070:	f2c0 8082 	blt.w	8007178 <UART_SetConfig+0x6c4>
 8007074:	3b02      	subs	r3, #2
 8007076:	2b1e      	cmp	r3, #30
 8007078:	d87e      	bhi.n	8007178 <UART_SetConfig+0x6c4>
 800707a:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <UART_SetConfig+0x5cc>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	08007103 	.word	0x08007103
 8007084:	08007179 	.word	0x08007179
 8007088:	0800710b 	.word	0x0800710b
 800708c:	08007179 	.word	0x08007179
 8007090:	08007179 	.word	0x08007179
 8007094:	08007179 	.word	0x08007179
 8007098:	0800711b 	.word	0x0800711b
 800709c:	08007179 	.word	0x08007179
 80070a0:	08007179 	.word	0x08007179
 80070a4:	08007179 	.word	0x08007179
 80070a8:	08007179 	.word	0x08007179
 80070ac:	08007179 	.word	0x08007179
 80070b0:	08007179 	.word	0x08007179
 80070b4:	08007179 	.word	0x08007179
 80070b8:	0800712b 	.word	0x0800712b
 80070bc:	08007179 	.word	0x08007179
 80070c0:	08007179 	.word	0x08007179
 80070c4:	08007179 	.word	0x08007179
 80070c8:	08007179 	.word	0x08007179
 80070cc:	08007179 	.word	0x08007179
 80070d0:	08007179 	.word	0x08007179
 80070d4:	08007179 	.word	0x08007179
 80070d8:	08007179 	.word	0x08007179
 80070dc:	08007179 	.word	0x08007179
 80070e0:	08007179 	.word	0x08007179
 80070e4:	08007179 	.word	0x08007179
 80070e8:	08007179 	.word	0x08007179
 80070ec:	08007179 	.word	0x08007179
 80070f0:	08007179 	.word	0x08007179
 80070f4:	08007179 	.word	0x08007179
 80070f8:	0800716b 	.word	0x0800716b
 80070fc:	2b40      	cmp	r3, #64	@ 0x40
 80070fe:	d037      	beq.n	8007170 <UART_SetConfig+0x6bc>
 8007100:	e03a      	b.n	8007178 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007102:	f7fd fd53 	bl	8004bac <HAL_RCCEx_GetD3PCLK1Freq>
 8007106:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007108:	e03c      	b.n	8007184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800710e:	4618      	mov	r0, r3
 8007110:	f7fd fd62 	bl	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007118:	e034      	b.n	8007184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711a:	f107 0318 	add.w	r3, r7, #24
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd feae 	bl	8004e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007128:	e02c      	b.n	8007184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800712a:	4b09      	ldr	r3, [pc, #36]	@ (8007150 <UART_SetConfig+0x69c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d016      	beq.n	8007164 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007136:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <UART_SetConfig+0x69c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	08db      	lsrs	r3, r3, #3
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	4a07      	ldr	r2, [pc, #28]	@ (8007160 <UART_SetConfig+0x6ac>)
 8007142:	fa22 f303 	lsr.w	r3, r2, r3
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007148:	e01c      	b.n	8007184 <UART_SetConfig+0x6d0>
 800714a:	bf00      	nop
 800714c:	40011400 	.word	0x40011400
 8007150:	58024400 	.word	0x58024400
 8007154:	40007800 	.word	0x40007800
 8007158:	40007c00 	.word	0x40007c00
 800715c:	58000c00 	.word	0x58000c00
 8007160:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007164:	4b9d      	ldr	r3, [pc, #628]	@ (80073dc <UART_SetConfig+0x928>)
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007168:	e00c      	b.n	8007184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800716a:	4b9d      	ldr	r3, [pc, #628]	@ (80073e0 <UART_SetConfig+0x92c>)
 800716c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800716e:	e009      	b.n	8007184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007170:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007176:	e005      	b.n	8007184 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007182:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 81de 	beq.w	8007548 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	4a94      	ldr	r2, [pc, #592]	@ (80073e4 <UART_SetConfig+0x930>)
 8007192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007196:	461a      	mov	r2, r3
 8007198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719a:	fbb3 f3f2 	udiv	r3, r3, r2
 800719e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d305      	bcc.n	80071bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d903      	bls.n	80071c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80071c2:	e1c1      	b.n	8007548 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c6:	2200      	movs	r2, #0
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	60fa      	str	r2, [r7, #12]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	4a84      	ldr	r2, [pc, #528]	@ (80073e4 <UART_SetConfig+0x930>)
 80071d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2200      	movs	r2, #0
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071e6:	f7f9 f877 	bl	80002d8 <__aeabi_uldivmod>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	020b      	lsls	r3, r1, #8
 80071fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007200:	0202      	lsls	r2, r0, #8
 8007202:	6979      	ldr	r1, [r7, #20]
 8007204:	6849      	ldr	r1, [r1, #4]
 8007206:	0849      	lsrs	r1, r1, #1
 8007208:	2000      	movs	r0, #0
 800720a:	460c      	mov	r4, r1
 800720c:	4605      	mov	r5, r0
 800720e:	eb12 0804 	adds.w	r8, r2, r4
 8007212:	eb43 0905 	adc.w	r9, r3, r5
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	469a      	mov	sl, r3
 800721e:	4693      	mov	fp, r2
 8007220:	4652      	mov	r2, sl
 8007222:	465b      	mov	r3, fp
 8007224:	4640      	mov	r0, r8
 8007226:	4649      	mov	r1, r9
 8007228:	f7f9 f856 	bl	80002d8 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4613      	mov	r3, r2
 8007232:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800723a:	d308      	bcc.n	800724e <UART_SetConfig+0x79a>
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007242:	d204      	bcs.n	800724e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800724a:	60da      	str	r2, [r3, #12]
 800724c:	e17c      	b.n	8007548 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007254:	e178      	b.n	8007548 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800725e:	f040 80c5 	bne.w	80073ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007262:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007266:	2b20      	cmp	r3, #32
 8007268:	dc48      	bgt.n	80072fc <UART_SetConfig+0x848>
 800726a:	2b00      	cmp	r3, #0
 800726c:	db7b      	blt.n	8007366 <UART_SetConfig+0x8b2>
 800726e:	2b20      	cmp	r3, #32
 8007270:	d879      	bhi.n	8007366 <UART_SetConfig+0x8b2>
 8007272:	a201      	add	r2, pc, #4	@ (adr r2, 8007278 <UART_SetConfig+0x7c4>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007303 	.word	0x08007303
 800727c:	0800730b 	.word	0x0800730b
 8007280:	08007367 	.word	0x08007367
 8007284:	08007367 	.word	0x08007367
 8007288:	08007313 	.word	0x08007313
 800728c:	08007367 	.word	0x08007367
 8007290:	08007367 	.word	0x08007367
 8007294:	08007367 	.word	0x08007367
 8007298:	08007323 	.word	0x08007323
 800729c:	08007367 	.word	0x08007367
 80072a0:	08007367 	.word	0x08007367
 80072a4:	08007367 	.word	0x08007367
 80072a8:	08007367 	.word	0x08007367
 80072ac:	08007367 	.word	0x08007367
 80072b0:	08007367 	.word	0x08007367
 80072b4:	08007367 	.word	0x08007367
 80072b8:	08007333 	.word	0x08007333
 80072bc:	08007367 	.word	0x08007367
 80072c0:	08007367 	.word	0x08007367
 80072c4:	08007367 	.word	0x08007367
 80072c8:	08007367 	.word	0x08007367
 80072cc:	08007367 	.word	0x08007367
 80072d0:	08007367 	.word	0x08007367
 80072d4:	08007367 	.word	0x08007367
 80072d8:	08007367 	.word	0x08007367
 80072dc:	08007367 	.word	0x08007367
 80072e0:	08007367 	.word	0x08007367
 80072e4:	08007367 	.word	0x08007367
 80072e8:	08007367 	.word	0x08007367
 80072ec:	08007367 	.word	0x08007367
 80072f0:	08007367 	.word	0x08007367
 80072f4:	08007367 	.word	0x08007367
 80072f8:	08007359 	.word	0x08007359
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d02e      	beq.n	800735e <UART_SetConfig+0x8aa>
 8007300:	e031      	b.n	8007366 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007302:	f7fc fa1d 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8007306:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007308:	e033      	b.n	8007372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800730a:	f7fc fa2f 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 800730e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007310:	e02f      	b.n	8007372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007316:	4618      	mov	r0, r3
 8007318:	f7fd fc5e 	bl	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007320:	e027      	b.n	8007372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007322:	f107 0318 	add.w	r3, r7, #24
 8007326:	4618      	mov	r0, r3
 8007328:	f7fd fdaa 	bl	8004e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007330:	e01f      	b.n	8007372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007332:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <UART_SetConfig+0x934>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800733e:	4b2a      	ldr	r3, [pc, #168]	@ (80073e8 <UART_SetConfig+0x934>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	08db      	lsrs	r3, r3, #3
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	4a24      	ldr	r2, [pc, #144]	@ (80073dc <UART_SetConfig+0x928>)
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007350:	e00f      	b.n	8007372 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007352:	4b22      	ldr	r3, [pc, #136]	@ (80073dc <UART_SetConfig+0x928>)
 8007354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007356:	e00c      	b.n	8007372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007358:	4b21      	ldr	r3, [pc, #132]	@ (80073e0 <UART_SetConfig+0x92c>)
 800735a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800735c:	e009      	b.n	8007372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007364:	e005      	b.n	8007372 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80e7 	beq.w	8007548 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737e:	4a19      	ldr	r2, [pc, #100]	@ (80073e4 <UART_SetConfig+0x930>)
 8007380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007384:	461a      	mov	r2, r3
 8007386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007388:	fbb3 f3f2 	udiv	r3, r3, r2
 800738c:	005a      	lsls	r2, r3, #1
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	441a      	add	r2, r3
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d916      	bls.n	80073d4 <UART_SetConfig+0x920>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ac:	d212      	bcs.n	80073d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f023 030f 	bic.w	r3, r3, #15
 80073b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073c6:	4313      	orrs	r3, r2
 80073c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	e0b9      	b.n	8007548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073da:	e0b5      	b.n	8007548 <UART_SetConfig+0xa94>
 80073dc:	03d09000 	.word	0x03d09000
 80073e0:	003d0900 	.word	0x003d0900
 80073e4:	0800825c 	.word	0x0800825c
 80073e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80073ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	dc49      	bgt.n	8007488 <UART_SetConfig+0x9d4>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	db7c      	blt.n	80074f2 <UART_SetConfig+0xa3e>
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d87a      	bhi.n	80074f2 <UART_SetConfig+0xa3e>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x950>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	0800748f 	.word	0x0800748f
 8007408:	08007497 	.word	0x08007497
 800740c:	080074f3 	.word	0x080074f3
 8007410:	080074f3 	.word	0x080074f3
 8007414:	0800749f 	.word	0x0800749f
 8007418:	080074f3 	.word	0x080074f3
 800741c:	080074f3 	.word	0x080074f3
 8007420:	080074f3 	.word	0x080074f3
 8007424:	080074af 	.word	0x080074af
 8007428:	080074f3 	.word	0x080074f3
 800742c:	080074f3 	.word	0x080074f3
 8007430:	080074f3 	.word	0x080074f3
 8007434:	080074f3 	.word	0x080074f3
 8007438:	080074f3 	.word	0x080074f3
 800743c:	080074f3 	.word	0x080074f3
 8007440:	080074f3 	.word	0x080074f3
 8007444:	080074bf 	.word	0x080074bf
 8007448:	080074f3 	.word	0x080074f3
 800744c:	080074f3 	.word	0x080074f3
 8007450:	080074f3 	.word	0x080074f3
 8007454:	080074f3 	.word	0x080074f3
 8007458:	080074f3 	.word	0x080074f3
 800745c:	080074f3 	.word	0x080074f3
 8007460:	080074f3 	.word	0x080074f3
 8007464:	080074f3 	.word	0x080074f3
 8007468:	080074f3 	.word	0x080074f3
 800746c:	080074f3 	.word	0x080074f3
 8007470:	080074f3 	.word	0x080074f3
 8007474:	080074f3 	.word	0x080074f3
 8007478:	080074f3 	.word	0x080074f3
 800747c:	080074f3 	.word	0x080074f3
 8007480:	080074f3 	.word	0x080074f3
 8007484:	080074e5 	.word	0x080074e5
 8007488:	2b40      	cmp	r3, #64	@ 0x40
 800748a:	d02e      	beq.n	80074ea <UART_SetConfig+0xa36>
 800748c:	e031      	b.n	80074f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748e:	f7fc f957 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8007492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007494:	e033      	b.n	80074fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007496:	f7fc f969 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 800749a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800749c:	e02f      	b.n	80074fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fd fb98 	bl	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ac:	e027      	b.n	80074fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ae:	f107 0318 	add.w	r3, r7, #24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd fce4 	bl	8004e80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074bc:	e01f      	b.n	80074fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074be:	4b2d      	ldr	r3, [pc, #180]	@ (8007574 <UART_SetConfig+0xac0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007574 <UART_SetConfig+0xac0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	08db      	lsrs	r3, r3, #3
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	4a28      	ldr	r2, [pc, #160]	@ (8007578 <UART_SetConfig+0xac4>)
 80074d6:	fa22 f303 	lsr.w	r3, r2, r3
 80074da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074dc:	e00f      	b.n	80074fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80074de:	4b26      	ldr	r3, [pc, #152]	@ (8007578 <UART_SetConfig+0xac4>)
 80074e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e2:	e00c      	b.n	80074fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074e4:	4b25      	ldr	r3, [pc, #148]	@ (800757c <UART_SetConfig+0xac8>)
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e8:	e009      	b.n	80074fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f0:	e005      	b.n	80074fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074fc:	bf00      	nop
    }

    if (pclk != 0U)
 80074fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d021      	beq.n	8007548 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <UART_SetConfig+0xacc>)
 800750a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800750e:	461a      	mov	r2, r3
 8007510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007512:	fbb3 f2f2 	udiv	r2, r3, r2
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	441a      	add	r2, r3
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	2b0f      	cmp	r3, #15
 800752c:	d909      	bls.n	8007542 <UART_SetConfig+0xa8e>
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d205      	bcs.n	8007542 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	b29a      	uxth	r2, r3
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60da      	str	r2, [r3, #12]
 8007540:	e002      	b.n	8007548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2201      	movs	r2, #1
 800754c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2201      	movs	r2, #1
 8007554:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2200      	movs	r2, #0
 800755c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2200      	movs	r2, #0
 8007562:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007564:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007568:	4618      	mov	r0, r3
 800756a:	3748      	adds	r7, #72	@ 0x48
 800756c:	46bd      	mov	sp, r7
 800756e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007572:	bf00      	nop
 8007574:	58024400 	.word	0x58024400
 8007578:	03d09000 	.word	0x03d09000
 800757c:	003d0900 	.word	0x003d0900
 8007580:	0800825c 	.word	0x0800825c

08007584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01a      	beq.n	800769a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007682:	d10a      	bne.n	800769a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	605a      	str	r2, [r3, #4]
  }
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b098      	sub	sp, #96	@ 0x60
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076d8:	f7f9 ff98 	bl	800160c <HAL_GetTick>
 80076dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d12f      	bne.n	800774c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f4:	2200      	movs	r2, #0
 80076f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f88e 	bl	800781c <UART_WaitOnFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d022      	beq.n	800774c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771a:	653b      	str	r3, [r7, #80]	@ 0x50
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007724:	647b      	str	r3, [r7, #68]	@ 0x44
 8007726:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800772a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e063      	b.n	8007814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d149      	bne.n	80077ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800775a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007762:	2200      	movs	r2, #0
 8007764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f857 	bl	800781c <UART_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d03c      	beq.n	80077ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	623b      	str	r3, [r7, #32]
   return(result);
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007792:	633b      	str	r3, [r7, #48]	@ 0x30
 8007794:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e6      	bne.n	8007774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3308      	adds	r3, #8
 80077ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c6:	61fa      	str	r2, [r7, #28]
 80077c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	69b9      	ldr	r1, [r7, #24]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	617b      	str	r3, [r7, #20]
   return(result);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e5      	bne.n	80077a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e012      	b.n	8007814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3758      	adds	r7, #88	@ 0x58
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800782c:	e04f      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d04b      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007836:	f7f9 fee9 	bl	800160c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <UART_WaitOnFlagUntilTimeout+0x30>
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e04e      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d037      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b80      	cmp	r3, #128	@ 0x80
 8007862:	d034      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b40      	cmp	r3, #64	@ 0x40
 8007868:	d031      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b08      	cmp	r3, #8
 8007876:	d110      	bne.n	800789a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2208      	movs	r2, #8
 800787e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f839 	bl	80078f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2208      	movs	r2, #8
 800788a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e029      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a8:	d111      	bne.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f81f 	bl	80078f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e00f      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	bf0c      	ite	eq
 80078de:	2301      	moveq	r3, #1
 80078e0:	2300      	movne	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d0a0      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b095      	sub	sp, #84	@ 0x54
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007920:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e6      	bne.n	8007900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	61fb      	str	r3, [r7, #28]
   return(result);
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <UART_EndRxTransfer+0xc8>)
 8007946:	4013      	ands	r3, r2
 8007948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e5      	bne.n	8007932 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796a:	2b01      	cmp	r3, #1
 800796c:	d118      	bne.n	80079a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	60bb      	str	r3, [r7, #8]
   return(result);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f023 0310 	bic.w	r3, r3, #16
 8007982:	647b      	str	r3, [r7, #68]	@ 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798c:	61bb      	str	r3, [r7, #24]
 800798e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6979      	ldr	r1, [r7, #20]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	613b      	str	r3, [r7, #16]
   return(result);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e6      	bne.n	800796e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079b4:	bf00      	nop
 80079b6:	3754      	adds	r7, #84	@ 0x54
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	effffffe 	.word	0xeffffffe

080079c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d101      	bne.n	80079da <HAL_UARTEx_DisableFifoMode+0x16>
 80079d6:	2302      	movs	r3, #2
 80079d8:	e027      	b.n	8007a2a <HAL_UARTEx_DisableFifoMode+0x66>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2224      	movs	r2, #36	@ 0x24
 80079e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e02d      	b.n	8007aaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2224      	movs	r2, #36	@ 0x24
 8007a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0201 	bic.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f850 	bl	8007b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e02d      	b.n	8007b26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2224      	movs	r2, #36	@ 0x24
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f812 	bl	8007b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b50:	e031      	b.n	8007bb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b52:	2310      	movs	r3, #16
 8007b54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b56:	2310      	movs	r3, #16
 8007b58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	0e5b      	lsrs	r3, r3, #25
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	0f5b      	lsrs	r3, r3, #29
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	7b3a      	ldrb	r2, [r7, #12]
 8007b7e:	4911      	ldr	r1, [pc, #68]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8007b80:	5c8a      	ldrb	r2, [r1, r2]
 8007b82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b86:	7b3a      	ldrb	r2, [r7, #12]
 8007b88:	490f      	ldr	r1, [pc, #60]	@ (8007bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8007b8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	7b7a      	ldrb	r2, [r7, #13]
 8007b9c:	4909      	ldr	r1, [pc, #36]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8007b9e:	5c8a      	ldrb	r2, [r1, r2]
 8007ba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ba4:	7b7a      	ldrb	r2, [r7, #13]
 8007ba6:	4908      	ldr	r1, [pc, #32]	@ (8007bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007baa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	08008274 	.word	0x08008274
 8007bc8:	0800827c 	.word	0x0800827c

08007bcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bcc:	b084      	sub	sp, #16
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	f107 001c 	add.w	r0, r7, #28
 8007bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d121      	bne.n	8007c2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca8 <USB_CoreInit+0xdc>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faaa 	bl	8008178 <USB_CoreReset>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	e01b      	b.n	8007c62 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa9e 	bl	8008178 <USB_CoreReset>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c54:	e005      	b.n	8007c62 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c62:	7fbb      	ldrb	r3, [r7, #30]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d116      	bne.n	8007c96 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c76:	4b0d      	ldr	r3, [pc, #52]	@ (8007cac <USB_CoreInit+0xe0>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f043 0206 	orr.w	r2, r3, #6
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ca2:	b004      	add	sp, #16
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	ffbdffbf 	.word	0xffbdffbf
 8007cac:	03ee0000 	.word	0x03ee0000

08007cb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f023 0201 	bic.w	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d115      	bne.n	8007d20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d00:	200a      	movs	r0, #10
 8007d02:	f7f9 fc8f 	bl	8001624 <HAL_Delay>
      ms += 10U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	330a      	adds	r3, #10
 8007d0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fa25 	bl	800815c <USB_GetMode>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d01e      	beq.n	8007d56 <USB_SetCurrentMode+0x84>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d1c:	d9f0      	bls.n	8007d00 <USB_SetCurrentMode+0x2e>
 8007d1e:	e01a      	b.n	8007d56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d115      	bne.n	8007d52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d32:	200a      	movs	r0, #10
 8007d34:	f7f9 fc76 	bl	8001624 <HAL_Delay>
      ms += 10U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	330a      	adds	r3, #10
 8007d3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa0c 	bl	800815c <USB_GetMode>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <USB_SetCurrentMode+0x84>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d4e:	d9f0      	bls.n	8007d32 <USB_SetCurrentMode+0x60>
 8007d50:	e001      	b.n	8007d56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e005      	b.n	8007d62 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d5a:	d101      	bne.n	8007d60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	e009      	b.n	8007da0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	3340      	adds	r3, #64	@ 0x40
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b0e      	cmp	r3, #14
 8007da4:	d9f2      	bls.n	8007d8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007da6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d11c      	bne.n	8007de8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e005      	b.n	8007df4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d10d      	bne.n	8007e24 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f968 	bl	80080e8 <USB_SetDevSpeed>
 8007e18:	e008      	b.n	8007e2c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f963 	bl	80080e8 <USB_SetDevSpeed>
 8007e22:	e003      	b.n	8007e2c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e24:	2103      	movs	r1, #3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f95e 	bl	80080e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e2c:	2110      	movs	r1, #16
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8fa 	bl	8008028 <USB_FlushTxFifo>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f924 	bl	800808c <USB_FlushRxFifo>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e54:	461a      	mov	r2, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e60:	461a      	mov	r2, r3
 8007e62:	2300      	movs	r3, #0
 8007e64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	e043      	b.n	8007f00 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e8e:	d118      	bne.n	8007ec2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	e013      	b.n	8007ed4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	e008      	b.n	8007ed4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3301      	adds	r3, #1
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f04:	461a      	mov	r2, r3
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d3b5      	bcc.n	8007e78 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	613b      	str	r3, [r7, #16]
 8007f10:	e043      	b.n	8007f9a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f28:	d118      	bne.n	8007f5c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	e013      	b.n	8007f6e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f52:	461a      	mov	r2, r3
 8007f54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	e008      	b.n	8007f6e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	3301      	adds	r3, #1
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d3b5      	bcc.n	8007f12 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007fc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f043 0210 	orr.w	r2, r3, #16
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8008020 <USB_DevInit+0x2b4>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fe8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f043 0208 	orr.w	r2, r3, #8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ffc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008000:	2b01      	cmp	r3, #1
 8008002:	d105      	bne.n	8008010 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <USB_DevInit+0x2b8>)
 800800a:	4313      	orrs	r3, r2
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800801c:	b004      	add	sp, #16
 800801e:	4770      	bx	lr
 8008020:	803c3800 	.word	0x803c3800
 8008024:	40000004 	.word	0x40000004

08008028 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3301      	adds	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008042:	d901      	bls.n	8008048 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e01b      	b.n	8008080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	daf2      	bge.n	8008036 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	019b      	lsls	r3, r3, #6
 8008058:	f043 0220 	orr.w	r2, r3, #32
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3301      	adds	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800806c:	d901      	bls.n	8008072 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e006      	b.n	8008080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d0f0      	beq.n	8008060 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080a4:	d901      	bls.n	80080aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e018      	b.n	80080dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	daf2      	bge.n	8008098 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2210      	movs	r2, #16
 80080ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080c8:	d901      	bls.n	80080ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e006      	b.n	80080dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d0f0      	beq.n	80080bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008108:	4313      	orrs	r3, r2
 800810a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008134:	f023 0303 	bic.w	r3, r3, #3
 8008138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008148:	f043 0302 	orr.w	r3, r3, #2
 800814c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	f003 0301 	and.w	r3, r3, #1
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008190:	d901      	bls.n	8008196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e01b      	b.n	80081ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	daf2      	bge.n	8008184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f043 0201 	orr.w	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081ba:	d901      	bls.n	80081c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e006      	b.n	80081ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d0f0      	beq.n	80081ae <USB_CoreReset+0x36>

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <memset>:
 80081da:	4402      	add	r2, r0
 80081dc:	4603      	mov	r3, r0
 80081de:	4293      	cmp	r3, r2
 80081e0:	d100      	bne.n	80081e4 <memset+0xa>
 80081e2:	4770      	bx	lr
 80081e4:	f803 1b01 	strb.w	r1, [r3], #1
 80081e8:	e7f9      	b.n	80081de <memset+0x4>
	...

080081ec <__libc_init_array>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008224 <__libc_init_array+0x38>)
 80081f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008228 <__libc_init_array+0x3c>)
 80081f2:	1b64      	subs	r4, r4, r5
 80081f4:	10a4      	asrs	r4, r4, #2
 80081f6:	2600      	movs	r6, #0
 80081f8:	42a6      	cmp	r6, r4
 80081fa:	d109      	bne.n	8008210 <__libc_init_array+0x24>
 80081fc:	4d0b      	ldr	r5, [pc, #44]	@ (800822c <__libc_init_array+0x40>)
 80081fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008230 <__libc_init_array+0x44>)
 8008200:	f000 f818 	bl	8008234 <_init>
 8008204:	1b64      	subs	r4, r4, r5
 8008206:	10a4      	asrs	r4, r4, #2
 8008208:	2600      	movs	r6, #0
 800820a:	42a6      	cmp	r6, r4
 800820c:	d105      	bne.n	800821a <__libc_init_array+0x2e>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	f855 3b04 	ldr.w	r3, [r5], #4
 8008214:	4798      	blx	r3
 8008216:	3601      	adds	r6, #1
 8008218:	e7ee      	b.n	80081f8 <__libc_init_array+0xc>
 800821a:	f855 3b04 	ldr.w	r3, [r5], #4
 800821e:	4798      	blx	r3
 8008220:	3601      	adds	r6, #1
 8008222:	e7f2      	b.n	800820a <__libc_init_array+0x1e>
 8008224:	0800828c 	.word	0x0800828c
 8008228:	0800828c 	.word	0x0800828c
 800822c:	0800828c 	.word	0x0800828c
 8008230:	08008290 	.word	0x08008290

08008234 <_init>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	bf00      	nop
 8008238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823a:	bc08      	pop	{r3}
 800823c:	469e      	mov	lr, r3
 800823e:	4770      	bx	lr

08008240 <_fini>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	bf00      	nop
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr
