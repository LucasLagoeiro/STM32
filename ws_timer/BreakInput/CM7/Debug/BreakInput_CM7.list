
BreakInput_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007874  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b44  08007b44  000090d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007b44  08007b44  00008b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b4c  08007b4c  000090d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b4c  08007b4c  00008b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08007b54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007b64  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08007bc4  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006d4  240000d0  08007c24  000090d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240007a4  08007c24  000097a4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d55e  00000000  00000000  000090fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f63  00000000  00000000  0002665c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d0  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001111  00000000  00000000  0002ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b9f8  00000000  00000000  0002bca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bba3  00000000  00000000  00067699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018be18  00000000  00000000  0008323c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020f054  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005eb4  00000000  00000000  0020f098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00214f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007af4 	.word	0x08007af4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007af4 	.word	0x08007af4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b35      	ldr	r3, [pc, #212]	@ (80007d8 <main+0xe4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	61fa      	str	r2, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fac7 	bl	8000cb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fd89 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f85d 	bl	80007e4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <main+0xe4>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a29      	ldr	r2, [pc, #164]	@ (80007d8 <main+0xe4>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <main+0xe4>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 fd13 	bl	8002174 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 fd29 	bl	80021a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <main+0xe4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	61fa      	str	r2, [r7, #28]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 fa99 	bl	8000cb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fa23 	bl	8000bc8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000782:	f000 f8ad 	bl	80008e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000786:	f000 f9a1 	bl	8000acc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078a:	f000 f9eb 	bl	8000b64 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800078e:	f000 f8f3 	bl	8000978 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a2:	2340      	movs	r3, #64	@ 0x40
 80007a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a6:	2312      	movs	r3, #18
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007aa:	2302      	movs	r3, #2
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <main+0xe8>)
 80007be:	f001 fb29 	bl	8001e14 <HAL_GPIO_Init>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007c2:	2100      	movs	r1, #0
 80007c4:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <main+0xec>)
 80007c6:	f004 fd07 	bl	80051d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80007ca:	2100      	movs	r1, #0
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <main+0xec>)
 80007ce:	f005 fac7 	bl	8005d60 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <main+0xde>
 80007d6:	bf00      	nop
 80007d8:	58024400 	.word	0x58024400
 80007dc:	58020000 	.word	0x58020000
 80007e0:	240001d4 	.word	0x240001d4

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 f951 	bl	8007a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 f94b 	bl	8007a9a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f001 fe13 	bl	8002430 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	4a31      	ldr	r2, [pc, #196]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <SystemClock_Config+0xf4>)
 800081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <SystemClock_Config+0xf8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082c:	4a2b      	ldr	r2, [pc, #172]	@ (80008dc <SystemClock_Config+0xf8>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <SystemClock_Config+0xf8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000840:	bf00      	nop
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <SystemClock_Config+0xf8>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800084e:	d1f8      	bne.n	8000842 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000854:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000866:	2312      	movs	r3, #18
 8000868:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000876:	230c      	movs	r3, #12
 8000878:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800087a:	2302      	movs	r3, #2
 800087c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800087e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000882:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fe3b 	bl	8002504 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000894:	f000 fa0c 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	233f      	movs	r3, #63	@ 0x3f
 800089a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2303      	movs	r3, #3
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a8:	2340      	movs	r3, #64	@ 0x40
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fa7a 	bl	8002db8 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ca:	f000 f9f1 	bl	8000cb0 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3770      	adds	r7, #112	@ 0x70
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58000400 	.word	0x58000400
 80008dc:	58024800 	.word	0x58024800

080008e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_ETH_Init+0x80>)
 80008e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000964 <MX_ETH_Init+0x84>)
 80008e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_ETH_Init+0x88>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_ETH_Init+0x88>)
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_ETH_Init+0x88>)
 80008f8:	22e1      	movs	r2, #225	@ 0xe1
 80008fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_ETH_Init+0x88>)
 8000904:	2200      	movs	r2, #0
 8000906:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_ETH_Init+0x88>)
 800090a:	2200      	movs	r2, #0
 800090c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_ETH_Init+0x80>)
 8000910:	4a15      	ldr	r2, [pc, #84]	@ (8000968 <MX_ETH_Init+0x88>)
 8000912:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_ETH_Init+0x80>)
 8000916:	2201      	movs	r2, #1
 8000918:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_ETH_Init+0x80>)
 800091c:	4a13      	ldr	r2, [pc, #76]	@ (800096c <MX_ETH_Init+0x8c>)
 800091e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_ETH_Init+0x80>)
 8000922:	4a13      	ldr	r2, [pc, #76]	@ (8000970 <MX_ETH_Init+0x90>)
 8000924:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_ETH_Init+0x80>)
 8000928:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800092c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <MX_ETH_Init+0x80>)
 8000930:	f000 fe3c 	bl	80015ac <HAL_ETH_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 f9b9 	bl	8000cb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800093e:	2238      	movs	r2, #56	@ 0x38
 8000940:	2100      	movs	r1, #0
 8000942:	480c      	ldr	r0, [pc, #48]	@ (8000974 <MX_ETH_Init+0x94>)
 8000944:	f007 f8a9 	bl	8007a9a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_ETH_Init+0x94>)
 800094a:	2221      	movs	r2, #33	@ 0x21
 800094c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_ETH_Init+0x94>)
 8000950:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000954:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000956:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_ETH_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000124 	.word	0x24000124
 8000964:	40028000 	.word	0x40028000
 8000968:	24000798 	.word	0x24000798
 800096c:	24000070 	.word	0x24000070
 8000970:	24000010 	.word	0x24000010
 8000974:	240000ec 	.word	0x240000ec

08000978 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b098      	sub	sp, #96	@ 0x60
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800098a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	222c      	movs	r2, #44	@ 0x2c
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f007 f872 	bl	8007a9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b6:	4b43      	ldr	r3, [pc, #268]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009b8:	4a43      	ldr	r2, [pc, #268]	@ (8000ac8 <MX_TIM1_Init+0x150>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009bc:	4b41      	ldr	r3, [pc, #260]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b40      	ldr	r3, [pc, #256]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e2:	4838      	ldr	r0, [pc, #224]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 80009e4:	f004 fba0 	bl	8005128 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009ee:	f000 f95f 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a02:	4619      	mov	r1, r3
 8000a04:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 8000a06:	f005 fa6d 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a10:	f000 f94e 	bl	8000cb0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000a14:	2301      	movs	r3, #1
 8000a16:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a20:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a24:	461a      	mov	r2, r3
 8000a26:	2101      	movs	r1, #1
 8000a28:	4826      	ldr	r0, [pc, #152]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 8000a2a:	f005 fb67 	bl	80060fc <HAL_TIMEx_ConfigBreakInput>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a34:	f000 f93c 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a38:	2360      	movs	r3, #96	@ 0x60
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 32768;
 8000a3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a40:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 8000a60:	f004 fcc8 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a6a:	f000 f921 	bl	8000cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 8000aa6:	f005 faab 	bl	8006000 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000ab0:	f000 f8fe 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MX_TIM1_Init+0x14c>)
 8000ab6:	f000 fa33 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000aba:	bf00      	nop
 8000abc:	3760      	adds	r7, #96	@ 0x60
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	240001d4 	.word	0x240001d4
 8000ac8:	40010000 	.word	0x40010000

08000acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <MX_USART3_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b16:	f005 fbdc 	bl	80062d2 <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 f8c6 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b28:	f006 fbe5 	bl	80072f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f8bd 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b3a:	f006 fc1a 	bl	8007372 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f8b4 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b4a:	f006 fb9b 	bl	8007284 <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f8ac 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000220 	.word	0x24000220
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	4a16      	ldr	r2, [pc, #88]	@ (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2209      	movs	r2, #9
 8000b72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bac:	f001 fb10 	bl	80021d0 <HAL_PCD_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bb6:	f000 f87b 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	240002b4 	.word	0x240002b4
 8000bc4:	40080000 	.word	0x40080000

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	4a35      	ldr	r2, [pc, #212]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bde:	4b33      	ldr	r3, [pc, #204]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	4a26      	ldr	r2, [pc, #152]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1a:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3724      	adds	r7, #36	@ 0x24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	58024400 	.word	0x58024400

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <Error_Handler+0x8>

08000cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_MspInit+0x30>)
 8000cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc8:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_MspInit+0x30>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_MspInit+0x30>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	58024400 	.word	0x58024400

08000cf0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	@ 0x38
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a59      	ldr	r2, [pc, #356]	@ (8000e74 <HAL_ETH_MspInit+0x184>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f040 80ab 	bne.w	8000e6a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d14:	4b58      	ldr	r3, [pc, #352]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d1a:	4a57      	ldr	r2, [pc, #348]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d24:	4b54      	ldr	r3, [pc, #336]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d32:	4b51      	ldr	r3, [pc, #324]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d38:	4a4f      	ldr	r2, [pc, #316]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d42:	4b4d      	ldr	r3, [pc, #308]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d50:	4b49      	ldr	r3, [pc, #292]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d56:	4a48      	ldr	r2, [pc, #288]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d60:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b42      	ldr	r3, [pc, #264]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d74:	4a40      	ldr	r2, [pc, #256]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	4a39      	ldr	r2, [pc, #228]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9c:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db0:	4a31      	ldr	r2, [pc, #196]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dba:	4b2f      	ldr	r3, [pc, #188]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	4a2a      	ldr	r2, [pc, #168]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd8:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000de6:	2332      	movs	r3, #50	@ 0x32
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481e      	ldr	r0, [pc, #120]	@ (8000e7c <HAL_ETH_MspInit+0x18c>)
 8000e02:	f001 f807 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e06:	2386      	movs	r3, #134	@ 0x86
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e16:	230b      	movs	r3, #11
 8000e18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4817      	ldr	r0, [pc, #92]	@ (8000e80 <HAL_ETH_MspInit+0x190>)
 8000e22:	f000 fff7 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e38:	230b      	movs	r3, #11
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4810      	ldr	r0, [pc, #64]	@ (8000e84 <HAL_ETH_MspInit+0x194>)
 8000e44:	f000 ffe6 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e48:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5a:	230b      	movs	r3, #11
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <HAL_ETH_MspInit+0x198>)
 8000e66:	f000 ffd5 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3738      	adds	r7, #56	@ 0x38
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40028000 	.word	0x40028000
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58020800 	.word	0x58020800
 8000e80:	58020000 	.word	0x58020000
 8000e84:	58020400 	.word	0x58020400
 8000e88:	58021800 	.word	0x58021800

08000e8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <HAL_TIM_PWM_MspInit+0x88>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12d      	bne.n	8000f0a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000eb4:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	4a11      	ldr	r2, [pc, #68]	@ (8000f18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eea:	2340      	movs	r3, #64	@ 0x40
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eee:	2312      	movs	r3, #18
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <HAL_TIM_PWM_MspInit+0x90>)
 8000f06:	f000 ff85 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	@ 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010000 	.word	0x40010000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020000 	.word	0x58020000

08000f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d11f      	bne.n	8000f82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_TIM_MspPostInit+0x70>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	4a11      	ldr	r2, [pc, #68]	@ (8000f90 <HAL_TIM_MspPostInit+0x70>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_TIM_MspPostInit+0x70>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <HAL_TIM_MspPostInit+0x74>)
 8000f7e:	f000 ff49 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58021000 	.word	0x58021000

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	22c0      	movs	r2, #192	@ 0xc0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fd6e 	bl	8007a9a <memset>
  if(huart->Instance==USART3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <HAL_UART_MspInit+0xc8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d146      	bne.n	8001056 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc8:	f04f 0202 	mov.w	r2, #2
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fa76 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fea:	f7ff fe61 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_UART_MspInit+0xcc>)
 8000ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8001064 <HAL_UART_MspInit+0xcc>)
 8000ff6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_UART_MspInit+0xcc>)
 8001000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_UART_MspInit+0xcc>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <HAL_UART_MspInit+0xcc>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_UART_MspInit+0xcc>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800102a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800102e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001044:	2307      	movs	r3, #7
 8001046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <HAL_UART_MspInit+0xd0>)
 8001052:	f000 fedf 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	37e8      	adds	r7, #232	@ 0xe8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40004800 	.word	0x40004800
 8001064:	58024400 	.word	0x58024400
 8001068:	58020c00 	.word	0x58020c00

0800106c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ba      	sub	sp, #232	@ 0xe8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	22c0      	movs	r2, #192	@ 0xc0
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fd04 	bl	8007a9a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a38      	ldr	r2, [pc, #224]	@ (8001178 <HAL_PCD_MspInit+0x10c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d169      	bne.n	8001170 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800109c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80010ac:	2312      	movs	r3, #18
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80010b4:	2303      	movs	r3, #3
 80010b6:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80010c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010c6:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 f9fb 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80010e0:	f7ff fde6 	bl	8000cb0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010e4:	f001 f9fe 	bl	80024e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <HAL_PCD_MspInit+0x110>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	4a23      	ldr	r2, [pc, #140]	@ (800117c <HAL_PCD_MspInit+0x110>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <HAL_PCD_MspInit+0x110>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001106:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800110a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001120:	230a      	movs	r3, #10
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800112a:	4619      	mov	r1, r3
 800112c:	4814      	ldr	r0, [pc, #80]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800112e:	f000 fe71 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800114e:	f000 fe61 	bl	8001e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_PCD_MspInit+0x110>)
 8001154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_PCD_MspInit+0x110>)
 800115a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800115e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_PCD_MspInit+0x110>)
 8001164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	37e8      	adds	r7, #232	@ 0xe8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40080000 	.word	0x40080000
 800117c:	58024400 	.word	0x58024400
 8001180:	58020000 	.word	0x58020000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f89f 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800121c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e8:	f7ff f9ee 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f006 fc4b 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff fa6d 	bl	80006f4 <main>
  bx  lr
 800121a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001220:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001224:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001228:	08007b54 	.word	0x08007b54
  ldr r2, =_sbss
 800122c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001230:	240007a4 	.word	0x240007a4

08001234 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC3_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123e:	2003      	movs	r0, #3
 8001240:	f000 f982 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001244:	f001 ff6e 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_Init+0x68>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	4913      	ldr	r1, [pc, #76]	@ (80012a4 <HAL_Init+0x6c>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_Init+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_Init+0x6c>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <HAL_Init+0x70>)
 800127a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_Init+0x74>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f814 	bl	80012b0 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e002      	b.n	8001298 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fd13 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	08007b0c 	.word	0x08007b0c
 80012a8:	24000004 	.word	0x24000004
 80012ac:	24000000 	.word	0x24000000

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_InitTick+0x60>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e021      	b.n	8001308 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_InitTick+0x64>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_InitTick+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f959 	bl	8001592 <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f931 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <HAL_InitTick+0x68>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2400000c 	.word	0x2400000c
 8001314:	24000000 	.word	0x24000000
 8001318:	24000008 	.word	0x24000008

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2400000c 	.word	0x2400000c
 8001340:	240007a0 	.word	0x240007a0

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	240007a0 	.word	0x240007a0

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2400000c 	.word	0x2400000c

080013a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <HAL_GetREVID+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0c1b      	lsrs	r3, r3, #16
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	5c001000 	.word	0x5c001000

080013bc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013cc:	4904      	ldr	r1, [pc, #16]	@ (80013e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	58000400 	.word	0x58000400

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <__NVIC_SetPriorityGrouping+0x40>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	4313      	orrs	r3, r2
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <__NVIC_SetPriorityGrouping+0x40>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	05fa0000 	.word	0x05fa0000

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	@ (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	@ (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	@ 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff47 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff5e 	bl	800142c <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff90 	bl	800149c <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5f 	bl	8001448 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffb2 	bl	8001504 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e3      	b.n	8001786 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2223      	movs	r2, #35	@ 0x23
 80015cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fb8d 	bl	8000cf0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001790 <HAL_ETH_Init+0x1e4>)
 80015d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015dc:	4a6c      	ldr	r2, [pc, #432]	@ (8001790 <HAL_ETH_Init+0x1e4>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <HAL_ETH_Init+0x1e4>)
 80015e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7a1b      	ldrb	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fedd 	bl	80013bc <HAL_SYSCFG_ETHInterfaceSelect>
 8001602:	e003      	b.n	800160c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001604:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001608:	f7ff fed8 	bl	80013bc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800160c:	4b61      	ldr	r3, [pc, #388]	@ (8001794 <HAL_ETH_Init+0x1e8>)
 800160e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff fe8c 	bl	8001344 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800162e:	e011      	b.n	8001654 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001630:	f7ff fe88 	bl	8001344 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800163e:	d909      	bls.n	8001654 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2204      	movs	r2, #4
 8001644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	22e0      	movs	r2, #224	@ 0xe0
 800164c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e098      	b.n	8001786 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e4      	bne.n	8001630 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f89e 	bl	80017a8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800166c:	f001 fed4 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8001670:	4603      	mov	r3, r0
 8001672:	4a49      	ldr	r2, [pc, #292]	@ (8001798 <HAL_ETH_Init+0x1ec>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9a      	lsrs	r2, r3, #18
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3a01      	subs	r2, #1
 8001680:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fa81 	bl	8001b8c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001692:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001696:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016a6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	22e0      	movs	r2, #224	@ 0xe0
 80016c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e05d      	b.n	8001786 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016d6:	4b31      	ldr	r3, [pc, #196]	@ (800179c <HAL_ETH_Init+0x1f0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6952      	ldr	r2, [r2, #20]
 80016de:	0051      	lsls	r1, r2, #1
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ea:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fae9 	bl	8001cc6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fb2f 	bl	8001d58 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	3305      	adds	r3, #5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021a      	lsls	r2, r3, #8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	3303      	adds	r3, #3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	3302      	adds	r3, #2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001738:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001746:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001748:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_ETH_Init+0x1f4>)
 800175a:	430b      	orrs	r3, r1
 800175c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_ETH_Init+0x1f8>)
 800176e:	430b      	orrs	r3, r1
 8001770:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2210      	movs	r2, #16
 8001780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	58024400 	.word	0x58024400
 8001794:	58000400 	.word	0x58000400
 8001798:	431bde83 	.word	0x431bde83
 800179c:	ffff8001 	.word	0xffff8001
 80017a0:	0c020060 	.word	0x0c020060
 80017a4:	0c20c000 	.word	0x0c20c000

080017a8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017c2:	f001 fe29 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 80017c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001834 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d804      	bhi.n	80017da <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e022      	b.n	8001820 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	4a16      	ldr	r2, [pc, #88]	@ (8001838 <HAL_ETH_SetMDIOClockRange+0x90>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d204      	bcs.n	80017ec <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e019      	b.n	8001820 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4a13      	ldr	r2, [pc, #76]	@ (800183c <HAL_ETH_SetMDIOClockRange+0x94>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d915      	bls.n	8001820 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <HAL_ETH_SetMDIOClockRange+0x98>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d804      	bhi.n	8001806 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e00c      	b.n	8001820 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d804      	bhi.n	8001818 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e003      	b.n	8001820 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800181e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	02160ebf 	.word	0x02160ebf
 8001838:	03938700 	.word	0x03938700
 800183c:	05f5e0ff 	.word	0x05f5e0ff
 8001840:	08f0d17f 	.word	0x08f0d17f
 8001844:	0ee6b27f 	.word	0x0ee6b27f

08001848 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800185a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	791b      	ldrb	r3, [r3, #4]
 8001860:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7b1b      	ldrb	r3, [r3, #12]
 8001868:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7b5b      	ldrb	r3, [r3, #13]
 8001870:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7b9b      	ldrb	r3, [r3, #14]
 8001878:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800187a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	7bdb      	ldrb	r3, [r3, #15]
 8001880:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001882:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	7c12      	ldrb	r2, [r2, #16]
 8001888:	2a00      	cmp	r2, #0
 800188a:	d102      	bne.n	8001892 <ETH_SetMACConfig+0x4a>
 800188c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001890:	e000      	b.n	8001894 <ETH_SetMACConfig+0x4c>
 8001892:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001894:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	7c52      	ldrb	r2, [r2, #17]
 800189a:	2a00      	cmp	r2, #0
 800189c:	d102      	bne.n	80018a4 <ETH_SetMACConfig+0x5c>
 800189e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018a2:	e000      	b.n	80018a6 <ETH_SetMACConfig+0x5e>
 80018a4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7c9b      	ldrb	r3, [r3, #18]
 80018ac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018ae:	431a      	orrs	r2, r3
               macconf->Speed |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018b4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7f1b      	ldrb	r3, [r3, #28]
 80018c0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	7f5b      	ldrb	r3, [r3, #29]
 80018c8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	7f92      	ldrb	r2, [r2, #30]
 80018d0:	2a00      	cmp	r2, #0
 80018d2:	d102      	bne.n	80018da <ETH_SetMACConfig+0x92>
 80018d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d8:	e000      	b.n	80018dc <ETH_SetMACConfig+0x94>
 80018da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	7fdb      	ldrb	r3, [r3, #31]
 80018e2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	d102      	bne.n	80018f6 <ETH_SetMACConfig+0xae>
 80018f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018f4:	e000      	b.n	80018f8 <ETH_SetMACConfig+0xb0>
 80018f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018f8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001906:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001908:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b56      	ldr	r3, [pc, #344]	@ (8001a74 <ETH_SetMACConfig+0x22c>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	68f9      	ldr	r1, [r7, #12]
 8001922:	430b      	orrs	r3, r1
 8001924:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800192a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001932:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001934:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800193c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800193e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001946:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001948:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001950:	2a00      	cmp	r2, #0
 8001952:	d102      	bne.n	800195a <ETH_SetMACConfig+0x112>
 8001954:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001958:	e000      	b.n	800195c <ETH_SetMACConfig+0x114>
 800195a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800195c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <ETH_SetMACConfig+0x230>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	430b      	orrs	r3, r1
 8001978:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001980:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <ETH_SetMACConfig+0x234>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	430b      	orrs	r3, r1
 800199c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019b2:	2a00      	cmp	r2, #0
 80019b4:	d101      	bne.n	80019ba <ETH_SetMACConfig+0x172>
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	e000      	b.n	80019bc <ETH_SetMACConfig+0x174>
 80019ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019ce:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	430b      	orrs	r3, r1
 80019dc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80019e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80019ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fa:	f023 0103 	bic.w	r1, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a12:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d101      	bne.n	8001a36 <ETH_SetMACConfig+0x1ee>
 8001a32:	2240      	movs	r2, #64	@ 0x40
 8001a34:	e000      	b.n	8001a38 <ETH_SetMACConfig+0x1f0>
 8001a36:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a40:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a4a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a58:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	00048083 	.word	0x00048083
 8001a78:	c0f88000 	.word	0xc0f88000
 8001a7c:	fffffef0 	.word	0xfffffef0

08001a80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <ETH_SetDMAConfig+0xf8>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	6811      	ldr	r1, [r2, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aa6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ab2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7b1b      	ldrb	r3, [r3, #12]
 8001ab8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <ETH_SetDMAConfig+0xfc>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ad8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7b5b      	ldrb	r3, [r3, #13]
 8001ade:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <ETH_SetDMAConfig+0x100>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	68f9      	ldr	r1, [r7, #12]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b04:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7d1b      	ldrb	r3, [r3, #20]
 8001b10:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7f5b      	ldrb	r3, [r3, #29]
 8001b18:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b26:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <ETH_SetDMAConfig+0x104>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b3a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	7f1b      	ldrb	r3, [r3, #28]
 8001b42:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b54:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <ETH_SetDMAConfig+0x108>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	430b      	orrs	r3, r1
 8001b64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b68:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	ffff87fd 	.word	0xffff87fd
 8001b7c:	ffff2ffe 	.word	0xffff2ffe
 8001b80:	fffec000 	.word	0xfffec000
 8001b84:	ffc0efef 	.word	0xffc0efef
 8001b88:	7fc0ffff 	.word	0x7fc0ffff

08001b8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0a4      	sub	sp, #144	@ 0x90
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001be4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001be8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c06:	2300      	movs	r3, #0
 8001c08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c24:	2320      	movs	r3, #32
 8001c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c36:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c40:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c66:	2300      	movs	r3, #0
 8001c68:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fde6 	bl	8001848 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c80:	2301      	movs	r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c96:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ca4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001cac:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fee1 	bl	8001a80 <ETH_SetDMAConfig>
}
 8001cbe:	bf00      	nop
 8001cc0:	3790      	adds	r7, #144	@ 0x90
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e01d      	b.n	8001d10 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	3206      	adds	r2, #6
 8001d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d9de      	bls.n	8001cd4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d24:	461a      	mov	r2, r3
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d38:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d48:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e023      	b.n	8001dae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	3212      	adds	r2, #18
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d9d8      	bls.n	8001d66 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e02:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e22:	4b89      	ldr	r3, [pc, #548]	@ (8002048 <HAL_GPIO_Init+0x234>)
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e26:	e194      	b.n	8002152 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8186 	beq.w	800214c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d005      	beq.n	8001e58 <HAL_GPIO_Init+0x44>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d130      	bne.n	8001eba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8e:	2201      	movs	r2, #1
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 0201 	and.w	r2, r3, #1
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d017      	beq.n	8001ef6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d123      	bne.n	8001f4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0203 	and.w	r2, r3, #3
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80e0 	beq.w	800214c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_GPIO_Init+0x238>)
 8001f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f92:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <HAL_GPIO_Init+0x238>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_GPIO_Init+0x238>)
 8001f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001faa:	4a29      	ldr	r2, [pc, #164]	@ (8002050 <HAL_GPIO_Init+0x23c>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <HAL_GPIO_Init+0x240>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d052      	beq.n	800207c <HAL_GPIO_Init+0x268>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <HAL_GPIO_Init+0x244>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d031      	beq.n	8002042 <HAL_GPIO_Init+0x22e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800205c <HAL_GPIO_Init+0x248>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <HAL_GPIO_Init+0x22a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_GPIO_Init+0x24c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d025      	beq.n	800203a <HAL_GPIO_Init+0x226>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_GPIO_Init+0x250>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <HAL_GPIO_Init+0x222>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_GPIO_Init+0x254>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x21e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_GPIO_Init+0x258>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x21a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_GPIO_Init+0x25c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x216>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_GPIO_Init+0x260>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_GPIO_Init+0x264>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x20e>
 800201e:	2309      	movs	r3, #9
 8002020:	e02d      	b.n	800207e <HAL_GPIO_Init+0x26a>
 8002022:	230a      	movs	r3, #10
 8002024:	e02b      	b.n	800207e <HAL_GPIO_Init+0x26a>
 8002026:	2308      	movs	r3, #8
 8002028:	e029      	b.n	800207e <HAL_GPIO_Init+0x26a>
 800202a:	2307      	movs	r3, #7
 800202c:	e027      	b.n	800207e <HAL_GPIO_Init+0x26a>
 800202e:	2306      	movs	r3, #6
 8002030:	e025      	b.n	800207e <HAL_GPIO_Init+0x26a>
 8002032:	2305      	movs	r3, #5
 8002034:	e023      	b.n	800207e <HAL_GPIO_Init+0x26a>
 8002036:	2304      	movs	r3, #4
 8002038:	e021      	b.n	800207e <HAL_GPIO_Init+0x26a>
 800203a:	2303      	movs	r3, #3
 800203c:	e01f      	b.n	800207e <HAL_GPIO_Init+0x26a>
 800203e:	2302      	movs	r3, #2
 8002040:	e01d      	b.n	800207e <HAL_GPIO_Init+0x26a>
 8002042:	2301      	movs	r3, #1
 8002044:	e01b      	b.n	800207e <HAL_GPIO_Init+0x26a>
 8002046:	bf00      	nop
 8002048:	58000080 	.word	0x58000080
 800204c:	58024400 	.word	0x58024400
 8002050:	58000400 	.word	0x58000400
 8002054:	58020000 	.word	0x58020000
 8002058:	58020400 	.word	0x58020400
 800205c:	58020800 	.word	0x58020800
 8002060:	58020c00 	.word	0x58020c00
 8002064:	58021000 	.word	0x58021000
 8002068:	58021400 	.word	0x58021400
 800206c:	58021800 	.word	0x58021800
 8002070:	58021c00 	.word	0x58021c00
 8002074:	58022000 	.word	0x58022000
 8002078:	58022400 	.word	0x58022400
 800207c:	2300      	movs	r3, #0
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208e:	4938      	ldr	r1, [pc, #224]	@ (8002170 <HAL_GPIO_Init+0x35c>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	f47f ae63 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	3724      	adds	r7, #36	@ 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	58000400 	.word	0x58000400

08002174 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800217c:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_HSEM_FastTake+0x2c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3320      	adds	r3, #32
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <HAL_HSEM_FastTake+0x30>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	58026400 	.word	0x58026400
 80021a4:	80000300 	.word	0x80000300

080021a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021b2:	4906      	ldr	r1, [pc, #24]	@ (80021cc <HAL_HSEM_Release+0x24>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	58026400 	.word	0x58026400

080021d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0fe      	b.n	80023e0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe ff38 	bl	800106c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f005 f9b1 	bl	8007570 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7c1a      	ldrb	r2, [r3, #16]
 8002216:	f88d 2000 	strb.w	r2, [sp]
 800221a:	3304      	adds	r3, #4
 800221c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221e:	f005 f935 	bl	800748c <USB_CoreInit>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0d5      	b.n	80023e0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f005 f9a9 	bl	8007592 <USB_SetCurrentMode>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0c6      	b.n	80023e0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e04a      	b.n	80022ee <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3315      	adds	r3, #21
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3314      	adds	r3, #20
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	b298      	uxth	r0, r3
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	332e      	adds	r3, #46	@ 0x2e
 8002294:	4602      	mov	r2, r0
 8002296:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3318      	adds	r3, #24
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	331c      	adds	r3, #28
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3320      	adds	r3, #32
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3324      	adds	r3, #36	@ 0x24
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	3301      	adds	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	791b      	ldrb	r3, [r3, #4]
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d3af      	bcc.n	8002258 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e044      	b.n	8002388 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	3301      	adds	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	429a      	cmp	r2, r3
 8002390:	d3b5      	bcc.n	80022fe <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7c1a      	ldrb	r2, [r3, #16]
 800239a:	f88d 2000 	strb.w	r2, [sp]
 800239e:	3304      	adds	r3, #4
 80023a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a2:	f005 f943 	bl	800762c <USB_DevInit>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e013      	b.n	80023e0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7b1b      	ldrb	r3, [r3, #12]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f80a 	bl	80023e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 fafe 	bl	80079da <USB_DevDisconnect>

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002416:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_PCDEx_ActivateLPM+0x44>)
 8002418:	4313      	orrs	r3, r2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	10000003 	.word	0x10000003

08002430 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002438:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	2b06      	cmp	r3, #6
 8002442:	d00a      	beq.n	800245a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002444:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e040      	b.n	80024d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e03e      	b.n	80024d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002462:	491f      	ldr	r1, [pc, #124]	@ (80024e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4313      	orrs	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800246a:	f7fe ff6b 	bl	8001344 <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002470:	e009      	b.n	8002486 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002472:	f7fe ff67 	bl	8001344 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002480:	d901      	bls.n	8002486 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e028      	b.n	80024d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002486:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002492:	d1ee      	bne.n	8002472 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b1e      	cmp	r3, #30
 8002498:	d008      	beq.n	80024ac <HAL_PWREx_ConfigSupply+0x7c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b2e      	cmp	r3, #46	@ 0x2e
 800249e:	d005      	beq.n	80024ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b1d      	cmp	r3, #29
 80024a4:	d002      	beq.n	80024ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80024aa:	d114      	bne.n	80024d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024ac:	f7fe ff4a 	bl	8001344 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024b2:	e009      	b.n	80024c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b4:	f7fe ff46 	bl	8001344 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024c2:	d901      	bls.n	80024c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d4:	d1ee      	bne.n	80024b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58024800 	.word	0x58024800

080024e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	58024800 	.word	0x58024800

08002504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	@ 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f000 bc48 	b.w	8002da8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8088 	beq.w	8002636 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002526:	4b99      	ldr	r3, [pc, #612]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002530:	4b96      	ldr	r3, [pc, #600]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	2b10      	cmp	r3, #16
 800253a:	d007      	beq.n	800254c <HAL_RCC_OscConfig+0x48>
 800253c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253e:	2b18      	cmp	r3, #24
 8002540:	d111      	bne.n	8002566 <HAL_RCC_OscConfig+0x62>
 8002542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4b8f      	ldr	r3, [pc, #572]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d06d      	beq.n	8002634 <HAL_RCC_OscConfig+0x130>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d169      	bne.n	8002634 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	f000 bc21 	b.w	8002da8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x7a>
 8002570:	4b86      	ldr	r3, [pc, #536]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a85      	ldr	r2, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e02e      	b.n	80025dc <HAL_RCC_OscConfig+0xd8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x9c>
 8002586:	4b81      	ldr	r3, [pc, #516]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a80      	ldr	r2, [pc, #512]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7d      	ldr	r2, [pc, #500]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xd8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0xc0>
 80025aa:	4b78      	ldr	r3, [pc, #480]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a77      	ldr	r2, [pc, #476]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b75      	ldr	r3, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a74      	ldr	r2, [pc, #464]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xd8>
 80025c4:	4b71      	ldr	r3, [pc, #452]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a70      	ldr	r2, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b6e      	ldr	r3, [pc, #440]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6d      	ldr	r2, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe feae 	bl	8001344 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe feaa 	bl	8001344 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e3d4      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fe:	4b63      	ldr	r3, [pc, #396]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xe8>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fe9a 	bl	8001344 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fe96 	bl	8001344 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e3c0      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002626:	4b59      	ldr	r3, [pc, #356]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x110>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80ca 	beq.w	80027d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002644:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800264c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800264e:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_RCC_OscConfig+0x166>
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	2b18      	cmp	r3, #24
 800265e:	d156      	bne.n	800270e <HAL_RCC_OscConfig+0x20a>
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d151      	bne.n	800270e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266a:	4b48      	ldr	r3, [pc, #288]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e392      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002682:	4b42      	ldr	r3, [pc, #264]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0219 	bic.w	r2, r3, #25
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	493f      	ldr	r1, [pc, #252]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fe56 	bl	8001344 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fe52 	bl	8001344 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e37c      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ae:	4b37      	ldr	r3, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	f7fe fe73 	bl	80013a4 <HAL_GetREVID>
 80026be:	4603      	mov	r3, r0
 80026c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d817      	bhi.n	80026f8 <HAL_RCC_OscConfig+0x1f4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d108      	bne.n	80026e2 <HAL_RCC_OscConfig+0x1de>
 80026d0:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026d8:	4a2c      	ldr	r2, [pc, #176]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e0:	e07a      	b.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b2a      	ldr	r3, [pc, #168]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	031b      	lsls	r3, r3, #12
 80026f0:	4926      	ldr	r1, [pc, #152]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f6:	e06f      	b.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b24      	ldr	r3, [pc, #144]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	4921      	ldr	r1, [pc, #132]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270c:	e064      	b.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d047      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002716:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0219 	bic.w	r2, r3, #25
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	491a      	ldr	r1, [pc, #104]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fe0c 	bl	8001344 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002730:	f7fe fe08 	bl	8001344 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e332      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002742:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	f7fe fe29 	bl	80013a4 <HAL_GetREVID>
 8002752:	4603      	mov	r3, r0
 8002754:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002758:	4293      	cmp	r3, r2
 800275a:	d819      	bhi.n	8002790 <HAL_RCC_OscConfig+0x28c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d108      	bne.n	8002776 <HAL_RCC_OscConfig+0x272>
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800276c:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 800276e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002772:	6053      	str	r3, [r2, #4]
 8002774:	e030      	b.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	031b      	lsls	r3, r3, #12
 8002784:	4901      	ldr	r1, [pc, #4]	@ (800278c <HAL_RCC_OscConfig+0x288>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	e025      	b.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
 800278c:	58024400 	.word	0x58024400
 8002790:	4b9a      	ldr	r3, [pc, #616]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4997      	ldr	r1, [pc, #604]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e018      	b.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b95      	ldr	r3, [pc, #596]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a94      	ldr	r2, [pc, #592]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fdc7 	bl	8001344 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fdc3 	bl	8001344 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e2ed      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027cc:	4b8b      	ldr	r3, [pc, #556]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a9 	beq.w	8002938 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e6:	4b85      	ldr	r3, [pc, #532]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f0:	4b82      	ldr	r3, [pc, #520]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d007      	beq.n	800280c <HAL_RCC_OscConfig+0x308>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b18      	cmp	r3, #24
 8002800:	d13a      	bne.n	8002878 <HAL_RCC_OscConfig+0x374>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d135      	bne.n	8002878 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800280c:	4b7b      	ldr	r3, [pc, #492]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_OscConfig+0x320>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b80      	cmp	r3, #128	@ 0x80
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e2c1      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002824:	f7fe fdbe 	bl	80013a4 <HAL_GetREVID>
 8002828:	4603      	mov	r3, r0
 800282a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800282e:	4293      	cmp	r3, r2
 8002830:	d817      	bhi.n	8002862 <HAL_RCC_OscConfig+0x35e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	2b20      	cmp	r3, #32
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0x348>
 800283a:	4b70      	ldr	r3, [pc, #448]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002842:	4a6e      	ldr	r2, [pc, #440]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002844:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002848:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800284a:	e075      	b.n	8002938 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800284c:	4b6b      	ldr	r3, [pc, #428]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	4968      	ldr	r1, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002860:	e06a      	b.n	8002938 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002862:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	4962      	ldr	r1, [pc, #392]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002876:	e05f      	b.n	8002938 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d042      	beq.n	8002906 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002880:	4b5e      	ldr	r3, [pc, #376]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5d      	ldr	r2, [pc, #372]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fd5a 	bl	8001344 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002894:	f7fe fd56 	bl	8001344 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e280      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a6:	4b55      	ldr	r3, [pc, #340]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028b2:	f7fe fd77 	bl	80013a4 <HAL_GetREVID>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028bc:	4293      	cmp	r3, r2
 80028be:	d817      	bhi.n	80028f0 <HAL_RCC_OscConfig+0x3ec>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d108      	bne.n	80028da <HAL_RCC_OscConfig+0x3d6>
 80028c8:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028d0:	4a4a      	ldr	r2, [pc, #296]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028d6:	6053      	str	r3, [r2, #4]
 80028d8:	e02e      	b.n	8002938 <HAL_RCC_OscConfig+0x434>
 80028da:	4b48      	ldr	r3, [pc, #288]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	4944      	ldr	r1, [pc, #272]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
 80028ee:	e023      	b.n	8002938 <HAL_RCC_OscConfig+0x434>
 80028f0:	4b42      	ldr	r3, [pc, #264]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	493f      	ldr	r1, [pc, #252]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
 8002904:	e018      	b.n	8002938 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3c      	ldr	r2, [pc, #240]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800290c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fd17 	bl	8001344 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800291a:	f7fe fd13 	bl	8001344 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e23d      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800292c:	4b33      	ldr	r3, [pc, #204]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d036      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d019      	beq.n	8002980 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002950:	4a2a      	ldr	r2, [pc, #168]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe fcf4 	bl	8001344 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fe fcf0 	bl	8001344 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e21a      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x45c>
 800297e:	e018      	b.n	80029b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002980:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fcda 	bl	8001344 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fcd6 	bl	8001344 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e200      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d039      	beq.n	8002a32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0c      	ldr	r2, [pc, #48]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80029cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fcb7 	bl	8001344 <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029da:	f7fe fcb3 	bl	8001344 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1dd      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029ec:	4b03      	ldr	r3, [pc, #12]	@ (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x4d6>
 80029f8:	e01b      	b.n	8002a32 <HAL_RCC_OscConfig+0x52e>
 80029fa:	bf00      	nop
 80029fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a00:	4b9b      	ldr	r3, [pc, #620]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a9a      	ldr	r2, [pc, #616]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fc9a 	bl	8001344 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a14:	f7fe fc96 	bl	8001344 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1c0      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a26:	4b92      	ldr	r3, [pc, #584]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8081 	beq.w	8002b42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a40:	4b8c      	ldr	r3, [pc, #560]	@ (8002c74 <HAL_RCC_OscConfig+0x770>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a8b      	ldr	r2, [pc, #556]	@ (8002c74 <HAL_RCC_OscConfig+0x770>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fc7a 	bl	8001344 <HAL_GetTick>
 8002a50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7fe fc76 	bl	8001344 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	@ 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1a0      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a66:	4b83      	ldr	r3, [pc, #524]	@ (8002c74 <HAL_RCC_OscConfig+0x770>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x584>
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a86:	e02d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5e0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x5a6>
 8002a90:	4b77      	ldr	r3, [pc, #476]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a76      	ldr	r2, [pc, #472]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	4b74      	ldr	r3, [pc, #464]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a73      	ldr	r2, [pc, #460]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5e0>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x5c8>
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	4b6c      	ldr	r3, [pc, #432]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5e0>
 8002acc:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a67      	ldr	r2, [pc, #412]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	4b65      	ldr	r3, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	4a64      	ldr	r2, [pc, #400]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fc2a 	bl	8001344 <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe fc26 	bl	8001344 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e14e      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b0a:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x5f0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe fc14 	bl	8001344 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe fc10 	bl	8001344 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e138      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b36:	4b4e      	ldr	r3, [pc, #312]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 812d 	beq.w	8002da6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b4c:	4b48      	ldr	r3, [pc, #288]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b54:	2b18      	cmp	r3, #24
 8002b56:	f000 80bd 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	f040 809e 	bne.w	8002ca0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b42      	ldr	r3, [pc, #264]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a41      	ldr	r2, [pc, #260]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fbe8 	bl	8001344 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fbe4 	bl	8001344 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e10e      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b8a:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b96:	4b36      	ldr	r3, [pc, #216]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b9a:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <HAL_RCC_OscConfig+0x774>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	4931      	ldr	r1, [pc, #196]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	628b      	str	r3, [r1, #40]	@ 0x28
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	025b      	lsls	r3, r3, #9
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002be0:	4923      	ldr	r1, [pc, #140]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	4a21      	ldr	r2, [pc, #132]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bf6:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_RCC_OscConfig+0x778>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bfe:	00d2      	lsls	r2, r2, #3
 8002c00:	491b      	ldr	r1, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	f023 020c 	bic.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	4917      	ldr	r1, [pc, #92]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c18:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	f023 0202 	bic.w	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	4912      	ldr	r1, [pc, #72]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c2a:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c36:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c42:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5a:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fb6d 	bl	8001344 <HAL_GetTick>
 8002c6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c6c:	e011      	b.n	8002c92 <HAL_RCC_OscConfig+0x78e>
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
 8002c74:	58024800 	.word	0x58024800
 8002c78:	fffffc0c 	.word	0xfffffc0c
 8002c7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fb60 	bl	8001344 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e08a      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c92:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x77c>
 8002c9e:	e082      	b.n	8002da6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b43      	ldr	r3, [pc, #268]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a42      	ldr	r2, [pc, #264]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fb4a 	bl	8001344 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe fb46 	bl	8001344 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e070      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x7b0>
 8002cd2:	e068      	b.n	8002da6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cd4:	4b36      	ldr	r3, [pc, #216]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cda:	4b35      	ldr	r3, [pc, #212]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d031      	beq.n	8002d4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0203 	and.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d12a      	bne.n	8002d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d122      	bne.n	8002d4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d11a      	bne.n	8002d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	0a5b      	lsrs	r3, r3, #9
 8002d1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d111      	bne.n	8002d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d108      	bne.n	8002d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0e1b      	lsrs	r3, r3, #24
 8002d3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e02b      	b.n	8002da8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d01f      	beq.n	8002da6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d66:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	4a11      	ldr	r2, [pc, #68]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d72:	f7fe fae7 	bl	8001344 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d78:	bf00      	nop
 8002d7a:	f7fe fae3 	bl	8001344 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d0f9      	beq.n	8002d7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <HAL_RCC_OscConfig+0x8b0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d92:	00d2      	lsls	r2, r2, #3
 8002d94:	4906      	ldr	r1, [pc, #24]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_RCC_OscConfig+0x8ac>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3730      	adds	r7, #48	@ 0x30
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	58024400 	.word	0x58024400
 8002db4:	ffff0007 	.word	0xffff0007

08002db8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e19c      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b87      	ldr	r3, [pc, #540]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	4985      	ldr	r1, [pc, #532]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b83      	ldr	r3, [pc, #524]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e184      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d908      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e18:	4b78      	ldr	r3, [pc, #480]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4975      	ldr	r1, [pc, #468]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	4b70      	ldr	r3, [pc, #448]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e46:	4b6d      	ldr	r3, [pc, #436]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	496a      	ldr	r1, [pc, #424]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	4b64      	ldr	r3, [pc, #400]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d908      	bls.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e74:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	495e      	ldr	r1, [pc, #376]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	4b59      	ldr	r3, [pc, #356]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d908      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ea2:	4b56      	ldr	r3, [pc, #344]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4953      	ldr	r1, [pc, #332]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d908      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f023 020f 	bic.w	r2, r3, #15
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4947      	ldr	r1, [pc, #284]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d055      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eee:	4b43      	ldr	r3, [pc, #268]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4940      	ldr	r1, [pc, #256]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f08:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0f6      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0ea      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f38:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0de      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f48:	4b2c      	ldr	r3, [pc, #176]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0d6      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f023 0207 	bic.w	r2, r3, #7
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4925      	ldr	r1, [pc, #148]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6a:	f7fe f9eb 	bl	8001344 <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f72:	f7fe f9e7 	bl	8001344 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0be      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f88:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d1eb      	bne.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d208      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f023 020f 	bic.w	r2, r3, #15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	490e      	ldr	r1, [pc, #56]	@ (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d214      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	4906      	ldr	r1, [pc, #24]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e086      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
 8002ff8:	52002000 	.word	0x52002000
 8002ffc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	4b3f      	ldr	r3, [pc, #252]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003018:	429a      	cmp	r2, r3
 800301a:	d208      	bcs.n	800302e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800301c:	4b3c      	ldr	r3, [pc, #240]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4939      	ldr	r1, [pc, #228]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 800302a:	4313      	orrs	r3, r2
 800302c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003046:	429a      	cmp	r2, r3
 8003048:	d208      	bcs.n	800305c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800304a:	4b31      	ldr	r3, [pc, #196]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	492e      	ldr	r1, [pc, #184]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d010      	beq.n	800308a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	4b28      	ldr	r3, [pc, #160]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003074:	429a      	cmp	r2, r3
 8003076:	d208      	bcs.n	800308a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4922      	ldr	r1, [pc, #136]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003086:	4313      	orrs	r3, r2
 8003088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d208      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4917      	ldr	r1, [pc, #92]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b8:	f000 f834 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	4912      	ldr	r1, [pc, #72]	@ (8003114 <HAL_RCC_ClockConfig+0x35c>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <HAL_RCC_ClockConfig+0x35c>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <HAL_RCC_ClockConfig+0x360>)
 80030ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030f0:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x364>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <HAL_RCC_ClockConfig+0x368>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe f8d8 	bl	80012b0 <HAL_InitTick>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	58024400 	.word	0x58024400
 8003114:	08007b0c 	.word	0x08007b0c
 8003118:	24000004 	.word	0x24000004
 800311c:	24000000 	.word	0x24000000
 8003120:	24000008 	.word	0x24000008

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312a:	4bb3      	ldr	r3, [pc, #716]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003132:	2b18      	cmp	r3, #24
 8003134:	f200 8155 	bhi.w	80033e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <HAL_RCC_GetSysClockFreq+0x1c>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	080031a5 	.word	0x080031a5
 8003144:	080033e3 	.word	0x080033e3
 8003148:	080033e3 	.word	0x080033e3
 800314c:	080033e3 	.word	0x080033e3
 8003150:	080033e3 	.word	0x080033e3
 8003154:	080033e3 	.word	0x080033e3
 8003158:	080033e3 	.word	0x080033e3
 800315c:	080033e3 	.word	0x080033e3
 8003160:	080031cb 	.word	0x080031cb
 8003164:	080033e3 	.word	0x080033e3
 8003168:	080033e3 	.word	0x080033e3
 800316c:	080033e3 	.word	0x080033e3
 8003170:	080033e3 	.word	0x080033e3
 8003174:	080033e3 	.word	0x080033e3
 8003178:	080033e3 	.word	0x080033e3
 800317c:	080033e3 	.word	0x080033e3
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080033e3 	.word	0x080033e3
 8003188:	080033e3 	.word	0x080033e3
 800318c:	080033e3 	.word	0x080033e3
 8003190:	080033e3 	.word	0x080033e3
 8003194:	080033e3 	.word	0x080033e3
 8003198:	080033e3 	.word	0x080033e3
 800319c:	080033e3 	.word	0x080033e3
 80031a0:	080031d7 	.word	0x080031d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031a4:	4b94      	ldr	r3, [pc, #592]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031b0:	4b91      	ldr	r3, [pc, #580]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	08db      	lsrs	r3, r3, #3
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	4a90      	ldr	r2, [pc, #576]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031c2:	e111      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031c4:	4b8d      	ldr	r3, [pc, #564]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031c6:	61bb      	str	r3, [r7, #24]
      break;
 80031c8:	e10e      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031cc:	61bb      	str	r3, [r7, #24]
      break;
 80031ce:	e10b      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031d2:	61bb      	str	r3, [r7, #24]
      break;
 80031d4:	e108      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031d6:	4b88      	ldr	r3, [pc, #544]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031e0:	4b85      	ldr	r3, [pc, #532]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031ec:	4b82      	ldr	r3, [pc, #520]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031f6:	4b80      	ldr	r3, [pc, #512]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	08db      	lsrs	r3, r3, #3
 80031fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80e1 	beq.w	80033dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b02      	cmp	r3, #2
 800321e:	f000 8083 	beq.w	8003328 <HAL_RCC_GetSysClockFreq+0x204>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b02      	cmp	r3, #2
 8003226:	f200 80a1 	bhi.w	800336c <HAL_RCC_GetSysClockFreq+0x248>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x114>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d056      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003236:	e099      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003238:	4b6f      	ldr	r3, [pc, #444]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003244:	4b6c      	ldr	r3, [pc, #432]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	4a6b      	ldr	r2, [pc, #428]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b62      	ldr	r3, [pc, #392]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003282:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800329e:	e087      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800340c <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b51      	ldr	r3, [pc, #324]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032e2:	e065      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003410 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b40      	ldr	r3, [pc, #256]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003326:	e043      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003414 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b2f      	ldr	r3, [pc, #188]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800336a:	e021      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003410 <HAL_RCC_GetSysClockFreq+0x2ec>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	0a5b      	lsrs	r3, r3, #9
 80033b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ba:	3301      	adds	r3, #1
 80033bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d4:	ee17 3a90 	vmov	r3, s15
 80033d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033da:	e005      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
      break;
 80033e0:	e002      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033e2:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033e4:	61bb      	str	r3, [r7, #24]
      break;
 80033e6:	bf00      	nop
  }

  return sysclockfreq;
 80033e8:	69bb      	ldr	r3, [r7, #24]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	@ 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	58024400 	.word	0x58024400
 80033fc:	03d09000 	.word	0x03d09000
 8003400:	003d0900 	.word	0x003d0900
 8003404:	007a1200 	.word	0x007a1200
 8003408:	46000000 	.word	0x46000000
 800340c:	4c742400 	.word	0x4c742400
 8003410:	4a742400 	.word	0x4a742400
 8003414:	4af42400 	.word	0x4af42400

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800341e:	f7ff fe81 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_GetHCLKFreq+0x50>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490f      	ldr	r1, [pc, #60]	@ (800346c <HAL_RCC_GetHCLKFreq+0x54>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_RCC_GetHCLKFreq+0x50>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	4a09      	ldr	r2, [pc, #36]	@ (800346c <HAL_RCC_GetHCLKFreq+0x54>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x58>)
 8003454:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003456:	4a07      	ldr	r2, [pc, #28]	@ (8003474 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x58>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	58024400 	.word	0x58024400
 800346c:	08007b0c 	.word	0x08007b0c
 8003470:	24000004 	.word	0x24000004
 8003474:	24000000 	.word	0x24000000

08003478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800347c:	f7ff ffcc 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4904      	ldr	r1, [pc, #16]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	58024400 	.word	0x58024400
 80034a0:	08007b0c 	.word	0x08007b0c

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034a8:	f7ff ffb6 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4904      	ldr	r1, [pc, #16]	@ (80034cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58024400 	.word	0x58024400
 80034cc:	08007b0c 	.word	0x08007b0c

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d4:	b0ca      	sub	sp, #296	@ 0x128
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034f4:	2500      	movs	r5, #0
 80034f6:	ea54 0305 	orrs.w	r3, r4, r5
 80034fa:	d049      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003508:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800350c:	d828      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800350e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003512:	d01a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003518:	d822      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003522:	d007      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003524:	e01c      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4bb8      	ldr	r3, [pc, #736]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352a:	4ab7      	ldr	r2, [pc, #732]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003532:	e01a      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	3308      	adds	r3, #8
 800353a:	2102      	movs	r1, #2
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fc8f 	bl	8004e60 <RCCEx_PLL2_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003548:	e00f      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	3328      	adds	r3, #40	@ 0x28
 8003550:	2102      	movs	r1, #2
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fd36 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800355e:	e004      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003572:	4ba5      	ldr	r3, [pc, #660]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003576:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003580:	4aa1      	ldr	r2, [pc, #644]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003582:	430b      	orrs	r3, r1
 8003584:	6513      	str	r3, [r2, #80]	@ 0x50
 8003586:	e003      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800359c:	f04f 0900 	mov.w	r9, #0
 80035a0:	ea58 0309 	orrs.w	r3, r8, r9
 80035a4:	d047      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d82a      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035b0:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035cd 	.word	0x080035cd
 80035bc:	080035db 	.word	0x080035db
 80035c0:	080035f1 	.word	0x080035f1
 80035c4:	0800360f 	.word	0x0800360f
 80035c8:	0800360f 	.word	0x0800360f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	4a8d      	ldr	r2, [pc, #564]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035d8:	e01a      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	3308      	adds	r3, #8
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fc3c 	bl	8004e60 <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ee:	e00f      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f4:	3328      	adds	r3, #40	@ 0x28
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 fce3 	bl	8004fc4 <RCCEx_PLL3_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800360c:	e000      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800360e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003618:	4b7b      	ldr	r3, [pc, #492]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800361a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361c:	f023 0107 	bic.w	r1, r3, #7
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	4a78      	ldr	r2, [pc, #480]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	430b      	orrs	r3, r1
 800362a:	6513      	str	r3, [r2, #80]	@ 0x50
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003642:	f04f 0b00 	mov.w	fp, #0
 8003646:	ea5a 030b 	orrs.w	r3, sl, fp
 800364a:	d04c      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003656:	d030      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800365c:	d829      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800365e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003660:	d02d      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003662:	2bc0      	cmp	r3, #192	@ 0xc0
 8003664:	d825      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003666:	2b80      	cmp	r3, #128	@ 0x80
 8003668:	d018      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800366a:	2b80      	cmp	r3, #128	@ 0x80
 800366c:	d821      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d007      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003676:	e01c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003678:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	4a62      	ldr	r2, [pc, #392]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003684:	e01c      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	3308      	adds	r3, #8
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fbe6 	bl	8004e60 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800369a:	e011      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	3328      	adds	r3, #40	@ 0x28
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fc8d 	bl	8004fc4 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036b0:	e006      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6513      	str	r3, [r2, #80]	@ 0x50
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80036f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003700:	460b      	mov	r3, r1
 8003702:	4313      	orrs	r3, r2
 8003704:	d053      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800370e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003712:	d035      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003714:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003718:	d82e      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800371a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800371e:	d031      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003720:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003724:	d828      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800372a:	d01a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003730:	d822      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800373a:	d007      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800373c:	e01c      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373e:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	4a31      	ldr	r2, [pc, #196]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374a:	e01c      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	3308      	adds	r3, #8
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fb83 	bl	8004e60 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003760:	e011      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	3328      	adds	r3, #40	@ 0x28
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fc2a 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003776:	e006      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800377e:	e002      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800378e:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800379e:	4a1a      	ldr	r2, [pc, #104]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d056      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037da:	d038      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037e0:	d831      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037e6:	d034      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037ec:	d82b      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037f2:	d01d      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037f8:	d825      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003804:	e01f      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003806:	bf00      	nop
 8003808:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4ba2      	ldr	r3, [pc, #648]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	4aa1      	ldr	r2, [pc, #644]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003818:	e01c      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	3308      	adds	r3, #8
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fb1c 	bl	8004e60 <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800382e:	e011      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	3328      	adds	r3, #40	@ 0x28
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fbc3 	bl	8004fc4 <RCCEx_PLL3_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800385c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003868:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800386c:	4a8a      	ldr	r2, [pc, #552]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	430b      	orrs	r3, r1
 8003870:	6593      	str	r3, [r2, #88]	@ 0x58
 8003872:	e003      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003892:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d03a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a2:	2b30      	cmp	r3, #48	@ 0x30
 80038a4:	d01f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038a6:	2b30      	cmp	r3, #48	@ 0x30
 80038a8:	d819      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d00c      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d815      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d019      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d111      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ba:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	4a76      	ldr	r2, [pc, #472]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038c6:	e011      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	3308      	adds	r3, #8
 80038ce:	2102      	movs	r1, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fac5 	bl	8004e60 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038dc:	e006      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038f4:	4b68      	ldr	r3, [pc, #416]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	4a65      	ldr	r2, [pc, #404]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003904:	430b      	orrs	r3, r1
 8003906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800391e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003928:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d051      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393c:	d035      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800393e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003942:	d82e      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003944:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003948:	d031      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800394a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800394e:	d828      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003954:	d01a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395a:	d822      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003966:	e01c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b4b      	ldr	r3, [pc, #300]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003974:	e01c      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	3308      	adds	r3, #8
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fa6e 	bl	8004e60 <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800398a:	e011      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	3328      	adds	r3, #40	@ 0x28
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fb15 	bl	8004fc4 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039b8:	4b37      	ldr	r3, [pc, #220]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	4a34      	ldr	r2, [pc, #208]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80039f0:	460b      	mov	r3, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	d056      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a00:	d033      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a06:	d82c      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a0c:	d02f      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a12:	d826      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a18:	d02b      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a1e:	d820      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a24:	d012      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a2a:	d81a      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d022      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a34:	d115      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fa0e 	bl	8004e60 <RCCEx_PLL2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a4a:	e015      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	3328      	adds	r3, #40	@ 0x28
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fab5 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a60:	e00a      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a68:	e006      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a6a:	bf00      	nop
 8003a6c:	e004      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8e:	4a02      	ldr	r2, [pc, #8]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a96:	bf00      	nop
 8003a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	d055      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad0:	d033      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad6:	d82c      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d02f      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae2:	d826      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ae8:	d02b      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003aea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aee:	d820      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af4:	d012      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003afa:	d81a      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d022      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b04:	d115      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f9a6 	bl	8004e60 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b1a:	e015      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	3328      	adds	r3, #40	@ 0x28
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fa4d 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b30:	e00a      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b3a:	bf00      	nop
 8003b3c:	e004      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b50:	4ba3      	ldr	r3, [pc, #652]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b60:	4a9f      	ldr	r2, [pc, #636]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b66:	e003      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	d037      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b9a:	d00e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba0:	d816      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d018      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bac:	4b8c      	ldr	r3, [pc, #560]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4a8b      	ldr	r2, [pc, #556]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bb8:	e00f      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f94c 	bl	8004e60 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003be2:	4b7f      	ldr	r3, [pc, #508]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	4a7b      	ldr	r2, [pc, #492]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d039      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d81c      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c6d 	.word	0x08003c6d
 8003c34:	08003c41 	.word	0x08003c41
 8003c38:	08003c4f 	.word	0x08003c4f
 8003c3c:	08003c6d 	.word	0x08003c6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c40:	4b67      	ldr	r3, [pc, #412]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4a66      	ldr	r2, [pc, #408]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c4c:	e00f      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	3308      	adds	r3, #8
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 f902 	bl	8004e60 <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c62:	e004      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c76:	4b5a      	ldr	r3, [pc, #360]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7a:	f023 0103 	bic.w	r1, r3, #3
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c84:	4a56      	ldr	r2, [pc, #344]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c86:	430b      	orrs	r3, r1
 8003c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8a:	e003      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003caa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f000 809f 	beq.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc2:	f7fd fb3f 	bl	8001344 <HAL_GetTick>
 8003cc6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ccc:	f7fd fb3a 	bl	8001344 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b64      	cmp	r3, #100	@ 0x64
 8003cda:	d903      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ed      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d179      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cf8:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d04:	4053      	eors	r3, r2
 8003d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d015      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0e:	4b34      	ldr	r3, [pc, #208]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d1a:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a30      	ldr	r2, [pc, #192]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d26:	4b2e      	ldr	r3, [pc, #184]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d32:	4a2b      	ldr	r2, [pc, #172]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d46:	d118      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fafc 	bl	8001344 <HAL_GetTick>
 8003d4c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d50:	e00d      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd faf7 	bl	8001344 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d5c:	1ad2      	subs	r2, r2, r3
 8003d5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d903      	bls.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d6c:	e005      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0eb      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d129      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d92:	d10e      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d94:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003da4:	091a      	lsrs	r2, r3, #4
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6113      	str	r3, [r2, #16]
 8003db0:	e005      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dbc:	6113      	str	r3, [r2, #16]
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dce:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd4:	e00e      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003dde:	e009      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58024800 	.word	0x58024800
 8003de8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 0301 	and.w	r3, r2, #1
 8003e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f000 8089 	beq.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e1c:	2b28      	cmp	r3, #40	@ 0x28
 8003e1e:	d86b      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003f01 	.word	0x08003f01
 8003e2c:	08003ef9 	.word	0x08003ef9
 8003e30:	08003ef9 	.word	0x08003ef9
 8003e34:	08003ef9 	.word	0x08003ef9
 8003e38:	08003ef9 	.word	0x08003ef9
 8003e3c:	08003ef9 	.word	0x08003ef9
 8003e40:	08003ef9 	.word	0x08003ef9
 8003e44:	08003ef9 	.word	0x08003ef9
 8003e48:	08003ecd 	.word	0x08003ecd
 8003e4c:	08003ef9 	.word	0x08003ef9
 8003e50:	08003ef9 	.word	0x08003ef9
 8003e54:	08003ef9 	.word	0x08003ef9
 8003e58:	08003ef9 	.word	0x08003ef9
 8003e5c:	08003ef9 	.word	0x08003ef9
 8003e60:	08003ef9 	.word	0x08003ef9
 8003e64:	08003ef9 	.word	0x08003ef9
 8003e68:	08003ee3 	.word	0x08003ee3
 8003e6c:	08003ef9 	.word	0x08003ef9
 8003e70:	08003ef9 	.word	0x08003ef9
 8003e74:	08003ef9 	.word	0x08003ef9
 8003e78:	08003ef9 	.word	0x08003ef9
 8003e7c:	08003ef9 	.word	0x08003ef9
 8003e80:	08003ef9 	.word	0x08003ef9
 8003e84:	08003ef9 	.word	0x08003ef9
 8003e88:	08003f01 	.word	0x08003f01
 8003e8c:	08003ef9 	.word	0x08003ef9
 8003e90:	08003ef9 	.word	0x08003ef9
 8003e94:	08003ef9 	.word	0x08003ef9
 8003e98:	08003ef9 	.word	0x08003ef9
 8003e9c:	08003ef9 	.word	0x08003ef9
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003ef9 	.word	0x08003ef9
 8003ea8:	08003f01 	.word	0x08003f01
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003ef9 	.word	0x08003ef9
 8003eb4:	08003ef9 	.word	0x08003ef9
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003ef9 	.word	0x08003ef9
 8003ec0:	08003ef9 	.word	0x08003ef9
 8003ec4:	08003ef9 	.word	0x08003ef9
 8003ec8:	08003f01 	.word	0x08003f01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 ffc3 	bl	8004e60 <RCCEx_PLL2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ee0:	e00f      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	3328      	adds	r3, #40	@ 0x28
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 f86a 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ef6:	e004      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f0a:	4bbf      	ldr	r3, [pc, #764]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f18:	4abb      	ldr	r2, [pc, #748]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f1e:	e003      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f002 0302 	and.w	r3, r2, #2
 8003f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	d041      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d824      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003f87 	.word	0x08003f87
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fa5 	.word	0x08003fa5
 8003f6c:	08003fa5 	.word	0x08003fa5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 ff71 	bl	8004e60 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f84:	e00f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	3328      	adds	r3, #40	@ 0x28
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f818 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fae:	4b96      	ldr	r3, [pc, #600]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	f023 0107 	bic.w	r1, r3, #7
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fbc:	4a92      	ldr	r2, [pc, #584]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fc2:	e003      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f002 0304 	and.w	r3, r2, #4
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d044      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff4:	2b05      	cmp	r3, #5
 8003ff6:	d825      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	0800404d 	.word	0x0800404d
 8004004:	08004019 	.word	0x08004019
 8004008:	0800402f 	.word	0x0800402f
 800400c:	0800404d 	.word	0x0800404d
 8004010:	0800404d 	.word	0x0800404d
 8004014:	0800404d 	.word	0x0800404d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	3308      	adds	r3, #8
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ff1d 	bl	8004e60 <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800402c:	e00f      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	3328      	adds	r3, #40	@ 0x28
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f000 ffc4 	bl	8004fc4 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800404c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004056:	4b6c      	ldr	r3, [pc, #432]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	f023 0107 	bic.w	r1, r3, #7
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	4a68      	ldr	r2, [pc, #416]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6593      	str	r3, [r2, #88]	@ 0x58
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f002 0320 	and.w	r3, r2, #32
 8004082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800408c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004090:	460b      	mov	r3, r1
 8004092:	4313      	orrs	r3, r2
 8004094:	d055      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a2:	d033      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a8:	d82c      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ae:	d02f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d826      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ba:	d02b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c0:	d820      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c6:	d012      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040cc:	d81a      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d022      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040d6:	d115      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	3308      	adds	r3, #8
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 febd 	bl	8004e60 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e015      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3328      	adds	r3, #40	@ 0x28
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 ff64 	bl	8004fc4 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004102:	e00a      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800410c:	bf00      	nop
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004122:	4b39      	ldr	r3, [pc, #228]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	4a35      	ldr	r2, [pc, #212]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6553      	str	r3, [r2, #84]	@ 0x54
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004158:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800415c:	460b      	mov	r3, r1
 800415e:	4313      	orrs	r3, r2
 8004160:	d058      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800416a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800416e:	d033      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004170:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004174:	d82c      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417a:	d02f      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004180:	d826      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004182:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004186:	d02b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800418c:	d820      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004192:	d012      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004198:	d81a      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d022      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a2:	d115      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	3308      	adds	r3, #8
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fe57 	bl	8004e60 <RCCEx_PLL2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041b8:	e015      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	3328      	adds	r3, #40	@ 0x28
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fefe 	bl	8004fc4 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041ce:	e00a      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041d6:	e006      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d8:	bf00      	nop
 80041da:	e004      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041dc:	bf00      	nop
 80041de:	e002      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10e      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041fe:	4a02      	ldr	r2, [pc, #8]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6593      	str	r3, [r2, #88]	@ 0x58
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800422a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d055      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800423c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004240:	d033      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004242:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004246:	d82c      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800424c:	d02f      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800424e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004252:	d826      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004254:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004258:	d02b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800425a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800425e:	d820      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004264:	d012      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800426a:	d81a      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d022      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004274:	d115      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	3308      	adds	r3, #8
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fdee 	bl	8004e60 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800428a:	e015      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004290:	3328      	adds	r3, #40	@ 0x28
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fe95 	bl	8004fc4 <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042a0:	e00a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042d0:	4a9d      	ldr	r2, [pc, #628]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d2:	430b      	orrs	r3, r1
 80042d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f002 0308 	and.w	r3, r2, #8
 80042ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d01e      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430c:	d10c      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	3328      	adds	r3, #40	@ 0x28
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fe54 	bl	8004fc4 <RCCEx_PLL3_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004328:	4b87      	ldr	r3, [pc, #540]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004338:	4a83      	ldr	r2, [pc, #524]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0310 	and.w	r3, r2, #16
 800434a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004354:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d10c      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	3328      	adds	r3, #40	@ 0x28
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fe25 	bl	8004fc4 <RCCEx_PLL3_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004386:	4b70      	ldr	r3, [pc, #448]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004396:	4a6c      	ldr	r2, [pc, #432]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043b6:	460b      	mov	r3, r1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	d03e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043c8:	d022      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ce:	d81b      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d8:	d00b      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043da:	e015      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	3308      	adds	r3, #8
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd3b 	bl	8004e60 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043f0:	e00f      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	3328      	adds	r3, #40	@ 0x28
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fde2 	bl	8004fc4 <RCCEx_PLL3_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004406:	e004      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440e:	e000      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800441a:	4b4b      	ldr	r3, [pc, #300]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800442a:	4a47      	ldr	r2, [pc, #284]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442c:	430b      	orrs	r3, r1
 800442e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004446:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004448:	2300      	movs	r3, #0
 800444a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800444c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d03b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004462:	d01f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004464:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004468:	d818      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800446e:	d003      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004474:	d007      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004476:	e011      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004478:	4b33      	ldr	r3, [pc, #204]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	4a32      	ldr	r2, [pc, #200]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004484:	e00f      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	3328      	adds	r3, #40	@ 0x28
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fd98 	bl	8004fc4 <RCCEx_PLL3_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ae:	4b26      	ldr	r3, [pc, #152]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	4a22      	ldr	r2, [pc, #136]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044da:	673b      	str	r3, [r7, #112]	@ 0x70
 80044dc:	2300      	movs	r3, #0
 80044de:	677b      	str	r3, [r7, #116]	@ 0x74
 80044e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044e4:	460b      	mov	r3, r1
 80044e6:	4313      	orrs	r3, r2
 80044e8:	d034      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f8:	d007      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	4a11      	ldr	r2, [pc, #68]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004508:	e00e      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3308      	adds	r3, #8
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fca4 	bl	8004e60 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800451e:	e003      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004534:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453e:	4a02      	ldr	r2, [pc, #8]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004540:	430b      	orrs	r3, r1
 8004542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004562:	2300      	movs	r3, #0
 8004564:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004566:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800456a:	460b      	mov	r3, r1
 800456c:	4313      	orrs	r3, r2
 800456e:	d00c      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	3328      	adds	r3, #40	@ 0x28
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd23 	bl	8004fc4 <RCCEx_PLL3_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004596:	663b      	str	r3, [r7, #96]	@ 0x60
 8004598:	2300      	movs	r3, #0
 800459a:	667b      	str	r3, [r7, #100]	@ 0x64
 800459c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d038      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b2:	d018      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b8:	d811      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045be:	d014      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c4:	d80b      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ce:	d106      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4bc3      	ldr	r3, [pc, #780]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4ac2      	ldr	r2, [pc, #776]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045dc:	e008      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045e4:	e004      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045f8:	4bb9      	ldr	r3, [pc, #740]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004608:	4ab5      	ldr	r2, [pc, #724]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6553      	str	r3, [r2, #84]	@ 0x54
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004626:	2300      	movs	r3, #0
 8004628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800462a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004634:	4baa      	ldr	r3, [pc, #680]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004642:	4aa7      	ldr	r2, [pc, #668]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004654:	653b      	str	r3, [r7, #80]	@ 0x50
 8004656:	2300      	movs	r3, #0
 8004658:	657b      	str	r3, [r7, #84]	@ 0x54
 800465a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004664:	4b9e      	ldr	r3, [pc, #632]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004674:	4a9a      	ldr	r2, [pc, #616]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004676:	430b      	orrs	r3, r1
 8004678:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004688:	2300      	movs	r3, #0
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800468c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004690:	460b      	mov	r3, r1
 8004692:	4313      	orrs	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004696:	4b92      	ldr	r3, [pc, #584]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a4:	4a8e      	ldr	r2, [pc, #568]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b8:	2300      	movs	r3, #0
 80046ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80046bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d00e      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046c6:	4b86      	ldr	r3, [pc, #536]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	4a85      	ldr	r2, [pc, #532]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046d0:	6113      	str	r3, [r2, #16]
 80046d2:	4b83      	ldr	r3, [pc, #524]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d4:	6919      	ldr	r1, [r3, #16]
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046de:	4a80      	ldr	r2, [pc, #512]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f2:	2300      	movs	r3, #0
 80046f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004700:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004704:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004710:	430b      	orrs	r3, r1
 8004712:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004720:	633b      	str	r3, [r7, #48]	@ 0x30
 8004722:	2300      	movs	r3, #0
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34
 8004726:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004730:	4b6b      	ldr	r3, [pc, #428]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004740:	4a67      	ldr	r2, [pc, #412]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004742:	430b      	orrs	r3, r1
 8004744:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	2100      	movs	r1, #0
 8004750:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004758:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d011      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fb78 	bl	8004e60 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	2100      	movs	r1, #0
 8004790:	6239      	str	r1, [r7, #32]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
 8004798:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d011      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	3308      	adds	r3, #8
 80047a8:	2101      	movs	r1, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fb58 	bl	8004e60 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	2100      	movs	r1, #0
 80047d0:	61b9      	str	r1, [r7, #24]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d011      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	3308      	adds	r3, #8
 80047e8:	2102      	movs	r1, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fb38 	bl	8004e60 <RCCEx_PLL2_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	2100      	movs	r1, #0
 8004810:	6139      	str	r1, [r7, #16]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d011      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	3328      	adds	r3, #40	@ 0x28
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fbca 	bl	8004fc4 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	2100      	movs	r1, #0
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d011      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004866:	3328      	adds	r3, #40	@ 0x28
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fbaa 	bl	8004fc4 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	2100      	movs	r1, #0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	e9d7 1200 	ldrd	r1, r2, [r7]
 800489c:	460b      	mov	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	d011      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	3328      	adds	r3, #40	@ 0x28
 80048a8:	2102      	movs	r1, #2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fb8a 	bl	8004fc4 <RCCEx_PLL3_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048c6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048da:	46bd      	mov	sp, r7
 80048dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e0:	58024400 	.word	0x58024400

080048e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048e8:	f7fe fd96 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58024400 	.word	0x58024400
 800490c:	08007b0c 	.word	0x08007b0c

08004910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	@ 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004918:	4ba1      	ldr	r3, [pc, #644]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004922:	4b9f      	ldr	r3, [pc, #636]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	0b1b      	lsrs	r3, r3, #12
 8004928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800492c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800492e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800493a:	4b99      	ldr	r3, [pc, #612]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493e:	08db      	lsrs	r3, r3, #3
 8004940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8111 	beq.w	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	f000 8083 	beq.w	8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b02      	cmp	r3, #2
 800496a:	f200 80a1 	bhi.w	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d056      	beq.n	8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800497a:	e099      	b.n	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800497c:	4b88      	ldr	r3, [pc, #544]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d02d      	beq.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004988:	4b85      	ldr	r3, [pc, #532]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	08db      	lsrs	r3, r3, #3
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	4a84      	ldr	r2, [pc, #528]	@ (8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
 8004998:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049e2:	e087      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a26:	e065      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b59      	ldr	r3, [pc, #356]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a6a:	e043      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aae:	e021      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b37      	ldr	r3, [pc, #220]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004af4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af8:	0a5b      	lsrs	r3, r3, #9
 8004afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1a:	ee17 2a90 	vmov	r2, s15
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b48:	ee17 2a90 	vmov	r2, s15
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b50:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b76:	ee17 2a90 	vmov	r2, s15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
}
 8004b92:	bf00      	nop
 8004b94:	3724      	adds	r7, #36	@ 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	03d09000 	.word	0x03d09000
 8004ba8:	46000000 	.word	0x46000000
 8004bac:	4c742400 	.word	0x4c742400
 8004bb0:	4a742400 	.word	0x4a742400
 8004bb4:	4af42400 	.word	0x4af42400

08004bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	@ 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bc0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bca:	4b9f      	ldr	r3, [pc, #636]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	0d1b      	lsrs	r3, r3, #20
 8004bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004be2:	4b99      	ldr	r3, [pc, #612]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8111 	beq.w	8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f000 8083 	beq.w	8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f200 80a1 	bhi.w	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d056      	beq.n	8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c22:	e099      	b.n	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c24:	4b88      	ldr	r3, [pc, #544]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02d      	beq.n	8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c30:	4b85      	ldr	r3, [pc, #532]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a84      	ldr	r2, [pc, #528]	@ (8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c8a:	e087      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cce:	e065      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d12:	e043      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b48      	ldr	r3, [pc, #288]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	e021      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b37      	ldr	r3, [pc, #220]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	ee17 2a90 	vmov	r2, s15
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1e:	ee17 2a90 	vmov	r2, s15
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e26:	e008      	b.n	8004e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	3724      	adds	r7, #36	@ 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	03d09000 	.word	0x03d09000
 8004e50:	46000000 	.word	0x46000000
 8004e54:	4c742400 	.word	0x4c742400
 8004e58:	4a742400 	.word	0x4a742400
 8004e5c:	4af42400 	.word	0x4af42400

08004e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d101      	bne.n	8004e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e099      	b.n	8004fb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a4e      	ldr	r2, [pc, #312]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004e84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fa5b 	bl	8001344 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e92:	f7fc fa57 	bl	8001344 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e086      	b.n	8004fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ea4:	4b45      	ldr	r3, [pc, #276]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004eb0:	4b42      	ldr	r3, [pc, #264]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	493f      	ldr	r1, [pc, #252]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	025b      	lsls	r3, r3, #9
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ef4:	4931      	ldr	r1, [pc, #196]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004efa:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	492d      	ldr	r1, [pc, #180]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	f023 0220 	bic.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	4928      	ldr	r1, [pc, #160]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f1e:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f24:	f023 0310 	bic.w	r3, r3, #16
 8004f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <RCCEx_PLL2_Config+0x160>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	69d2      	ldr	r2, [r2, #28]
 8004f36:	00d2      	lsls	r2, r2, #3
 8004f38:	4920      	ldr	r1, [pc, #128]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	4a1e      	ldr	r2, [pc, #120]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f44:	f043 0310 	orr.w	r3, r3, #16
 8004f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f50:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f5c:	e00f      	b.n	8004f7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d106      	bne.n	8004f72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f64:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	4a14      	ldr	r2, [pc, #80]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f70:	e005      	b.n	8004f7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f72:	4b12      	ldr	r3, [pc, #72]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a0e      	ldr	r2, [pc, #56]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc f9db 	bl	8001344 <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f92:	f7fc f9d7 	bl	8001344 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	ffff0007 	.word	0xffff0007

08004fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fd2:	4b53      	ldr	r3, [pc, #332]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d101      	bne.n	8004fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e099      	b.n	8005116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4e      	ldr	r2, [pc, #312]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fee:	f7fc f9a9 	bl	8001344 <HAL_GetTick>
 8004ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ff6:	f7fc f9a5 	bl	8001344 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e086      	b.n	8005116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005008:	4b45      	ldr	r3, [pc, #276]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005014:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	051b      	lsls	r3, r3, #20
 8005022:	493f      	ldr	r1, [pc, #252]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	628b      	str	r3, [r1, #40]	@ 0x28
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	3b01      	subs	r3, #1
 800502e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	3b01      	subs	r3, #1
 8005038:	025b      	lsls	r3, r3, #9
 800503a:	b29b      	uxth	r3, r3
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	3b01      	subs	r3, #1
 8005052:	061b      	lsls	r3, r3, #24
 8005054:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005058:	4931      	ldr	r1, [pc, #196]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 800505a:	4313      	orrs	r3, r2
 800505c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800505e:	4b30      	ldr	r3, [pc, #192]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	492d      	ldr	r1, [pc, #180]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005070:	4b2b      	ldr	r3, [pc, #172]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	4928      	ldr	r1, [pc, #160]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005082:	4b27      	ldr	r3, [pc, #156]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <RCCEx_PLL3_Config+0x160>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	69d2      	ldr	r2, [r2, #28]
 800509a:	00d2      	lsls	r2, r2, #3
 800509c:	4920      	ldr	r1, [pc, #128]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	4a19      	ldr	r2, [pc, #100]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050c0:	e00f      	b.n	80050e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050c8:	4b15      	ldr	r3, [pc, #84]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	4a14      	ldr	r2, [pc, #80]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050d4:	e005      	b.n	80050e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050d6:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	4a11      	ldr	r2, [pc, #68]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fc f929 	bl	8001344 <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050f4:	e008      	b.n	8005108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050f6:	f7fc f925 	bl	8001344 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <RCCEx_PLL3_Config+0x15c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	ffff0007 	.word	0xffff0007

08005128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e049      	b.n	80051ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fb fe9c 	bl	8000e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f000 fa58 	bl	800561c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x24>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e03c      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d109      	bne.n	8005216 <HAL_TIM_PWM_Start+0x3e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e02f      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x58>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e022      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d109      	bne.n	800524a <HAL_TIM_PWM_Start+0x72>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e015      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b10      	cmp	r3, #16
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start+0x8c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e0a1      	b.n	80053c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xb6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528c:	e023      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xc6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	e01b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	e013      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0xe6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052bc:	e00b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Start+0xf6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052cc:	e003      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd18 	bl	8005d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a38      	ldr	r2, [pc, #224]	@ (80053cc <HAL_TIM_PWM_Start+0x1f4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_TIM_PWM_Start+0x13e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a37      	ldr	r2, [pc, #220]	@ (80053d0 <HAL_TIM_PWM_Start+0x1f8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIM_PWM_Start+0x13e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a35      	ldr	r2, [pc, #212]	@ (80053d4 <HAL_TIM_PWM_Start+0x1fc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIM_PWM_Start+0x13e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a34      	ldr	r2, [pc, #208]	@ (80053d8 <HAL_TIM_PWM_Start+0x200>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIM_PWM_Start+0x13e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a32      	ldr	r2, [pc, #200]	@ (80053dc <HAL_TIM_PWM_Start+0x204>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_Start+0x142>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <HAL_TIM_PWM_Start+0x144>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800532e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_TIM_PWM_Start+0x1f4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005342:	d01d      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <HAL_TIM_PWM_Start+0x208>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <HAL_TIM_PWM_Start+0x20c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <HAL_TIM_PWM_Start+0x210>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1a      	ldr	r2, [pc, #104]	@ (80053d0 <HAL_TIM_PWM_Start+0x1f8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1e      	ldr	r2, [pc, #120]	@ (80053ec <HAL_TIM_PWM_Start+0x214>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_TIM_PWM_Start+0x1a8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <HAL_TIM_PWM_Start+0x1fc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d115      	bne.n	80053ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <HAL_TIM_PWM_Start+0x218>)
 8005388:	4013      	ands	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b06      	cmp	r3, #6
 8005390:	d015      	beq.n	80053be <HAL_TIM_PWM_Start+0x1e6>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005398:	d011      	beq.n	80053be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053aa:	e008      	b.n	80053be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e000      	b.n	80053c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40001800 	.word	0x40001800
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ff      	b.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b14      	cmp	r3, #20
 800541e:	f200 80f0 	bhi.w	8005602 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800547d 	.word	0x0800547d
 800542c:	08005603 	.word	0x08005603
 8005430:	08005603 	.word	0x08005603
 8005434:	08005603 	.word	0x08005603
 8005438:	080054bd 	.word	0x080054bd
 800543c:	08005603 	.word	0x08005603
 8005440:	08005603 	.word	0x08005603
 8005444:	08005603 	.word	0x08005603
 8005448:	080054ff 	.word	0x080054ff
 800544c:	08005603 	.word	0x08005603
 8005450:	08005603 	.word	0x08005603
 8005454:	08005603 	.word	0x08005603
 8005458:	0800553f 	.word	0x0800553f
 800545c:	08005603 	.word	0x08005603
 8005460:	08005603 	.word	0x08005603
 8005464:	08005603 	.word	0x08005603
 8005468:	08005581 	.word	0x08005581
 800546c:	08005603 	.word	0x08005603
 8005470:	08005603 	.word	0x08005603
 8005474:	08005603 	.word	0x08005603
 8005478:	080055c1 	.word	0x080055c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f970 	bl	8005768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	619a      	str	r2, [r3, #24]
      break;
 80054ba:	e0a5      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f9e0 	bl	8005888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      break;
 80054fc:	e084      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa49 	bl	800599c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0208 	orr.w	r2, r2, #8
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0204 	bic.w	r2, r2, #4
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	61da      	str	r2, [r3, #28]
      break;
 800553c:	e064      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fab1 	bl	8005aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	61da      	str	r2, [r3, #28]
      break;
 800557e:	e043      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fafa 	bl	8005b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055be:	e023      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb3e 	bl	8005c48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005600:	e002      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a46      	ldr	r2, [pc, #280]	@ (8005748 <TIM_Base_SetConfig+0x12c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d013      	beq.n	800565c <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563a:	d00f      	beq.n	800565c <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a43      	ldr	r2, [pc, #268]	@ (800574c <TIM_Base_SetConfig+0x130>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00b      	beq.n	800565c <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a42      	ldr	r2, [pc, #264]	@ (8005750 <TIM_Base_SetConfig+0x134>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d007      	beq.n	800565c <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a41      	ldr	r2, [pc, #260]	@ (8005754 <TIM_Base_SetConfig+0x138>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a40      	ldr	r2, [pc, #256]	@ (8005758 <TIM_Base_SetConfig+0x13c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d108      	bne.n	800566e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a35      	ldr	r2, [pc, #212]	@ (8005748 <TIM_Base_SetConfig+0x12c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01f      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567c:	d01b      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a32      	ldr	r2, [pc, #200]	@ (800574c <TIM_Base_SetConfig+0x130>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d017      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a31      	ldr	r2, [pc, #196]	@ (8005750 <TIM_Base_SetConfig+0x134>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <TIM_Base_SetConfig+0x138>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00f      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2f      	ldr	r2, [pc, #188]	@ (8005758 <TIM_Base_SetConfig+0x13c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00b      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2e      	ldr	r2, [pc, #184]	@ (800575c <TIM_Base_SetConfig+0x140>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d007      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005760 <TIM_Base_SetConfig+0x144>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <TIM_Base_SetConfig+0x9a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005764 <TIM_Base_SetConfig+0x148>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d108      	bne.n	80056c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a16      	ldr	r2, [pc, #88]	@ (8005748 <TIM_Base_SetConfig+0x12c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <TIM_Base_SetConfig+0xf8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <TIM_Base_SetConfig+0x13c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_Base_SetConfig+0xf8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	@ (800575c <TIM_Base_SetConfig+0x140>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <TIM_Base_SetConfig+0x144>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_Base_SetConfig+0xf8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <TIM_Base_SetConfig+0x148>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d103      	bne.n	800571c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	611a      	str	r2, [r3, #16]
  }
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40010400 	.word	0x40010400
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f023 0201 	bic.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4b37      	ldr	r3, [pc, #220]	@ (8005870 <TIM_OC1_SetConfig+0x108>)
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0302 	bic.w	r3, r3, #2
 80057b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a2d      	ldr	r2, [pc, #180]	@ (8005874 <TIM_OC1_SetConfig+0x10c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00f      	beq.n	80057e4 <TIM_OC1_SetConfig+0x7c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005878 <TIM_OC1_SetConfig+0x110>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_OC1_SetConfig+0x7c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a2b      	ldr	r2, [pc, #172]	@ (800587c <TIM_OC1_SetConfig+0x114>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_OC1_SetConfig+0x7c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005880 <TIM_OC1_SetConfig+0x118>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC1_SetConfig+0x7c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <TIM_OC1_SetConfig+0x11c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10c      	bne.n	80057fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0308 	bic.w	r3, r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1c      	ldr	r2, [pc, #112]	@ (8005874 <TIM_OC1_SetConfig+0x10c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00f      	beq.n	8005826 <TIM_OC1_SetConfig+0xbe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <TIM_OC1_SetConfig+0x110>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00b      	beq.n	8005826 <TIM_OC1_SetConfig+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1a      	ldr	r2, [pc, #104]	@ (800587c <TIM_OC1_SetConfig+0x114>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <TIM_OC1_SetConfig+0xbe>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <TIM_OC1_SetConfig+0x118>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_OC1_SetConfig+0xbe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a18      	ldr	r2, [pc, #96]	@ (8005884 <TIM_OC1_SetConfig+0x11c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d111      	bne.n	800584a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800582c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	fffeff8f 	.word	0xfffeff8f
 8005874:	40010000 	.word	0x40010000
 8005878:	40010400 	.word	0x40010400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 0210 	bic.w	r2, r3, #16
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4b34      	ldr	r3, [pc, #208]	@ (8005984 <TIM_OC2_SetConfig+0xfc>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0320 	bic.w	r3, r3, #32
 80058d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a29      	ldr	r2, [pc, #164]	@ (8005988 <TIM_OC2_SetConfig+0x100>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC2_SetConfig+0x68>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a28      	ldr	r2, [pc, #160]	@ (800598c <TIM_OC2_SetConfig+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10d      	bne.n	800590c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800590a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <TIM_OC2_SetConfig+0x100>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_OC2_SetConfig+0xac>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <TIM_OC2_SetConfig+0x104>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_OC2_SetConfig+0xac>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <TIM_OC2_SetConfig+0x108>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_OC2_SetConfig+0xac>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1b      	ldr	r2, [pc, #108]	@ (8005994 <TIM_OC2_SetConfig+0x10c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0xac>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1a      	ldr	r2, [pc, #104]	@ (8005998 <TIM_OC2_SetConfig+0x110>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800593a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	feff8fff 	.word	0xfeff8fff
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800

0800599c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4b33      	ldr	r3, [pc, #204]	@ (8005a94 <TIM_OC3_SetConfig+0xf8>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0303 	bic.w	r3, r3, #3
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a28      	ldr	r2, [pc, #160]	@ (8005a98 <TIM_OC3_SetConfig+0xfc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_OC3_SetConfig+0x66>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a27      	ldr	r2, [pc, #156]	@ (8005a9c <TIM_OC3_SetConfig+0x100>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10d      	bne.n	8005a1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <TIM_OC3_SetConfig+0xfc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00f      	beq.n	8005a46 <TIM_OC3_SetConfig+0xaa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <TIM_OC3_SetConfig+0x100>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_OC3_SetConfig+0xaa>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <TIM_OC3_SetConfig+0x104>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC3_SetConfig+0xaa>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <TIM_OC3_SetConfig+0x108>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC3_SetConfig+0xaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a19      	ldr	r2, [pc, #100]	@ (8005aa8 <TIM_OC3_SetConfig+0x10c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d113      	bne.n	8005a6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	fffeff8f 	.word	0xfffeff8f
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4b24      	ldr	r3, [pc, #144]	@ (8005b68 <TIM_OC4_SetConfig+0xbc>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	031b      	lsls	r3, r3, #12
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a19      	ldr	r2, [pc, #100]	@ (8005b6c <TIM_OC4_SetConfig+0xc0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_OC4_SetConfig+0x80>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <TIM_OC4_SetConfig+0xc4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_OC4_SetConfig+0x80>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	@ (8005b74 <TIM_OC4_SetConfig+0xc8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC4_SetConfig+0x80>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	@ (8005b78 <TIM_OC4_SetConfig+0xcc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC4_SetConfig+0x80>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <TIM_OC4_SetConfig+0xd0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	feff8fff 	.word	0xfeff8fff
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <TIM_OC5_SetConfig+0xb0>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005bc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <TIM_OC5_SetConfig+0xb4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_OC5_SetConfig+0x76>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <TIM_OC5_SetConfig+0xb8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_OC5_SetConfig+0x76>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_OC5_SetConfig+0xbc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_OC5_SetConfig+0x76>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <TIM_OC5_SetConfig+0xc0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_OC5_SetConfig+0x76>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a14      	ldr	r2, [pc, #80]	@ (8005c44 <TIM_OC5_SetConfig+0xc4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d109      	bne.n	8005c0a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	fffeff8f 	.word	0xfffeff8f
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40014400 	.word	0x40014400
 8005c44:	40014800 	.word	0x40014800

08005c48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <TIM_OC6_SetConfig+0xb4>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	051b      	lsls	r3, r3, #20
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a19      	ldr	r2, [pc, #100]	@ (8005d00 <TIM_OC6_SetConfig+0xb8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x78>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a18      	ldr	r2, [pc, #96]	@ (8005d04 <TIM_OC6_SetConfig+0xbc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x78>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a17      	ldr	r2, [pc, #92]	@ (8005d08 <TIM_OC6_SetConfig+0xc0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x78>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	@ (8005d0c <TIM_OC6_SetConfig+0xc4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x78>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <TIM_OC6_SetConfig+0xc8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d109      	bne.n	8005cd4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	feff8fff 	.word	0xfeff8fff
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2201      	movs	r2, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	401a      	ands	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <HAL_TIMEx_PWMN_Start+0x24>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	e022      	b.n	8005dca <HAL_TIMEx_PWMN_Start+0x6a>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d109      	bne.n	8005d9e <HAL_TIMEx_PWMN_Start+0x3e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	bf14      	ite	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	2300      	moveq	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	e015      	b.n	8005dca <HAL_TIMEx_PWMN_Start+0x6a>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d109      	bne.n	8005db8 <HAL_TIMEx_PWMN_Start+0x58>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	bf14      	ite	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	2300      	moveq	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e008      	b.n	8005dca <HAL_TIMEx_PWMN_Start+0x6a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e073      	b.n	8005eba <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIMEx_PWMN_Start+0x82>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de0:	e013      	b.n	8005e0a <HAL_TIMEx_PWMN_Start+0xaa>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d104      	bne.n	8005df2 <HAL_TIMEx_PWMN_Start+0x92>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005df0:	e00b      	b.n	8005e0a <HAL_TIMEx_PWMN_Start+0xaa>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d104      	bne.n	8005e02 <HAL_TIMEx_PWMN_Start+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e00:	e003      	b.n	8005e0a <HAL_TIMEx_PWMN_Start+0xaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fa38 	bl	8006288 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a25      	ldr	r2, [pc, #148]	@ (8005ec4 <HAL_TIMEx_PWMN_Start+0x164>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d022      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3a:	d01d      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a21      	ldr	r2, [pc, #132]	@ (8005ec8 <HAL_TIMEx_PWMN_Start+0x168>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d018      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a20      	ldr	r2, [pc, #128]	@ (8005ecc <HAL_TIMEx_PWMN_Start+0x16c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <HAL_TIMEx_PWMN_Start+0x170>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00e      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed4 <HAL_TIMEx_PWMN_Start+0x174>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <HAL_TIMEx_PWMN_Start+0x178>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d004      	beq.n	8005e78 <HAL_TIMEx_PWMN_Start+0x118>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1a      	ldr	r2, [pc, #104]	@ (8005edc <HAL_TIMEx_PWMN_Start+0x17c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d115      	bne.n	8005ea4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ee0 <HAL_TIMEx_PWMN_Start+0x180>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b06      	cmp	r3, #6
 8005e88:	d015      	beq.n	8005eb6 <HAL_TIMEx_PWMN_Start+0x156>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e90:	d011      	beq.n	8005eb6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea2:	e008      	b.n	8005eb6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e000      	b.n	8005eb8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40001800 	.word	0x40001800
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	00010007 	.word	0x00010007

08005ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e06d      	b.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a30      	ldr	r2, [pc, #192]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a20      	ldr	r2, [pc, #128]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d022      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6e:	d01d      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d018      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a15      	ldr	r2, [pc, #84]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10c      	bne.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40001800 	.word	0x40001800
 8005ffc:	40014000 	.word	0x40014000

08006000 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006018:	2302      	movs	r3, #2
 800601a:	e065      	b.n	80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a16      	ldr	r2, [pc, #88]	@ (80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d115      	bne.n	80060d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	051b      	lsls	r3, r3, #20
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b08b      	sub	sp, #44	@ 0x2c
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_ConfigBreakInput+0x20>
 8006118:	2302      	movs	r3, #2
 800611a:	e0af      	b.n	800627c <HAL_TIMEx_ConfigBreakInput+0x180>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3b01      	subs	r3, #1
 800612a:	2b07      	cmp	r3, #7
 800612c:	d83a      	bhi.n	80061a4 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800612e:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006155 	.word	0x08006155
 8006138:	08006169 	.word	0x08006169
 800613c:	080061a5 	.word	0x080061a5
 8006140:	0800617d 	.word	0x0800617d
 8006144:	080061a5 	.word	0x080061a5
 8006148:	080061a5 	.word	0x080061a5
 800614c:	080061a5 	.word	0x080061a5
 8006150:	08006191 	.word	0x08006191
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006154:	2301      	movs	r3, #1
 8006156:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800615c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006160:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006162:	2309      	movs	r3, #9
 8006164:	613b      	str	r3, [r7, #16]
      break;
 8006166:	e026      	b.n	80061b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006168:	2302      	movs	r3, #2
 800616a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006174:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006176:	230a      	movs	r3, #10
 8006178:	613b      	str	r3, [r7, #16]
      break;
 800617a:	e01c      	b.n	80061b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800617c:	2304      	movs	r3, #4
 800617e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006180:	2302      	movs	r3, #2
 8006182:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006184:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006188:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800618a:	230b      	movs	r3, #11
 800618c:	613b      	str	r3, [r7, #16]
      break;
 800618e:	e012      	b.n	80061b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 8006190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006194:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 8006196:	2308      	movs	r3, #8
 8006198:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
      break;
 80061a2:	e008      	b.n	80061b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }

    default:
    {
      bkin_enable_mask = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
      break;
 80061b4:	bf00      	nop
    }
  }

  switch (BreakInput)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d003      	beq.n	80061c4 <HAL_TIMEx_ConfigBreakInput+0xc8>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d029      	beq.n	8006216 <HAL_TIMEx_ConfigBreakInput+0x11a>
 80061c2:	e051      	b.n	8006268 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ca:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	6a3a      	ldr	r2, [r7, #32]
 80061d2:	4013      	ands	r3, r2
 80061d4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	409a      	lsls	r2, r3
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4013      	ands	r3, r2
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d00d      	beq.n	800620c <HAL_TIMEx_ConfigBreakInput+0x110>
      {
        tmporx &= ~bkin_polarity_mask;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	6a3a      	ldr	r2, [r7, #32]
 80061f6:	4013      	ands	r3, r2
 80061f8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	409a      	lsls	r2, r3
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	4313      	orrs	r3, r2
 800620a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8006214:	e02c      	b.n	8006270 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800621c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	43db      	mvns	r3, r3
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	4013      	ands	r3, r2
 8006226:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	409a      	lsls	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4013      	ands	r3, r2
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	4313      	orrs	r3, r2
 8006238:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b08      	cmp	r3, #8
 8006240:	d00d      	beq.n	800625e <HAL_TIMEx_ConfigBreakInput+0x162>
      {
        tmporx &= ~bkin_polarity_mask;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	43db      	mvns	r3, r3
 8006246:	6a3a      	ldr	r2, [r7, #32]
 8006248:	4013      	ands	r3, r2
 800624a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	409a      	lsls	r2, r3
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	4313      	orrs	r3, r2
 800625c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006266:	e003      	b.n	8006270 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800626e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800627c:	4618      	mov	r0, r3
 800627e:	372c      	adds	r7, #44	@ 0x2c
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	2204      	movs	r2, #4
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e042      	b.n	800636a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fa fe4e 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	@ 0x24
 8006300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0201 	bic.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fd91 	bl	8006e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f826 	bl	8006374 <UART_SetConfig>
 8006328:	4603      	mov	r3, r0
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e01b      	b.n	800636a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006350:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fe10 	bl	8006f88 <UART_CheckIdleState>
 8006368:	4603      	mov	r3, r0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006378:	b092      	sub	sp, #72	@ 0x48
 800637a:	af00      	add	r7, sp, #0
 800637c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	431a      	orrs	r2, r3
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	431a      	orrs	r2, r3
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	4313      	orrs	r3, r2
 800639a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4bbe      	ldr	r3, [pc, #760]	@ (800669c <UART_SetConfig+0x328>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4ab3      	ldr	r2, [pc, #716]	@ (80066a0 <UART_SetConfig+0x32c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063dc:	4313      	orrs	r3, r2
 80063de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	4baf      	ldr	r3, [pc, #700]	@ (80066a4 <UART_SetConfig+0x330>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	f023 010f 	bic.w	r1, r3, #15
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4aa6      	ldr	r2, [pc, #664]	@ (80066a8 <UART_SetConfig+0x334>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d177      	bne.n	8006504 <UART_SetConfig+0x190>
 8006414:	4ba5      	ldr	r3, [pc, #660]	@ (80066ac <UART_SetConfig+0x338>)
 8006416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800641c:	2b28      	cmp	r3, #40	@ 0x28
 800641e:	d86d      	bhi.n	80064fc <UART_SetConfig+0x188>
 8006420:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <UART_SetConfig+0xb4>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	080064cd 	.word	0x080064cd
 800642c:	080064fd 	.word	0x080064fd
 8006430:	080064fd 	.word	0x080064fd
 8006434:	080064fd 	.word	0x080064fd
 8006438:	080064fd 	.word	0x080064fd
 800643c:	080064fd 	.word	0x080064fd
 8006440:	080064fd 	.word	0x080064fd
 8006444:	080064fd 	.word	0x080064fd
 8006448:	080064d5 	.word	0x080064d5
 800644c:	080064fd 	.word	0x080064fd
 8006450:	080064fd 	.word	0x080064fd
 8006454:	080064fd 	.word	0x080064fd
 8006458:	080064fd 	.word	0x080064fd
 800645c:	080064fd 	.word	0x080064fd
 8006460:	080064fd 	.word	0x080064fd
 8006464:	080064fd 	.word	0x080064fd
 8006468:	080064dd 	.word	0x080064dd
 800646c:	080064fd 	.word	0x080064fd
 8006470:	080064fd 	.word	0x080064fd
 8006474:	080064fd 	.word	0x080064fd
 8006478:	080064fd 	.word	0x080064fd
 800647c:	080064fd 	.word	0x080064fd
 8006480:	080064fd 	.word	0x080064fd
 8006484:	080064fd 	.word	0x080064fd
 8006488:	080064e5 	.word	0x080064e5
 800648c:	080064fd 	.word	0x080064fd
 8006490:	080064fd 	.word	0x080064fd
 8006494:	080064fd 	.word	0x080064fd
 8006498:	080064fd 	.word	0x080064fd
 800649c:	080064fd 	.word	0x080064fd
 80064a0:	080064fd 	.word	0x080064fd
 80064a4:	080064fd 	.word	0x080064fd
 80064a8:	080064ed 	.word	0x080064ed
 80064ac:	080064fd 	.word	0x080064fd
 80064b0:	080064fd 	.word	0x080064fd
 80064b4:	080064fd 	.word	0x080064fd
 80064b8:	080064fd 	.word	0x080064fd
 80064bc:	080064fd 	.word	0x080064fd
 80064c0:	080064fd 	.word	0x080064fd
 80064c4:	080064fd 	.word	0x080064fd
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e222      	b.n	800691a <UART_SetConfig+0x5a6>
 80064d4:	2304      	movs	r3, #4
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e21e      	b.n	800691a <UART_SetConfig+0x5a6>
 80064dc:	2308      	movs	r3, #8
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e21a      	b.n	800691a <UART_SetConfig+0x5a6>
 80064e4:	2310      	movs	r3, #16
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e216      	b.n	800691a <UART_SetConfig+0x5a6>
 80064ec:	2320      	movs	r3, #32
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e212      	b.n	800691a <UART_SetConfig+0x5a6>
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e20e      	b.n	800691a <UART_SetConfig+0x5a6>
 80064fc:	2380      	movs	r3, #128	@ 0x80
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e20a      	b.n	800691a <UART_SetConfig+0x5a6>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a69      	ldr	r2, [pc, #420]	@ (80066b0 <UART_SetConfig+0x33c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d130      	bne.n	8006570 <UART_SetConfig+0x1fc>
 800650e:	4b67      	ldr	r3, [pc, #412]	@ (80066ac <UART_SetConfig+0x338>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b05      	cmp	r3, #5
 8006518:	d826      	bhi.n	8006568 <UART_SetConfig+0x1f4>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <UART_SetConfig+0x1ac>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006539 	.word	0x08006539
 8006524:	08006541 	.word	0x08006541
 8006528:	08006549 	.word	0x08006549
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e1ec      	b.n	800691a <UART_SetConfig+0x5a6>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e1e8      	b.n	800691a <UART_SetConfig+0x5a6>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e1e4      	b.n	800691a <UART_SetConfig+0x5a6>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e1e0      	b.n	800691a <UART_SetConfig+0x5a6>
 8006558:	2320      	movs	r3, #32
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e1dc      	b.n	800691a <UART_SetConfig+0x5a6>
 8006560:	2340      	movs	r3, #64	@ 0x40
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e1d8      	b.n	800691a <UART_SetConfig+0x5a6>
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e1d4      	b.n	800691a <UART_SetConfig+0x5a6>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a4f      	ldr	r2, [pc, #316]	@ (80066b4 <UART_SetConfig+0x340>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d130      	bne.n	80065dc <UART_SetConfig+0x268>
 800657a:	4b4c      	ldr	r3, [pc, #304]	@ (80066ac <UART_SetConfig+0x338>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b05      	cmp	r3, #5
 8006584:	d826      	bhi.n	80065d4 <UART_SetConfig+0x260>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0x218>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a5 	.word	0x080065a5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065b5 	.word	0x080065b5
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065cd 	.word	0x080065cd
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e1b6      	b.n	800691a <UART_SetConfig+0x5a6>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e1b2      	b.n	800691a <UART_SetConfig+0x5a6>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e1ae      	b.n	800691a <UART_SetConfig+0x5a6>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e1aa      	b.n	800691a <UART_SetConfig+0x5a6>
 80065c4:	2320      	movs	r3, #32
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e1a6      	b.n	800691a <UART_SetConfig+0x5a6>
 80065cc:	2340      	movs	r3, #64	@ 0x40
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e1a2      	b.n	800691a <UART_SetConfig+0x5a6>
 80065d4:	2380      	movs	r3, #128	@ 0x80
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e19e      	b.n	800691a <UART_SetConfig+0x5a6>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a35      	ldr	r2, [pc, #212]	@ (80066b8 <UART_SetConfig+0x344>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d130      	bne.n	8006648 <UART_SetConfig+0x2d4>
 80065e6:	4b31      	ldr	r3, [pc, #196]	@ (80066ac <UART_SetConfig+0x338>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	2b05      	cmp	r3, #5
 80065f0:	d826      	bhi.n	8006640 <UART_SetConfig+0x2cc>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x284>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006611 	.word	0x08006611
 80065fc:	08006619 	.word	0x08006619
 8006600:	08006621 	.word	0x08006621
 8006604:	08006629 	.word	0x08006629
 8006608:	08006631 	.word	0x08006631
 800660c:	08006639 	.word	0x08006639
 8006610:	2300      	movs	r3, #0
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e180      	b.n	800691a <UART_SetConfig+0x5a6>
 8006618:	2304      	movs	r3, #4
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661e:	e17c      	b.n	800691a <UART_SetConfig+0x5a6>
 8006620:	2308      	movs	r3, #8
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006626:	e178      	b.n	800691a <UART_SetConfig+0x5a6>
 8006628:	2310      	movs	r3, #16
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662e:	e174      	b.n	800691a <UART_SetConfig+0x5a6>
 8006630:	2320      	movs	r3, #32
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e170      	b.n	800691a <UART_SetConfig+0x5a6>
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e16c      	b.n	800691a <UART_SetConfig+0x5a6>
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e168      	b.n	800691a <UART_SetConfig+0x5a6>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1b      	ldr	r2, [pc, #108]	@ (80066bc <UART_SetConfig+0x348>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d142      	bne.n	80066d8 <UART_SetConfig+0x364>
 8006652:	4b16      	ldr	r3, [pc, #88]	@ (80066ac <UART_SetConfig+0x338>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b05      	cmp	r3, #5
 800665c:	d838      	bhi.n	80066d0 <UART_SetConfig+0x35c>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <UART_SetConfig+0x2f0>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	0800667d 	.word	0x0800667d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800668d 	.word	0x0800668d
 8006670:	08006695 	.word	0x08006695
 8006674:	080066c1 	.word	0x080066c1
 8006678:	080066c9 	.word	0x080066c9
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e14a      	b.n	800691a <UART_SetConfig+0x5a6>
 8006684:	2304      	movs	r3, #4
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e146      	b.n	800691a <UART_SetConfig+0x5a6>
 800668c:	2308      	movs	r3, #8
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006692:	e142      	b.n	800691a <UART_SetConfig+0x5a6>
 8006694:	2310      	movs	r3, #16
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669a:	e13e      	b.n	800691a <UART_SetConfig+0x5a6>
 800669c:	cfff69f3 	.word	0xcfff69f3
 80066a0:	58000c00 	.word	0x58000c00
 80066a4:	11fff4ff 	.word	0x11fff4ff
 80066a8:	40011000 	.word	0x40011000
 80066ac:	58024400 	.word	0x58024400
 80066b0:	40004400 	.word	0x40004400
 80066b4:	40004800 	.word	0x40004800
 80066b8:	40004c00 	.word	0x40004c00
 80066bc:	40005000 	.word	0x40005000
 80066c0:	2320      	movs	r3, #32
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e128      	b.n	800691a <UART_SetConfig+0x5a6>
 80066c8:	2340      	movs	r3, #64	@ 0x40
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e124      	b.n	800691a <UART_SetConfig+0x5a6>
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e120      	b.n	800691a <UART_SetConfig+0x5a6>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4acb      	ldr	r2, [pc, #812]	@ (8006a0c <UART_SetConfig+0x698>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d176      	bne.n	80067d0 <UART_SetConfig+0x45c>
 80066e2:	4bcb      	ldr	r3, [pc, #812]	@ (8006a10 <UART_SetConfig+0x69c>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ea:	2b28      	cmp	r3, #40	@ 0x28
 80066ec:	d86c      	bhi.n	80067c8 <UART_SetConfig+0x454>
 80066ee:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <UART_SetConfig+0x380>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006799 	.word	0x08006799
 80066f8:	080067c9 	.word	0x080067c9
 80066fc:	080067c9 	.word	0x080067c9
 8006700:	080067c9 	.word	0x080067c9
 8006704:	080067c9 	.word	0x080067c9
 8006708:	080067c9 	.word	0x080067c9
 800670c:	080067c9 	.word	0x080067c9
 8006710:	080067c9 	.word	0x080067c9
 8006714:	080067a1 	.word	0x080067a1
 8006718:	080067c9 	.word	0x080067c9
 800671c:	080067c9 	.word	0x080067c9
 8006720:	080067c9 	.word	0x080067c9
 8006724:	080067c9 	.word	0x080067c9
 8006728:	080067c9 	.word	0x080067c9
 800672c:	080067c9 	.word	0x080067c9
 8006730:	080067c9 	.word	0x080067c9
 8006734:	080067a9 	.word	0x080067a9
 8006738:	080067c9 	.word	0x080067c9
 800673c:	080067c9 	.word	0x080067c9
 8006740:	080067c9 	.word	0x080067c9
 8006744:	080067c9 	.word	0x080067c9
 8006748:	080067c9 	.word	0x080067c9
 800674c:	080067c9 	.word	0x080067c9
 8006750:	080067c9 	.word	0x080067c9
 8006754:	080067b1 	.word	0x080067b1
 8006758:	080067c9 	.word	0x080067c9
 800675c:	080067c9 	.word	0x080067c9
 8006760:	080067c9 	.word	0x080067c9
 8006764:	080067c9 	.word	0x080067c9
 8006768:	080067c9 	.word	0x080067c9
 800676c:	080067c9 	.word	0x080067c9
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067b9 	.word	0x080067b9
 8006778:	080067c9 	.word	0x080067c9
 800677c:	080067c9 	.word	0x080067c9
 8006780:	080067c9 	.word	0x080067c9
 8006784:	080067c9 	.word	0x080067c9
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067c9 	.word	0x080067c9
 8006790:	080067c9 	.word	0x080067c9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e0bc      	b.n	800691a <UART_SetConfig+0x5a6>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e0b8      	b.n	800691a <UART_SetConfig+0x5a6>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e0b4      	b.n	800691a <UART_SetConfig+0x5a6>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e0b0      	b.n	800691a <UART_SetConfig+0x5a6>
 80067b8:	2320      	movs	r3, #32
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e0ac      	b.n	800691a <UART_SetConfig+0x5a6>
 80067c0:	2340      	movs	r3, #64	@ 0x40
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e0a8      	b.n	800691a <UART_SetConfig+0x5a6>
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e0a4      	b.n	800691a <UART_SetConfig+0x5a6>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a8f      	ldr	r2, [pc, #572]	@ (8006a14 <UART_SetConfig+0x6a0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d130      	bne.n	800683c <UART_SetConfig+0x4c8>
 80067da:	4b8d      	ldr	r3, [pc, #564]	@ (8006a10 <UART_SetConfig+0x69c>)
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d826      	bhi.n	8006834 <UART_SetConfig+0x4c0>
 80067e6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0x478>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006805 	.word	0x08006805
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	08006815 	.word	0x08006815
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006825 	.word	0x08006825
 8006800:	0800682d 	.word	0x0800682d
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e086      	b.n	800691a <UART_SetConfig+0x5a6>
 800680c:	2304      	movs	r3, #4
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e082      	b.n	800691a <UART_SetConfig+0x5a6>
 8006814:	2308      	movs	r3, #8
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e07e      	b.n	800691a <UART_SetConfig+0x5a6>
 800681c:	2310      	movs	r3, #16
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e07a      	b.n	800691a <UART_SetConfig+0x5a6>
 8006824:	2320      	movs	r3, #32
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e076      	b.n	800691a <UART_SetConfig+0x5a6>
 800682c:	2340      	movs	r3, #64	@ 0x40
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e072      	b.n	800691a <UART_SetConfig+0x5a6>
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e06e      	b.n	800691a <UART_SetConfig+0x5a6>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a75      	ldr	r2, [pc, #468]	@ (8006a18 <UART_SetConfig+0x6a4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d130      	bne.n	80068a8 <UART_SetConfig+0x534>
 8006846:	4b72      	ldr	r3, [pc, #456]	@ (8006a10 <UART_SetConfig+0x69c>)
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b05      	cmp	r3, #5
 8006850:	d826      	bhi.n	80068a0 <UART_SetConfig+0x52c>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <UART_SetConfig+0x4e4>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	08006871 	.word	0x08006871
 800685c:	08006879 	.word	0x08006879
 8006860:	08006881 	.word	0x08006881
 8006864:	08006889 	.word	0x08006889
 8006868:	08006891 	.word	0x08006891
 800686c:	08006899 	.word	0x08006899
 8006870:	2300      	movs	r3, #0
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e050      	b.n	800691a <UART_SetConfig+0x5a6>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e04c      	b.n	800691a <UART_SetConfig+0x5a6>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006886:	e048      	b.n	800691a <UART_SetConfig+0x5a6>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688e:	e044      	b.n	800691a <UART_SetConfig+0x5a6>
 8006890:	2320      	movs	r3, #32
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e040      	b.n	800691a <UART_SetConfig+0x5a6>
 8006898:	2340      	movs	r3, #64	@ 0x40
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689e:	e03c      	b.n	800691a <UART_SetConfig+0x5a6>
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e038      	b.n	800691a <UART_SetConfig+0x5a6>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5b      	ldr	r2, [pc, #364]	@ (8006a1c <UART_SetConfig+0x6a8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d130      	bne.n	8006914 <UART_SetConfig+0x5a0>
 80068b2:	4b57      	ldr	r3, [pc, #348]	@ (8006a10 <UART_SetConfig+0x69c>)
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	d826      	bhi.n	800690c <UART_SetConfig+0x598>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0x550>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068dd 	.word	0x080068dd
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	080068ed 	.word	0x080068ed
 80068d0:	080068f5 	.word	0x080068f5
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	08006905 	.word	0x08006905
 80068dc:	2302      	movs	r3, #2
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e01a      	b.n	800691a <UART_SetConfig+0x5a6>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e016      	b.n	800691a <UART_SetConfig+0x5a6>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e012      	b.n	800691a <UART_SetConfig+0x5a6>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e00e      	b.n	800691a <UART_SetConfig+0x5a6>
 80068fc:	2320      	movs	r3, #32
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e00a      	b.n	800691a <UART_SetConfig+0x5a6>
 8006904:	2340      	movs	r3, #64	@ 0x40
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e006      	b.n	800691a <UART_SetConfig+0x5a6>
 800690c:	2380      	movs	r3, #128	@ 0x80
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e002      	b.n	800691a <UART_SetConfig+0x5a6>
 8006914:	2380      	movs	r3, #128	@ 0x80
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a1c <UART_SetConfig+0x6a8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	f040 80f8 	bne.w	8006b16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006926:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800692a:	2b20      	cmp	r3, #32
 800692c:	dc46      	bgt.n	80069bc <UART_SetConfig+0x648>
 800692e:	2b02      	cmp	r3, #2
 8006930:	f2c0 8082 	blt.w	8006a38 <UART_SetConfig+0x6c4>
 8006934:	3b02      	subs	r3, #2
 8006936:	2b1e      	cmp	r3, #30
 8006938:	d87e      	bhi.n	8006a38 <UART_SetConfig+0x6c4>
 800693a:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <UART_SetConfig+0x5cc>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	080069c3 	.word	0x080069c3
 8006944:	08006a39 	.word	0x08006a39
 8006948:	080069cb 	.word	0x080069cb
 800694c:	08006a39 	.word	0x08006a39
 8006950:	08006a39 	.word	0x08006a39
 8006954:	08006a39 	.word	0x08006a39
 8006958:	080069db 	.word	0x080069db
 800695c:	08006a39 	.word	0x08006a39
 8006960:	08006a39 	.word	0x08006a39
 8006964:	08006a39 	.word	0x08006a39
 8006968:	08006a39 	.word	0x08006a39
 800696c:	08006a39 	.word	0x08006a39
 8006970:	08006a39 	.word	0x08006a39
 8006974:	08006a39 	.word	0x08006a39
 8006978:	080069eb 	.word	0x080069eb
 800697c:	08006a39 	.word	0x08006a39
 8006980:	08006a39 	.word	0x08006a39
 8006984:	08006a39 	.word	0x08006a39
 8006988:	08006a39 	.word	0x08006a39
 800698c:	08006a39 	.word	0x08006a39
 8006990:	08006a39 	.word	0x08006a39
 8006994:	08006a39 	.word	0x08006a39
 8006998:	08006a39 	.word	0x08006a39
 800699c:	08006a39 	.word	0x08006a39
 80069a0:	08006a39 	.word	0x08006a39
 80069a4:	08006a39 	.word	0x08006a39
 80069a8:	08006a39 	.word	0x08006a39
 80069ac:	08006a39 	.word	0x08006a39
 80069b0:	08006a39 	.word	0x08006a39
 80069b4:	08006a39 	.word	0x08006a39
 80069b8:	08006a2b 	.word	0x08006a2b
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	d037      	beq.n	8006a30 <UART_SetConfig+0x6bc>
 80069c0:	e03a      	b.n	8006a38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069c2:	f7fd ff8f 	bl	80048e4 <HAL_RCCEx_GetD3PCLK1Freq>
 80069c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069c8:	e03c      	b.n	8006a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd ff9e 	bl	8004910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d8:	e034      	b.n	8006a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069da:	f107 0318 	add.w	r3, r7, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe f8ea 	bl	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e8:	e02c      	b.n	8006a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ea:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <UART_SetConfig+0x69c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069f6:	4b06      	ldr	r3, [pc, #24]	@ (8006a10 <UART_SetConfig+0x69c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	4a07      	ldr	r2, [pc, #28]	@ (8006a20 <UART_SetConfig+0x6ac>)
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a08:	e01c      	b.n	8006a44 <UART_SetConfig+0x6d0>
 8006a0a:	bf00      	nop
 8006a0c:	40011400 	.word	0x40011400
 8006a10:	58024400 	.word	0x58024400
 8006a14:	40007800 	.word	0x40007800
 8006a18:	40007c00 	.word	0x40007c00
 8006a1c:	58000c00 	.word	0x58000c00
 8006a20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006a24:	4b9d      	ldr	r3, [pc, #628]	@ (8006c9c <UART_SetConfig+0x928>)
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a28:	e00c      	b.n	8006a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a2a:	4b9d      	ldr	r3, [pc, #628]	@ (8006ca0 <UART_SetConfig+0x92c>)
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2e:	e009      	b.n	8006a44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a36:	e005      	b.n	8006a44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 81de 	beq.w	8006e08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	4a94      	ldr	r2, [pc, #592]	@ (8006ca4 <UART_SetConfig+0x930>)
 8006a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4413      	add	r3, r2
 8006a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d305      	bcc.n	8006a7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d903      	bls.n	8006a84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a82:	e1c1      	b.n	8006e08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a86:	2200      	movs	r2, #0
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	60fa      	str	r2, [r7, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a90:	4a84      	ldr	r2, [pc, #528]	@ (8006ca4 <UART_SetConfig+0x930>)
 8006a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2200      	movs	r2, #0
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006aa6:	f7f9 fc17 	bl	80002d8 <__aeabi_uldivmod>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	020b      	lsls	r3, r1, #8
 8006abc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ac0:	0202      	lsls	r2, r0, #8
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	6849      	ldr	r1, [r1, #4]
 8006ac6:	0849      	lsrs	r1, r1, #1
 8006ac8:	2000      	movs	r0, #0
 8006aca:	460c      	mov	r4, r1
 8006acc:	4605      	mov	r5, r0
 8006ace:	eb12 0804 	adds.w	r8, r2, r4
 8006ad2:	eb43 0905 	adc.w	r9, r3, r5
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	469a      	mov	sl, r3
 8006ade:	4693      	mov	fp, r2
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	465b      	mov	r3, fp
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	f7f9 fbf6 	bl	80002d8 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4613      	mov	r3, r2
 8006af2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afa:	d308      	bcc.n	8006b0e <UART_SetConfig+0x79a>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b02:	d204      	bcs.n	8006b0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	e17c      	b.n	8006e08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b14:	e178      	b.n	8006e08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b1e:	f040 80c5 	bne.w	8006cac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006b22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	dc48      	bgt.n	8006bbc <UART_SetConfig+0x848>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	db7b      	blt.n	8006c26 <UART_SetConfig+0x8b2>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d879      	bhi.n	8006c26 <UART_SetConfig+0x8b2>
 8006b32:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <UART_SetConfig+0x7c4>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006bc3 	.word	0x08006bc3
 8006b3c:	08006bcb 	.word	0x08006bcb
 8006b40:	08006c27 	.word	0x08006c27
 8006b44:	08006c27 	.word	0x08006c27
 8006b48:	08006bd3 	.word	0x08006bd3
 8006b4c:	08006c27 	.word	0x08006c27
 8006b50:	08006c27 	.word	0x08006c27
 8006b54:	08006c27 	.word	0x08006c27
 8006b58:	08006be3 	.word	0x08006be3
 8006b5c:	08006c27 	.word	0x08006c27
 8006b60:	08006c27 	.word	0x08006c27
 8006b64:	08006c27 	.word	0x08006c27
 8006b68:	08006c27 	.word	0x08006c27
 8006b6c:	08006c27 	.word	0x08006c27
 8006b70:	08006c27 	.word	0x08006c27
 8006b74:	08006c27 	.word	0x08006c27
 8006b78:	08006bf3 	.word	0x08006bf3
 8006b7c:	08006c27 	.word	0x08006c27
 8006b80:	08006c27 	.word	0x08006c27
 8006b84:	08006c27 	.word	0x08006c27
 8006b88:	08006c27 	.word	0x08006c27
 8006b8c:	08006c27 	.word	0x08006c27
 8006b90:	08006c27 	.word	0x08006c27
 8006b94:	08006c27 	.word	0x08006c27
 8006b98:	08006c27 	.word	0x08006c27
 8006b9c:	08006c27 	.word	0x08006c27
 8006ba0:	08006c27 	.word	0x08006c27
 8006ba4:	08006c27 	.word	0x08006c27
 8006ba8:	08006c27 	.word	0x08006c27
 8006bac:	08006c27 	.word	0x08006c27
 8006bb0:	08006c27 	.word	0x08006c27
 8006bb4:	08006c27 	.word	0x08006c27
 8006bb8:	08006c19 	.word	0x08006c19
 8006bbc:	2b40      	cmp	r3, #64	@ 0x40
 8006bbe:	d02e      	beq.n	8006c1e <UART_SetConfig+0x8aa>
 8006bc0:	e031      	b.n	8006c26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc2:	f7fc fc59 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8006bc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bc8:	e033      	b.n	8006c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bca:	f7fc fc6b 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8006bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bd0:	e02f      	b.n	8006c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd fe9a 	bl	8004910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be0:	e027      	b.n	8006c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be2:	f107 0318 	add.w	r3, r7, #24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd ffe6 	bl	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf0:	e01f      	b.n	8006c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca8 <UART_SetConfig+0x934>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca8 <UART_SetConfig+0x934>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	08db      	lsrs	r3, r3, #3
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	4a24      	ldr	r2, [pc, #144]	@ (8006c9c <UART_SetConfig+0x928>)
 8006c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c10:	e00f      	b.n	8006c32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006c12:	4b22      	ldr	r3, [pc, #136]	@ (8006c9c <UART_SetConfig+0x928>)
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c16:	e00c      	b.n	8006c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c18:	4b21      	ldr	r3, [pc, #132]	@ (8006ca0 <UART_SetConfig+0x92c>)
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80e7 	beq.w	8006e08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	4a19      	ldr	r2, [pc, #100]	@ (8006ca4 <UART_SetConfig+0x930>)
 8006c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4c:	005a      	lsls	r2, r3, #1
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	085b      	lsrs	r3, r3, #1
 8006c54:	441a      	add	r2, r3
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	2b0f      	cmp	r3, #15
 8006c64:	d916      	bls.n	8006c94 <UART_SetConfig+0x920>
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c6c:	d212      	bcs.n	8006c94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f023 030f 	bic.w	r3, r3, #15
 8006c76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c86:	4313      	orrs	r3, r2
 8006c88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	e0b9      	b.n	8006e08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c9a:	e0b5      	b.n	8006e08 <UART_SetConfig+0xa94>
 8006c9c:	03d09000 	.word	0x03d09000
 8006ca0:	003d0900 	.word	0x003d0900
 8006ca4:	08007b1c 	.word	0x08007b1c
 8006ca8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	dc49      	bgt.n	8006d48 <UART_SetConfig+0x9d4>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	db7c      	blt.n	8006db2 <UART_SetConfig+0xa3e>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d87a      	bhi.n	8006db2 <UART_SetConfig+0xa3e>
 8006cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <UART_SetConfig+0x950>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006d4f 	.word	0x08006d4f
 8006cc8:	08006d57 	.word	0x08006d57
 8006ccc:	08006db3 	.word	0x08006db3
 8006cd0:	08006db3 	.word	0x08006db3
 8006cd4:	08006d5f 	.word	0x08006d5f
 8006cd8:	08006db3 	.word	0x08006db3
 8006cdc:	08006db3 	.word	0x08006db3
 8006ce0:	08006db3 	.word	0x08006db3
 8006ce4:	08006d6f 	.word	0x08006d6f
 8006ce8:	08006db3 	.word	0x08006db3
 8006cec:	08006db3 	.word	0x08006db3
 8006cf0:	08006db3 	.word	0x08006db3
 8006cf4:	08006db3 	.word	0x08006db3
 8006cf8:	08006db3 	.word	0x08006db3
 8006cfc:	08006db3 	.word	0x08006db3
 8006d00:	08006db3 	.word	0x08006db3
 8006d04:	08006d7f 	.word	0x08006d7f
 8006d08:	08006db3 	.word	0x08006db3
 8006d0c:	08006db3 	.word	0x08006db3
 8006d10:	08006db3 	.word	0x08006db3
 8006d14:	08006db3 	.word	0x08006db3
 8006d18:	08006db3 	.word	0x08006db3
 8006d1c:	08006db3 	.word	0x08006db3
 8006d20:	08006db3 	.word	0x08006db3
 8006d24:	08006db3 	.word	0x08006db3
 8006d28:	08006db3 	.word	0x08006db3
 8006d2c:	08006db3 	.word	0x08006db3
 8006d30:	08006db3 	.word	0x08006db3
 8006d34:	08006db3 	.word	0x08006db3
 8006d38:	08006db3 	.word	0x08006db3
 8006d3c:	08006db3 	.word	0x08006db3
 8006d40:	08006db3 	.word	0x08006db3
 8006d44:	08006da5 	.word	0x08006da5
 8006d48:	2b40      	cmp	r3, #64	@ 0x40
 8006d4a:	d02e      	beq.n	8006daa <UART_SetConfig+0xa36>
 8006d4c:	e031      	b.n	8006db2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4e:	f7fc fb93 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8006d52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d54:	e033      	b.n	8006dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d56:	f7fc fba5 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8006d5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d5c:	e02f      	b.n	8006dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fd fdd4 	bl	8004910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d6c:	e027      	b.n	8006dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d6e:	f107 0318 	add.w	r3, r7, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fd ff20 	bl	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7c:	e01f      	b.n	8006dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e34 <UART_SetConfig+0xac0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006e34 <UART_SetConfig+0xac0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	4a28      	ldr	r2, [pc, #160]	@ (8006e38 <UART_SetConfig+0xac4>)
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d9c:	e00f      	b.n	8006dbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d9e:	4b26      	ldr	r3, [pc, #152]	@ (8006e38 <UART_SetConfig+0xac4>)
 8006da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da2:	e00c      	b.n	8006dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006da4:	4b25      	ldr	r3, [pc, #148]	@ (8006e3c <UART_SetConfig+0xac8>)
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d021      	beq.n	8006e08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e40 <UART_SetConfig+0xacc>)
 8006dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d909      	bls.n	8006e02 <UART_SetConfig+0xa8e>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df4:	d205      	bcs.n	8006e02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
 8006e00:	e002      	b.n	8006e08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2200      	movs	r2, #0
 8006e22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3748      	adds	r7, #72	@ 0x48
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e32:	bf00      	nop
 8006e34:	58024400 	.word	0x58024400
 8006e38:	03d09000 	.word	0x03d09000
 8006e3c:	003d0900 	.word	0x003d0900
 8006e40:	08007b1c 	.word	0x08007b1c

08006e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01a      	beq.n	8006f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f42:	d10a      	bne.n	8006f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]
  }
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b098      	sub	sp, #96	@ 0x60
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f98:	f7fa f9d4 	bl	8001344 <HAL_GetTick>
 8006f9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d12f      	bne.n	800700c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f88e 	bl	80070dc <UART_WaitOnFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d022      	beq.n	800700c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fe6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e6      	bne.n	8006fc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e063      	b.n	80070d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b04      	cmp	r3, #4
 8007018:	d149      	bne.n	80070ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007022:	2200      	movs	r2, #0
 8007024:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f857 	bl	80070dc <UART_WaitOnFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d03c      	beq.n	80070ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	623b      	str	r3, [r7, #32]
   return(result);
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007052:	633b      	str	r3, [r7, #48]	@ 0x30
 8007054:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e6      	bne.n	8007034 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	60fb      	str	r3, [r7, #12]
   return(result);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007086:	61fa      	str	r2, [r7, #28]
 8007088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	69b9      	ldr	r1, [r7, #24]
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	617b      	str	r3, [r7, #20]
   return(result);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e012      	b.n	80070d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3758      	adds	r7, #88	@ 0x58
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	4613      	mov	r3, r2
 80070ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ec:	e04f      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d04b      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f6:	f7fa f925 	bl	8001344 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <UART_WaitOnFlagUntilTimeout+0x30>
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e04e      	b.n	80071ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d037      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0xb2>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b80      	cmp	r3, #128	@ 0x80
 8007122:	d034      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b40      	cmp	r3, #64	@ 0x40
 8007128:	d031      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d110      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2208      	movs	r2, #8
 800713e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 f839 	bl	80071b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2208      	movs	r2, #8
 800714a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e029      	b.n	80071ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007168:	d111      	bne.n	800718e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f81f 	bl	80071b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e00f      	b.n	80071ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4013      	ands	r3, r2
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	429a      	cmp	r2, r3
 800719c:	bf0c      	ite	eq
 800719e:	2301      	moveq	r3, #1
 80071a0:	2300      	movne	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d0a0      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b095      	sub	sp, #84	@ 0x54
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071de:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e6      	bne.n	80071c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	61fb      	str	r3, [r7, #28]
   return(result);
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	4b1e      	ldr	r3, [pc, #120]	@ (8007280 <UART_EndRxTransfer+0xc8>)
 8007206:	4013      	ands	r3, r2
 8007208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007214:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d118      	bne.n	8007260 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	60bb      	str	r3, [r7, #8]
   return(result);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f023 0310 	bic.w	r3, r3, #16
 8007242:	647b      	str	r3, [r7, #68]	@ 0x44
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6979      	ldr	r1, [r7, #20]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	613b      	str	r3, [r7, #16]
   return(result);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e6      	bne.n	800722e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007274:	bf00      	nop
 8007276:	3754      	adds	r7, #84	@ 0x54
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	effffffe 	.word	0xeffffffe

08007284 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_UARTEx_DisableFifoMode+0x16>
 8007296:	2302      	movs	r3, #2
 8007298:	e027      	b.n	80072ea <HAL_UARTEx_DisableFifoMode+0x66>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2224      	movs	r2, #36	@ 0x24
 80072a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800730a:	2302      	movs	r3, #2
 800730c:	e02d      	b.n	800736a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2224      	movs	r2, #36	@ 0x24
 800731a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f850 	bl	80073f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007386:	2302      	movs	r3, #2
 8007388:	e02d      	b.n	80073e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2224      	movs	r2, #36	@ 0x24
 8007396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f812 	bl	80073f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007410:	e031      	b.n	8007476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007412:	2310      	movs	r3, #16
 8007414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007416:	2310      	movs	r3, #16
 8007418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	0e5b      	lsrs	r3, r3, #25
 8007422:	b2db      	uxtb	r3, r3
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	0f5b      	lsrs	r3, r3, #29
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	7b3a      	ldrb	r2, [r7, #12]
 800743e:	4911      	ldr	r1, [pc, #68]	@ (8007484 <UARTEx_SetNbDataToProcess+0x94>)
 8007440:	5c8a      	ldrb	r2, [r1, r2]
 8007442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007446:	7b3a      	ldrb	r2, [r7, #12]
 8007448:	490f      	ldr	r1, [pc, #60]	@ (8007488 <UARTEx_SetNbDataToProcess+0x98>)
 800744a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800744c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	7b7a      	ldrb	r2, [r7, #13]
 800745c:	4909      	ldr	r1, [pc, #36]	@ (8007484 <UARTEx_SetNbDataToProcess+0x94>)
 800745e:	5c8a      	ldrb	r2, [r1, r2]
 8007460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007464:	7b7a      	ldrb	r2, [r7, #13]
 8007466:	4908      	ldr	r1, [pc, #32]	@ (8007488 <UARTEx_SetNbDataToProcess+0x98>)
 8007468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800746a:	fb93 f3f2 	sdiv	r3, r3, r2
 800746e:	b29a      	uxth	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	08007b34 	.word	0x08007b34
 8007488:	08007b3c 	.word	0x08007b3c

0800748c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800748c:	b084      	sub	sp, #16
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	f107 001c 	add.w	r0, r7, #28
 800749a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800749e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d121      	bne.n	80074ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007568 <USB_CoreInit+0xdc>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d105      	bne.n	80074de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 faaa 	bl	8007a38 <USB_CoreReset>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]
 80074e8:	e01b      	b.n	8007522 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa9e 	bl	8007a38 <USB_CoreReset>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007500:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007504:	2b00      	cmp	r3, #0
 8007506:	d106      	bne.n	8007516 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	639a      	str	r2, [r3, #56]	@ 0x38
 8007514:	e005      	b.n	8007522 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007522:	7fbb      	ldrb	r3, [r7, #30]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d116      	bne.n	8007556 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752c:	b29a      	uxth	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <USB_CoreInit+0xe0>)
 8007538:	4313      	orrs	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f043 0206 	orr.w	r2, r3, #6
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007562:	b004      	add	sp, #16
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	ffbdffbf 	.word	0xffbdffbf
 800756c:	03ee0000 	.word	0x03ee0000

08007570 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f023 0201 	bic.w	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d115      	bne.n	80075e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075c0:	200a      	movs	r0, #10
 80075c2:	f7f9 fecb 	bl	800135c <HAL_Delay>
      ms += 10U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	330a      	adds	r3, #10
 80075ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa25 	bl	8007a1c <USB_GetMode>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d01e      	beq.n	8007616 <USB_SetCurrentMode+0x84>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2bc7      	cmp	r3, #199	@ 0xc7
 80075dc:	d9f0      	bls.n	80075c0 <USB_SetCurrentMode+0x2e>
 80075de:	e01a      	b.n	8007616 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d115      	bne.n	8007612 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075f2:	200a      	movs	r0, #10
 80075f4:	f7f9 feb2 	bl	800135c <HAL_Delay>
      ms += 10U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	330a      	adds	r3, #10
 80075fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa0c 	bl	8007a1c <USB_GetMode>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <USB_SetCurrentMode+0x84>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2bc7      	cmp	r3, #199	@ 0xc7
 800760e:	d9f0      	bls.n	80075f2 <USB_SetCurrentMode+0x60>
 8007610:	e001      	b.n	8007616 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e005      	b.n	8007622 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2bc8      	cmp	r3, #200	@ 0xc8
 800761a:	d101      	bne.n	8007620 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800762c:	b084      	sub	sp, #16
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800763a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	e009      	b.n	8007660 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3340      	adds	r3, #64	@ 0x40
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	2200      	movs	r2, #0
 8007658:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3301      	adds	r3, #1
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b0e      	cmp	r3, #14
 8007664:	d9f2      	bls.n	800764c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007666:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11c      	bne.n	80076a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007686:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e005      	b.n	80076b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076ba:	461a      	mov	r2, r3
 80076bc:	2300      	movs	r3, #0
 80076be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10d      	bne.n	80076e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f968 	bl	80079a8 <USB_SetDevSpeed>
 80076d8:	e008      	b.n	80076ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076da:	2101      	movs	r1, #1
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f963 	bl	80079a8 <USB_SetDevSpeed>
 80076e2:	e003      	b.n	80076ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076e4:	2103      	movs	r1, #3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f95e 	bl	80079a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076ec:	2110      	movs	r1, #16
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f8fa 	bl	80078e8 <USB_FlushTxFifo>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f924 	bl	800794c <USB_FlushRxFifo>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007714:	461a      	mov	r2, r3
 8007716:	2300      	movs	r3, #0
 8007718:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007720:	461a      	mov	r2, r3
 8007722:	2300      	movs	r3, #0
 8007724:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800772c:	461a      	mov	r2, r3
 800772e:	2300      	movs	r3, #0
 8007730:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	e043      	b.n	80077c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800774a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800774e:	d118      	bne.n	8007782 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007762:	461a      	mov	r2, r3
 8007764:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e013      	b.n	8007794 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007778:	461a      	mov	r2, r3
 800777a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e008      	b.n	8007794 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778e:	461a      	mov	r2, r3
 8007790:	2300      	movs	r3, #0
 8007792:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b2:	461a      	mov	r2, r3
 80077b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80077b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	3301      	adds	r3, #1
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077c4:	461a      	mov	r2, r3
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d3b5      	bcc.n	8007738 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e043      	b.n	800785a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e8:	d118      	bne.n	800781c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	461a      	mov	r2, r3
 80077fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	e013      	b.n	800782e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007812:	461a      	mov	r2, r3
 8007814:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	e008      	b.n	800782e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	461a      	mov	r2, r3
 800782a:	2300      	movs	r3, #0
 800782c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783a:	461a      	mov	r2, r3
 800783c:	2300      	movs	r3, #0
 800783e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784c:	461a      	mov	r2, r3
 800784e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007852:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	3301      	adds	r3, #1
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800785e:	461a      	mov	r2, r3
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4293      	cmp	r3, r2
 8007864:	d3b5      	bcc.n	80077d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007878:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007886:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007888:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f043 0210 	orr.w	r2, r3, #16
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699a      	ldr	r2, [r3, #24]
 80078a0:	4b0f      	ldr	r3, [pc, #60]	@ (80078e0 <USB_DevInit+0x2b4>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f043 0208 	orr.w	r2, r3, #8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d105      	bne.n	80078d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699a      	ldr	r2, [r3, #24]
 80078c8:	4b06      	ldr	r3, [pc, #24]	@ (80078e4 <USB_DevInit+0x2b8>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078dc:	b004      	add	sp, #16
 80078de:	4770      	bx	lr
 80078e0:	803c3800 	.word	0x803c3800
 80078e4:	40000004 	.word	0x40000004

080078e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007902:	d901      	bls.n	8007908 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e01b      	b.n	8007940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	daf2      	bge.n	80078f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	019b      	lsls	r3, r3, #6
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800792c:	d901      	bls.n	8007932 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e006      	b.n	8007940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b20      	cmp	r3, #32
 800793c:	d0f0      	beq.n	8007920 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007964:	d901      	bls.n	800796a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e018      	b.n	800799c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	daf2      	bge.n	8007958 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2210      	movs	r2, #16
 800797a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007988:	d901      	bls.n	800798e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e006      	b.n	800799c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0310 	and.w	r3, r3, #16
 8007996:	2b10      	cmp	r3, #16
 8007998:	d0f0      	beq.n	800797c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079c8:	4313      	orrs	r3, r2
 80079ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079f4:	f023 0303 	bic.w	r3, r3, #3
 80079f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	f003 0301 	and.w	r3, r3, #1
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a50:	d901      	bls.n	8007a56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e01b      	b.n	8007a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	daf2      	bge.n	8007a44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f043 0201 	orr.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a7a:	d901      	bls.n	8007a80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e006      	b.n	8007a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d0f0      	beq.n	8007a6e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <memset>:
 8007a9a:	4402      	add	r2, r0
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d100      	bne.n	8007aa4 <memset+0xa>
 8007aa2:	4770      	bx	lr
 8007aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa8:	e7f9      	b.n	8007a9e <memset+0x4>
	...

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	@ (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	@ (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f000 f818 	bl	8007af4 <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	08007b4c 	.word	0x08007b4c
 8007ae8:	08007b4c 	.word	0x08007b4c
 8007aec:	08007b4c 	.word	0x08007b4c
 8007af0:	08007b50 	.word	0x08007b50

08007af4 <_init>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr

08007b00 <_fini>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr
